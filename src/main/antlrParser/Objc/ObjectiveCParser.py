# Generated from ObjectiveCParser.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,222,1701,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,1,0,5,0,290,8,0,10,0,12,0,293,9,0,1,0,1,0,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,308,8,1,1,2,1,2,1,2,
        1,2,1,3,3,3,315,8,3,1,3,1,3,1,3,1,3,3,3,321,8,3,1,3,1,3,1,3,1,3,
        3,3,327,8,3,1,3,3,3,330,8,3,1,3,3,3,333,8,3,1,3,1,3,1,4,1,4,1,4,
        1,4,3,4,341,8,4,1,4,1,4,1,4,1,4,1,4,3,4,348,8,4,1,4,3,4,351,8,4,
        1,4,3,4,354,8,4,1,4,1,4,1,5,1,5,1,5,1,5,3,5,362,8,5,1,5,3,5,365,
        8,5,1,5,3,5,368,8,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,3,6,378,8,6,
        1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,3,7,388,8,7,1,8,1,8,1,8,1,8,1,8,
        1,8,3,8,396,8,8,1,8,5,8,399,8,8,10,8,12,8,402,9,8,1,8,1,8,1,9,1,
        9,5,9,408,8,9,10,9,12,9,411,9,9,1,9,4,9,414,8,9,11,9,12,9,415,3,
        9,418,8,9,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,5,11,428,8,11,
        10,11,12,11,431,9,11,1,11,1,11,1,12,1,12,1,12,5,12,438,8,12,10,12,
        12,12,441,9,12,1,13,1,13,1,13,1,13,1,13,3,13,448,8,13,1,13,3,13,
        451,8,13,1,13,3,13,454,8,13,1,13,1,13,1,14,1,14,1,14,5,14,461,8,
        14,10,14,12,14,464,9,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
        1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,
        486,8,15,1,16,1,16,1,16,1,16,1,16,3,16,493,8,16,1,16,3,16,496,8,
        16,1,17,1,17,5,17,500,8,17,10,17,12,17,503,9,17,1,17,1,17,1,18,1,
        18,5,18,509,8,18,10,18,12,18,512,9,18,1,18,4,18,515,8,18,11,18,12,
        18,516,3,18,519,8,18,1,19,1,19,1,20,1,20,1,20,1,20,1,20,4,20,528,
        8,20,11,20,12,20,529,1,21,1,21,1,21,1,22,1,22,1,22,1,23,3,23,539,
        8,23,1,23,1,23,3,23,543,8,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,
        4,24,552,8,24,11,24,12,24,553,1,25,1,25,1,25,1,26,1,26,1,26,1,27,
        3,27,563,8,27,1,27,1,27,3,27,567,8,27,1,27,3,27,570,8,27,1,27,1,
        27,1,28,1,28,4,28,576,8,28,11,28,12,28,577,1,28,1,28,3,28,582,8,
        28,3,28,584,8,28,1,29,3,29,587,8,29,1,29,1,29,5,29,591,8,29,10,29,
        12,29,594,9,29,1,29,3,29,597,8,29,1,29,1,29,1,30,1,30,3,30,603,8,
        30,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,
        32,617,8,32,1,33,1,33,1,33,5,33,622,8,33,10,33,12,33,625,9,33,1,
        34,1,34,1,34,3,34,630,8,34,1,35,3,35,633,8,35,1,35,1,35,3,35,637,
        8,35,1,35,1,35,1,35,1,35,3,35,643,8,35,1,35,1,35,3,35,647,8,35,1,
        36,1,36,1,36,1,36,5,36,653,8,36,10,36,12,36,656,9,36,3,36,658,8,
        36,1,36,1,36,1,37,5,37,663,8,37,10,37,12,37,666,9,37,1,37,1,37,3,
        37,670,8,37,1,38,1,38,1,38,1,38,1,38,5,38,677,8,38,10,38,12,38,680,
        9,38,1,38,3,38,683,8,38,3,38,685,8,38,1,38,1,38,1,39,1,39,1,39,1,
        39,1,40,1,40,1,40,1,40,3,40,697,8,40,3,40,699,8,40,1,40,1,40,1,41,
        1,41,1,41,1,41,1,41,1,41,1,41,1,41,3,41,711,8,41,3,41,713,8,41,1,
        42,1,42,1,42,3,42,718,8,42,1,42,1,42,5,42,722,8,42,10,42,12,42,725,
        9,42,3,42,727,8,42,1,42,1,42,1,43,1,43,3,43,733,8,43,1,44,1,44,3,
        44,737,8,44,1,44,3,44,740,8,44,1,44,3,44,743,8,44,1,44,1,44,1,45,
        1,45,1,45,1,45,1,45,1,46,1,46,3,46,754,8,46,1,47,1,47,4,47,758,8,
        47,11,47,12,47,759,3,47,762,8,47,1,48,3,48,765,8,48,1,48,1,48,1,
        48,1,48,5,48,771,8,48,10,48,12,48,774,9,48,1,49,1,49,3,49,778,8,
        49,1,49,1,49,1,49,1,49,3,49,784,8,49,1,50,1,50,1,50,1,50,1,50,1,
        51,1,51,3,51,793,8,51,1,51,4,51,796,8,51,11,51,12,51,797,3,51,800,
        8,51,1,52,1,52,1,52,1,52,1,52,1,53,1,53,1,53,1,53,1,53,1,54,1,54,
        1,54,1,55,1,55,1,55,1,55,1,55,1,55,1,55,3,55,822,8,55,1,56,1,56,
        1,56,5,56,827,8,56,10,56,12,56,830,9,56,1,56,1,56,3,56,834,8,56,
        1,57,1,57,1,57,1,57,1,57,1,57,1,58,1,58,1,58,1,58,1,58,1,58,1,59,
        1,59,1,59,1,60,1,60,1,60,1,61,1,61,1,61,1,62,3,62,858,8,62,1,62,
        1,62,1,62,3,62,863,8,62,1,62,1,62,1,62,3,62,868,8,62,1,63,1,63,3,
        63,872,8,63,1,64,1,64,3,64,876,8,64,1,65,1,65,3,65,880,8,65,1,65,
        1,65,1,66,1,66,1,66,5,66,887,8,66,10,66,12,66,890,9,66,1,67,1,67,
        1,67,1,67,3,67,896,8,67,1,68,1,68,1,68,1,68,1,68,3,68,903,8,68,1,
        69,1,69,1,69,1,69,3,69,909,8,69,1,70,3,70,912,8,70,1,70,1,70,3,70,
        916,8,70,1,70,1,70,1,70,1,70,1,70,1,71,3,71,924,8,71,1,71,3,71,927,
        8,71,1,71,1,71,3,71,931,8,71,1,71,1,71,1,72,1,72,1,72,1,72,3,72,
        939,8,72,1,72,1,72,1,73,3,73,944,8,73,1,73,1,73,1,73,1,73,1,73,3,
        73,951,8,73,1,73,1,73,1,74,1,74,1,74,5,74,958,8,74,10,74,12,74,961,
        9,74,1,75,3,75,964,8,75,1,75,1,75,1,76,1,76,1,76,1,76,1,76,1,76,
        1,76,1,76,4,76,976,8,76,11,76,12,76,977,1,77,1,77,1,77,1,77,1,77,
        1,77,5,77,986,8,77,10,77,12,77,989,9,77,1,77,1,77,1,77,1,78,1,78,
        1,78,5,78,997,8,78,10,78,12,78,1000,9,78,1,79,1,79,1,79,3,79,1005,
        8,79,1,80,1,80,1,80,3,80,1010,8,80,1,80,1,80,4,80,1014,8,80,11,80,
        12,80,1015,1,80,1,80,3,80,1020,8,80,1,81,1,81,1,81,3,81,1025,8,81,
        1,81,1,81,1,82,1,82,1,82,1,82,1,82,1,82,4,82,1035,8,82,11,82,12,
        82,1036,1,83,1,83,1,83,1,83,1,83,1,83,3,83,1045,8,83,1,84,1,84,1,
        85,1,85,1,86,1,86,1,87,1,87,1,88,1,88,1,88,1,88,3,88,1059,8,88,1,
        89,1,89,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,
        90,1,90,1,90,1,90,3,90,1078,8,90,3,90,1080,8,90,1,91,1,91,1,91,1,
        91,1,91,1,92,1,92,1,92,5,92,1090,8,92,10,92,12,92,1093,9,92,1,93,
        1,93,3,93,1097,8,93,1,93,1,93,3,93,1101,8,93,1,94,1,94,3,94,1105,
        8,94,1,94,1,94,3,94,1109,8,94,1,94,1,94,1,94,1,94,1,94,3,94,1116,
        8,94,1,94,1,94,1,94,1,94,3,94,1122,8,94,1,94,1,94,1,94,1,94,1,94,
        1,94,1,94,1,94,1,94,1,94,3,94,1134,8,94,1,95,1,95,1,95,5,95,1139,
        8,95,10,95,12,95,1142,9,95,1,95,3,95,1145,8,95,1,96,1,96,1,96,3,
        96,1150,8,96,1,97,1,97,3,97,1154,8,97,1,98,1,98,1,98,1,98,1,98,3,
        98,1161,8,98,1,98,5,98,1164,8,98,10,98,12,98,1167,9,98,1,98,1,98,
        1,98,3,98,1172,8,98,1,98,3,98,1175,8,98,1,98,1,98,3,98,1179,8,98,
        1,99,1,99,3,99,1183,8,99,1,99,1,99,1,100,1,100,1,100,3,100,1190,
        8,100,1,101,1,101,3,101,1194,8,101,1,101,3,101,1197,8,101,1,102,
        1,102,1,102,1,102,1,102,5,102,1204,8,102,10,102,12,102,1207,9,102,
        1,102,1,102,3,102,1211,8,102,1,103,1,103,1,103,3,103,1216,8,103,
        3,103,1218,8,103,1,103,1,103,1,104,1,104,1,104,1,104,1,104,1,104,
        5,104,1228,8,104,10,104,12,104,1231,9,104,1,104,3,104,1234,8,104,
        3,104,1236,8,104,1,104,1,104,1,105,1,105,1,105,5,105,1243,8,105,
        10,105,12,105,1246,9,105,1,105,3,105,1249,8,105,1,106,1,106,3,106,
        1253,8,106,1,106,3,106,1256,8,106,1,107,1,107,3,107,1260,8,107,1,
        107,1,107,3,107,1264,8,107,1,107,1,107,4,107,1268,8,107,11,107,12,
        107,1269,1,107,1,107,3,107,1274,8,107,1,107,4,107,1277,8,107,11,
        107,12,107,1278,3,107,1281,8,107,1,108,1,108,3,108,1285,8,108,1,
        108,1,108,1,108,3,108,1290,8,108,1,108,3,108,1293,8,108,1,109,1,
        109,1,109,5,109,1298,8,109,10,109,12,109,1301,9,109,1,110,1,110,
        1,110,1,110,3,110,1307,8,110,1,111,3,111,1310,8,111,1,111,1,111,
        1,112,1,112,3,112,1316,8,112,1,112,1,112,3,112,1320,8,112,1,112,
        1,112,3,112,1324,8,112,1,112,1,112,3,112,1328,8,112,1,112,1,112,
        3,112,1332,8,112,1,112,1,112,3,112,1336,8,112,1,112,1,112,3,112,
        1340,8,112,1,112,1,112,3,112,1344,8,112,1,112,1,112,3,112,1348,8,
        112,1,112,1,112,3,112,1352,8,112,1,112,3,112,1355,8,112,1,113,1,
        113,1,113,1,113,1,114,1,114,1,114,3,114,1364,8,114,1,115,1,115,1,
        115,5,115,1369,8,115,10,115,12,115,1372,9,115,1,115,1,115,1,116,
        1,116,1,116,1,116,1,116,1,116,1,116,3,116,1383,8,116,1,116,3,116,
        1386,8,116,1,117,1,117,1,117,1,117,1,117,1,117,1,118,1,118,5,118,
        1396,8,118,10,118,12,118,1399,9,118,1,118,1,118,1,119,4,119,1404,
        8,119,11,119,12,119,1405,1,119,4,119,1409,8,119,11,119,12,119,1410,
        1,120,1,120,1,120,1,120,1,120,1,120,3,120,1419,8,120,1,120,1,120,
        1,120,1,120,3,120,1425,8,120,1,121,1,121,1,121,1,121,3,121,1431,
        8,121,1,122,1,122,1,122,1,122,1,122,1,122,1,123,1,123,1,123,1,123,
        1,123,1,123,1,123,1,123,1,124,1,124,1,124,3,124,1450,8,124,1,124,
        1,124,3,124,1454,8,124,1,124,1,124,3,124,1458,8,124,1,124,1,124,
        1,124,1,125,1,125,1,125,1,125,3,125,1467,8,125,1,126,1,126,1,126,
        1,126,1,126,3,126,1474,8,126,1,126,1,126,1,126,1,127,1,127,1,127,
        1,127,1,127,1,127,3,127,1485,8,127,3,127,1487,8,127,1,128,1,128,
        1,128,5,128,1492,8,128,10,128,12,128,1495,9,128,1,129,1,129,1,129,
        1,129,1,129,1,129,1,129,1,129,1,129,1,129,3,129,1507,8,129,1,129,
        1,129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,3,129,
        1520,8,129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,
        1,129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,
        1,129,1,129,1,129,1,129,1,129,3,129,1547,8,129,1,129,1,129,5,129,
        1551,8,129,10,129,12,129,1554,9,129,1,130,1,130,1,131,1,131,1,131,
        1,131,1,131,1,131,1,131,3,131,1565,8,131,3,131,1567,8,131,1,132,
        1,132,1,132,3,132,1572,8,132,1,133,1,133,3,133,1576,8,133,1,134,
        1,134,1,134,1,134,1,134,1,134,1,134,3,134,1585,8,134,1,134,1,134,
        1,134,1,134,1,134,3,134,1592,8,134,1,135,1,135,1,136,1,136,1,136,
        5,136,1599,8,136,10,136,12,136,1602,9,136,1,136,1,136,1,136,1,136,
        5,136,1608,8,136,10,136,12,136,1611,9,136,5,136,1613,8,136,10,136,
        12,136,1616,9,136,1,137,1,137,1,137,1,137,1,137,1,137,3,137,1624,
        8,137,1,137,1,137,1,137,1,137,4,137,1630,8,137,11,137,12,137,1631,
        1,137,1,137,3,137,1636,8,137,1,138,1,138,1,138,5,138,1641,8,138,
        10,138,12,138,1644,9,138,1,139,1,139,3,139,1648,8,139,1,140,1,140,
        1,140,1,140,1,140,1,140,1,140,1,140,1,140,1,140,1,140,1,140,1,140,
        1,140,1,140,3,140,1665,8,140,1,141,1,141,1,141,1,141,3,141,1671,
        8,141,1,141,1,141,3,141,1675,8,141,1,141,1,141,1,141,1,141,1,141,
        1,141,1,141,1,141,3,141,1685,8,141,1,142,1,142,5,142,1689,8,142,
        10,142,12,142,1692,9,142,1,142,4,142,1695,8,142,11,142,12,142,1696,
        1,143,1,143,1,143,0,2,258,272,144,0,2,4,6,8,10,12,14,16,18,20,22,
        24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,
        68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,
        108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,
        140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,
        172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,
        204,206,208,210,212,214,216,218,220,222,224,226,228,230,232,234,
        236,238,240,242,244,246,248,250,252,254,256,258,260,262,264,266,
        268,270,272,274,276,278,280,282,284,286,0,21,2,0,70,70,75,75,1,0,
        90,91,3,0,68,68,71,71,73,74,2,0,27,27,30,30,4,0,85,85,94,94,96,96,
        98,98,1,0,99,102,4,0,1,1,12,12,20,20,26,26,4,0,17,17,86,89,93,93,
        103,103,3,0,42,43,46,47,51,52,1,0,104,105,2,0,154,155,159,159,1,
        0,152,153,2,0,138,139,145,146,2,0,144,144,147,147,2,0,137,137,160,
        169,1,0,150,151,3,0,140,141,152,154,156,156,1,0,134,135,1,0,127,
        127,2,0,183,183,185,185,8,0,40,47,51,56,81,83,85,86,88,93,97,97,
        99,118,125,125,1886,0,291,1,0,0,0,2,307,1,0,0,0,4,309,1,0,0,0,6,
        314,1,0,0,0,8,336,1,0,0,0,10,357,1,0,0,0,12,371,1,0,0,0,14,381,1,
        0,0,0,16,389,1,0,0,0,18,417,1,0,0,0,20,419,1,0,0,0,22,423,1,0,0,
        0,24,434,1,0,0,0,26,442,1,0,0,0,28,457,1,0,0,0,30,485,1,0,0,0,32,
        495,1,0,0,0,34,497,1,0,0,0,36,518,1,0,0,0,38,520,1,0,0,0,40,527,
        1,0,0,0,42,531,1,0,0,0,44,534,1,0,0,0,46,538,1,0,0,0,48,551,1,0,
        0,0,50,555,1,0,0,0,52,558,1,0,0,0,54,562,1,0,0,0,56,583,1,0,0,0,
        58,586,1,0,0,0,60,602,1,0,0,0,62,604,1,0,0,0,64,616,1,0,0,0,66,618,
        1,0,0,0,68,626,1,0,0,0,70,632,1,0,0,0,72,648,1,0,0,0,74,669,1,0,
        0,0,76,671,1,0,0,0,78,688,1,0,0,0,80,692,1,0,0,0,82,712,1,0,0,0,
        84,714,1,0,0,0,86,732,1,0,0,0,88,734,1,0,0,0,90,746,1,0,0,0,92,753,
        1,0,0,0,94,761,1,0,0,0,96,764,1,0,0,0,98,775,1,0,0,0,100,785,1,0,
        0,0,102,799,1,0,0,0,104,801,1,0,0,0,106,806,1,0,0,0,108,811,1,0,
        0,0,110,821,1,0,0,0,112,823,1,0,0,0,114,835,1,0,0,0,116,841,1,0,
        0,0,118,847,1,0,0,0,120,850,1,0,0,0,122,853,1,0,0,0,124,857,1,0,
        0,0,126,869,1,0,0,0,128,875,1,0,0,0,130,877,1,0,0,0,132,883,1,0,
        0,0,134,895,1,0,0,0,136,897,1,0,0,0,138,908,1,0,0,0,140,911,1,0,
        0,0,142,923,1,0,0,0,144,938,1,0,0,0,146,943,1,0,0,0,148,954,1,0,
        0,0,150,963,1,0,0,0,152,975,1,0,0,0,154,979,1,0,0,0,156,993,1,0,
        0,0,158,1001,1,0,0,0,160,1006,1,0,0,0,162,1021,1,0,0,0,164,1034,
        1,0,0,0,166,1044,1,0,0,0,168,1046,1,0,0,0,170,1048,1,0,0,0,172,1050,
        1,0,0,0,174,1052,1,0,0,0,176,1058,1,0,0,0,178,1060,1,0,0,0,180,1079,
        1,0,0,0,182,1081,1,0,0,0,184,1086,1,0,0,0,186,1100,1,0,0,0,188,1133,
        1,0,0,0,190,1135,1,0,0,0,192,1146,1,0,0,0,194,1153,1,0,0,0,196,1178,
        1,0,0,0,198,1180,1,0,0,0,200,1186,1,0,0,0,202,1191,1,0,0,0,204,1198,
        1,0,0,0,206,1212,1,0,0,0,208,1221,1,0,0,0,210,1239,1,0,0,0,212,1255,
        1,0,0,0,214,1280,1,0,0,0,216,1292,1,0,0,0,218,1294,1,0,0,0,220,1306,
        1,0,0,0,222,1309,1,0,0,0,224,1354,1,0,0,0,226,1356,1,0,0,0,228,1360,
        1,0,0,0,230,1365,1,0,0,0,232,1385,1,0,0,0,234,1387,1,0,0,0,236,1393,
        1,0,0,0,238,1403,1,0,0,0,240,1424,1,0,0,0,242,1430,1,0,0,0,244,1432,
        1,0,0,0,246,1438,1,0,0,0,248,1446,1,0,0,0,250,1466,1,0,0,0,252,1468,
        1,0,0,0,254,1486,1,0,0,0,256,1488,1,0,0,0,258,1506,1,0,0,0,260,1555,
        1,0,0,0,262,1566,1,0,0,0,264,1571,1,0,0,0,266,1575,1,0,0,0,268,1591,
        1,0,0,0,270,1593,1,0,0,0,272,1595,1,0,0,0,274,1635,1,0,0,0,276,1637,
        1,0,0,0,278,1647,1,0,0,0,280,1664,1,0,0,0,282,1684,1,0,0,0,284,1694,
        1,0,0,0,286,1698,1,0,0,0,288,290,3,2,1,0,289,288,1,0,0,0,290,293,
        1,0,0,0,291,289,1,0,0,0,291,292,1,0,0,0,292,294,1,0,0,0,293,291,
        1,0,0,0,294,295,5,0,0,1,295,1,1,0,0,0,296,308,3,4,2,0,297,308,3,
        120,60,0,298,308,3,138,69,0,299,308,3,6,3,0,300,308,3,10,5,0,301,
        308,3,8,4,0,302,308,3,12,6,0,303,308,3,16,8,0,304,308,3,20,10,0,
        305,308,3,22,11,0,306,308,3,122,61,0,307,296,1,0,0,0,307,297,1,0,
        0,0,307,298,1,0,0,0,307,299,1,0,0,0,307,300,1,0,0,0,307,301,1,0,
        0,0,307,302,1,0,0,0,307,303,1,0,0,0,307,304,1,0,0,0,307,305,1,0,
        0,0,307,306,1,0,0,0,308,3,1,0,0,0,309,310,5,67,0,0,310,311,3,286,
        143,0,311,312,5,132,0,0,312,5,1,0,0,0,313,315,5,118,0,0,314,313,
        1,0,0,0,314,315,1,0,0,0,315,316,1,0,0,0,316,317,5,66,0,0,317,320,
        3,14,7,0,318,319,5,143,0,0,319,321,3,286,143,0,320,318,1,0,0,0,320,
        321,1,0,0,0,321,326,1,0,0,0,322,323,5,139,0,0,323,324,3,24,12,0,
        324,325,5,138,0,0,325,327,1,0,0,0,326,322,1,0,0,0,326,327,1,0,0,
        0,327,329,1,0,0,0,328,330,3,34,17,0,329,328,1,0,0,0,329,330,1,0,
        0,0,330,332,1,0,0,0,331,333,3,40,20,0,332,331,1,0,0,0,332,333,1,
        0,0,0,333,334,1,0,0,0,334,335,5,63,0,0,335,7,1,0,0,0,336,337,5,66,
        0,0,337,338,3,14,7,0,338,340,5,126,0,0,339,341,3,286,143,0,340,339,
        1,0,0,0,340,341,1,0,0,0,341,342,1,0,0,0,342,347,5,127,0,0,343,344,
        5,139,0,0,344,345,3,24,12,0,345,346,5,138,0,0,346,348,1,0,0,0,347,
        343,1,0,0,0,347,348,1,0,0,0,348,350,1,0,0,0,349,351,3,34,17,0,350,
        349,1,0,0,0,350,351,1,0,0,0,351,353,1,0,0,0,352,354,3,40,20,0,353,
        352,1,0,0,0,353,354,1,0,0,0,354,355,1,0,0,0,355,356,5,63,0,0,356,
        9,1,0,0,0,357,358,5,65,0,0,358,361,3,14,7,0,359,360,5,143,0,0,360,
        362,3,286,143,0,361,359,1,0,0,0,361,362,1,0,0,0,362,364,1,0,0,0,
        363,365,3,34,17,0,364,363,1,0,0,0,364,365,1,0,0,0,365,367,1,0,0,
        0,366,368,3,48,24,0,367,366,1,0,0,0,367,368,1,0,0,0,368,369,1,0,
        0,0,369,370,5,63,0,0,370,11,1,0,0,0,371,372,5,65,0,0,372,373,3,14,
        7,0,373,374,5,126,0,0,374,375,3,286,143,0,375,377,5,127,0,0,376,
        378,3,48,24,0,377,376,1,0,0,0,377,378,1,0,0,0,378,379,1,0,0,0,379,
        380,5,63,0,0,380,13,1,0,0,0,381,387,3,286,143,0,382,383,5,139,0,
        0,383,384,3,24,12,0,384,385,5,138,0,0,385,388,1,0,0,0,386,388,3,
        72,36,0,387,382,1,0,0,0,387,386,1,0,0,0,387,388,1,0,0,0,388,15,1,
        0,0,0,389,390,5,69,0,0,390,395,3,32,16,0,391,392,5,139,0,0,392,393,
        3,24,12,0,393,394,5,138,0,0,394,396,1,0,0,0,395,391,1,0,0,0,395,
        396,1,0,0,0,396,400,1,0,0,0,397,399,3,18,9,0,398,397,1,0,0,0,399,
        402,1,0,0,0,400,398,1,0,0,0,400,401,1,0,0,0,401,403,1,0,0,0,402,
        400,1,0,0,0,403,404,5,63,0,0,404,17,1,0,0,0,405,409,7,0,0,0,406,
        408,3,40,20,0,407,406,1,0,0,0,408,411,1,0,0,0,409,407,1,0,0,0,409,
        410,1,0,0,0,410,418,1,0,0,0,411,409,1,0,0,0,412,414,3,40,20,0,413,
        412,1,0,0,0,414,415,1,0,0,0,415,413,1,0,0,0,415,416,1,0,0,0,416,
        418,1,0,0,0,417,405,1,0,0,0,417,413,1,0,0,0,418,19,1,0,0,0,419,420,
        5,69,0,0,420,421,3,24,12,0,421,422,5,132,0,0,422,21,1,0,0,0,423,
        424,5,60,0,0,424,429,3,286,143,0,425,426,5,133,0,0,426,428,3,286,
        143,0,427,425,1,0,0,0,428,431,1,0,0,0,429,427,1,0,0,0,429,430,1,
        0,0,0,430,432,1,0,0,0,431,429,1,0,0,0,432,433,5,132,0,0,433,23,1,
        0,0,0,434,439,3,32,16,0,435,436,5,133,0,0,436,438,3,32,16,0,437,
        435,1,0,0,0,438,441,1,0,0,0,439,437,1,0,0,0,439,440,1,0,0,0,440,
        25,1,0,0,0,441,439,1,0,0,0,442,447,5,72,0,0,443,444,5,126,0,0,444,
        445,3,28,14,0,445,446,5,127,0,0,446,448,1,0,0,0,447,443,1,0,0,0,
        447,448,1,0,0,0,448,450,1,0,0,0,449,451,3,166,83,0,450,449,1,0,0,
        0,450,451,1,0,0,0,451,453,1,0,0,0,452,454,5,117,0,0,453,452,1,0,
        0,0,453,454,1,0,0,0,454,455,1,0,0,0,455,456,3,162,81,0,456,27,1,
        0,0,0,457,462,3,30,15,0,458,459,5,133,0,0,459,461,3,30,15,0,460,
        458,1,0,0,0,461,464,1,0,0,0,462,460,1,0,0,0,462,463,1,0,0,0,463,
        29,1,0,0,0,464,462,1,0,0,0,465,486,5,81,0,0,466,486,5,82,0,0,467,
        486,5,110,0,0,468,486,5,113,0,0,469,486,5,83,0,0,470,486,5,106,0,
        0,471,486,5,114,0,0,472,486,5,107,0,0,473,486,5,111,0,0,474,486,
        5,112,0,0,475,476,5,108,0,0,476,477,5,137,0,0,477,486,3,286,143,
        0,478,479,5,109,0,0,479,480,5,137,0,0,480,481,3,286,143,0,481,482,
        5,143,0,0,482,486,1,0,0,0,483,486,3,170,85,0,484,486,3,286,143,0,
        485,465,1,0,0,0,485,466,1,0,0,0,485,467,1,0,0,0,485,468,1,0,0,0,
        485,469,1,0,0,0,485,470,1,0,0,0,485,471,1,0,0,0,485,472,1,0,0,0,
        485,473,1,0,0,0,485,474,1,0,0,0,485,475,1,0,0,0,485,478,1,0,0,0,
        485,483,1,0,0,0,485,484,1,0,0,0,486,31,1,0,0,0,487,488,5,139,0,0,
        488,489,3,24,12,0,489,490,5,138,0,0,490,496,1,0,0,0,491,493,7,1,
        0,0,492,491,1,0,0,0,492,493,1,0,0,0,493,494,1,0,0,0,494,496,3,286,
        143,0,495,487,1,0,0,0,495,492,1,0,0,0,496,33,1,0,0,0,497,501,5,128,
        0,0,498,500,3,36,18,0,499,498,1,0,0,0,500,503,1,0,0,0,501,499,1,
        0,0,0,501,502,1,0,0,0,502,504,1,0,0,0,503,501,1,0,0,0,504,505,5,
        129,0,0,505,35,1,0,0,0,506,510,3,38,19,0,507,509,3,162,81,0,508,
        507,1,0,0,0,509,512,1,0,0,0,510,508,1,0,0,0,510,511,1,0,0,0,511,
        519,1,0,0,0,512,510,1,0,0,0,513,515,3,162,81,0,514,513,1,0,0,0,515,
        516,1,0,0,0,516,514,1,0,0,0,516,517,1,0,0,0,517,519,1,0,0,0,518,
        506,1,0,0,0,518,514,1,0,0,0,519,37,1,0,0,0,520,521,7,2,0,0,521,39,
        1,0,0,0,522,528,3,138,69,0,523,528,3,42,21,0,524,528,3,44,22,0,525,
        528,3,26,13,0,526,528,3,120,60,0,527,522,1,0,0,0,527,523,1,0,0,0,
        527,524,1,0,0,0,527,525,1,0,0,0,527,526,1,0,0,0,528,529,1,0,0,0,
        529,527,1,0,0,0,529,530,1,0,0,0,530,41,1,0,0,0,531,532,5,152,0,0,
        532,533,3,46,23,0,533,43,1,0,0,0,534,535,5,153,0,0,535,536,3,46,
        23,0,536,45,1,0,0,0,537,539,3,62,31,0,538,537,1,0,0,0,538,539,1,
        0,0,0,539,540,1,0,0,0,540,542,3,56,28,0,541,543,3,204,102,0,542,
        541,1,0,0,0,542,543,1,0,0,0,543,544,1,0,0,0,544,545,5,132,0,0,545,
        47,1,0,0,0,546,552,3,122,61,0,547,552,3,138,69,0,548,552,3,50,25,
        0,549,552,3,52,26,0,550,552,3,64,32,0,551,546,1,0,0,0,551,547,1,
        0,0,0,551,548,1,0,0,0,551,549,1,0,0,0,551,550,1,0,0,0,552,553,1,
        0,0,0,553,551,1,0,0,0,553,554,1,0,0,0,554,49,1,0,0,0,555,556,5,152,
        0,0,556,557,3,54,27,0,557,51,1,0,0,0,558,559,5,153,0,0,559,560,3,
        54,27,0,560,53,1,0,0,0,561,563,3,62,31,0,562,561,1,0,0,0,562,563,
        1,0,0,0,563,564,1,0,0,0,564,566,3,56,28,0,565,567,3,156,78,0,566,
        565,1,0,0,0,566,567,1,0,0,0,567,569,1,0,0,0,568,570,5,132,0,0,569,
        568,1,0,0,0,569,570,1,0,0,0,570,571,1,0,0,0,571,572,3,230,115,0,
        572,55,1,0,0,0,573,584,3,60,30,0,574,576,3,58,29,0,575,574,1,0,0,
        0,576,577,1,0,0,0,577,575,1,0,0,0,577,578,1,0,0,0,578,581,1,0,0,
        0,579,580,5,133,0,0,580,582,5,170,0,0,581,579,1,0,0,0,581,582,1,
        0,0,0,582,584,1,0,0,0,583,573,1,0,0,0,583,575,1,0,0,0,584,57,1,0,
        0,0,585,587,3,60,30,0,586,585,1,0,0,0,586,587,1,0,0,0,587,588,1,
        0,0,0,588,592,5,143,0,0,589,591,3,62,31,0,590,589,1,0,0,0,591,594,
        1,0,0,0,592,590,1,0,0,0,592,593,1,0,0,0,593,596,1,0,0,0,594,592,
        1,0,0,0,595,597,3,168,84,0,596,595,1,0,0,0,596,597,1,0,0,0,597,598,
        1,0,0,0,598,599,3,286,143,0,599,59,1,0,0,0,600,603,3,286,143,0,601,
        603,5,22,0,0,602,600,1,0,0,0,602,601,1,0,0,0,603,61,1,0,0,0,604,
        605,5,126,0,0,605,606,3,212,106,0,606,607,5,127,0,0,607,63,1,0,0,
        0,608,609,5,78,0,0,609,610,3,66,33,0,610,611,5,132,0,0,611,617,1,
        0,0,0,612,613,5,61,0,0,613,614,3,66,33,0,614,615,5,132,0,0,615,617,
        1,0,0,0,616,608,1,0,0,0,616,612,1,0,0,0,617,65,1,0,0,0,618,623,3,
        68,34,0,619,620,5,133,0,0,620,622,3,68,34,0,621,619,1,0,0,0,622,
        625,1,0,0,0,623,621,1,0,0,0,623,624,1,0,0,0,624,67,1,0,0,0,625,623,
        1,0,0,0,626,629,3,286,143,0,627,628,5,137,0,0,628,630,3,286,143,
        0,629,627,1,0,0,0,629,630,1,0,0,0,630,69,1,0,0,0,631,633,3,170,85,
        0,632,631,1,0,0,0,632,633,1,0,0,0,633,634,1,0,0,0,634,636,3,180,
        90,0,635,637,3,170,85,0,636,635,1,0,0,0,636,637,1,0,0,0,637,638,
        1,0,0,0,638,639,5,126,0,0,639,642,5,158,0,0,640,643,3,170,85,0,641,
        643,3,180,90,0,642,640,1,0,0,0,642,641,1,0,0,0,642,643,1,0,0,0,643,
        644,1,0,0,0,644,646,5,127,0,0,645,647,3,84,42,0,646,645,1,0,0,0,
        646,647,1,0,0,0,647,71,1,0,0,0,648,657,5,139,0,0,649,654,3,74,37,
        0,650,651,5,133,0,0,651,653,3,74,37,0,652,650,1,0,0,0,653,656,1,
        0,0,0,654,652,1,0,0,0,654,655,1,0,0,0,655,658,1,0,0,0,656,654,1,
        0,0,0,657,649,1,0,0,0,657,658,1,0,0,0,658,659,1,0,0,0,659,660,5,
        138,0,0,660,73,1,0,0,0,661,663,3,174,87,0,662,661,1,0,0,0,663,666,
        1,0,0,0,664,662,1,0,0,0,664,665,1,0,0,0,665,667,1,0,0,0,666,664,
        1,0,0,0,667,670,3,180,90,0,668,670,3,212,106,0,669,664,1,0,0,0,669,
        668,1,0,0,0,670,75,1,0,0,0,671,672,5,136,0,0,672,684,5,128,0,0,673,
        678,3,78,39,0,674,675,5,133,0,0,675,677,3,78,39,0,676,674,1,0,0,
        0,677,680,1,0,0,0,678,676,1,0,0,0,678,679,1,0,0,0,679,682,1,0,0,
        0,680,678,1,0,0,0,681,683,5,133,0,0,682,681,1,0,0,0,682,683,1,0,
        0,0,683,685,1,0,0,0,684,673,1,0,0,0,684,685,1,0,0,0,685,686,1,0,
        0,0,686,687,5,129,0,0,687,77,1,0,0,0,688,689,3,262,131,0,689,690,
        5,143,0,0,690,691,3,258,129,0,691,79,1,0,0,0,692,693,5,136,0,0,693,
        698,5,130,0,0,694,696,3,256,128,0,695,697,5,133,0,0,696,695,1,0,
        0,0,696,697,1,0,0,0,697,699,1,0,0,0,698,694,1,0,0,0,698,699,1,0,
        0,0,699,700,1,0,0,0,700,701,5,131,0,0,701,81,1,0,0,0,702,703,5,136,
        0,0,703,704,5,126,0,0,704,705,3,258,129,0,705,706,5,127,0,0,706,
        713,1,0,0,0,707,710,5,136,0,0,708,711,3,282,141,0,709,711,3,286,
        143,0,710,708,1,0,0,0,710,709,1,0,0,0,711,713,1,0,0,0,712,702,1,
        0,0,0,712,707,1,0,0,0,713,83,1,0,0,0,714,726,5,126,0,0,715,718,3,
        86,43,0,716,718,5,32,0,0,717,715,1,0,0,0,717,716,1,0,0,0,718,723,
        1,0,0,0,719,720,5,133,0,0,720,722,3,86,43,0,721,719,1,0,0,0,722,
        725,1,0,0,0,723,721,1,0,0,0,723,724,1,0,0,0,724,727,1,0,0,0,725,
        723,1,0,0,0,726,717,1,0,0,0,726,727,1,0,0,0,727,728,1,0,0,0,728,
        729,5,127,0,0,729,85,1,0,0,0,730,733,3,108,54,0,731,733,3,212,106,
        0,732,730,1,0,0,0,732,731,1,0,0,0,733,87,1,0,0,0,734,736,5,158,0,
        0,735,737,3,180,90,0,736,735,1,0,0,0,736,737,1,0,0,0,737,739,1,0,
        0,0,738,740,3,170,85,0,739,738,1,0,0,0,739,740,1,0,0,0,740,742,1,
        0,0,0,741,743,3,84,42,0,742,741,1,0,0,0,742,743,1,0,0,0,743,744,
        1,0,0,0,744,745,3,230,115,0,745,89,1,0,0,0,746,747,5,130,0,0,747,
        748,3,92,46,0,748,749,3,94,47,0,749,750,5,131,0,0,750,91,1,0,0,0,
        751,754,3,258,129,0,752,754,3,180,90,0,753,751,1,0,0,0,753,752,1,
        0,0,0,754,93,1,0,0,0,755,762,3,60,30,0,756,758,3,96,48,0,757,756,
        1,0,0,0,758,759,1,0,0,0,759,757,1,0,0,0,759,760,1,0,0,0,760,762,
        1,0,0,0,761,755,1,0,0,0,761,757,1,0,0,0,762,95,1,0,0,0,763,765,3,
        60,30,0,764,763,1,0,0,0,764,765,1,0,0,0,765,766,1,0,0,0,766,767,
        5,143,0,0,767,772,3,98,49,0,768,769,5,133,0,0,769,771,3,98,49,0,
        770,768,1,0,0,0,771,774,1,0,0,0,772,770,1,0,0,0,772,773,1,0,0,0,
        773,97,1,0,0,0,774,772,1,0,0,0,775,777,3,256,128,0,776,778,3,170,
        85,0,777,776,1,0,0,0,777,778,1,0,0,0,778,783,1,0,0,0,779,780,5,128,
        0,0,780,781,3,210,105,0,781,782,5,129,0,0,782,784,1,0,0,0,783,779,
        1,0,0,0,783,784,1,0,0,0,784,99,1,0,0,0,785,786,5,76,0,0,786,787,
        5,126,0,0,787,788,3,102,51,0,788,789,5,127,0,0,789,101,1,0,0,0,790,
        800,3,60,30,0,791,793,3,60,30,0,792,791,1,0,0,0,792,793,1,0,0,0,
        793,794,1,0,0,0,794,796,5,143,0,0,795,792,1,0,0,0,796,797,1,0,0,
        0,797,795,1,0,0,0,797,798,1,0,0,0,798,800,1,0,0,0,799,790,1,0,0,
        0,799,795,1,0,0,0,800,103,1,0,0,0,801,802,5,69,0,0,802,803,5,126,
        0,0,803,804,3,32,16,0,804,805,5,127,0,0,805,105,1,0,0,0,806,807,
        5,62,0,0,807,808,5,126,0,0,808,809,3,212,106,0,809,810,5,127,0,0,
        810,107,1,0,0,0,811,812,3,152,76,0,812,813,3,222,111,0,813,109,1,
        0,0,0,814,815,5,79,0,0,815,816,5,126,0,0,816,817,3,286,143,0,817,
        818,5,127,0,0,818,822,1,0,0,0,819,820,5,79,0,0,820,822,3,258,129,
        0,821,814,1,0,0,0,821,819,1,0,0,0,822,111,1,0,0,0,823,824,5,80,0,
        0,824,828,3,230,115,0,825,827,3,114,57,0,826,825,1,0,0,0,827,830,
        1,0,0,0,828,826,1,0,0,0,828,829,1,0,0,0,829,833,1,0,0,0,830,828,
        1,0,0,0,831,832,5,64,0,0,832,834,3,230,115,0,833,831,1,0,0,0,833,
        834,1,0,0,0,834,113,1,0,0,0,835,836,5,59,0,0,836,837,5,126,0,0,837,
        838,3,108,54,0,838,839,5,127,0,0,839,840,3,230,115,0,840,115,1,0,
        0,0,841,842,5,77,0,0,842,843,5,126,0,0,843,844,3,258,129,0,844,845,
        5,127,0,0,845,846,3,230,115,0,846,117,1,0,0,0,847,848,5,58,0,0,848,
        849,3,230,115,0,849,119,1,0,0,0,850,851,3,124,62,0,851,852,5,132,
        0,0,852,121,1,0,0,0,853,854,3,124,62,0,854,855,3,230,115,0,855,123,
        1,0,0,0,856,858,3,152,76,0,857,856,1,0,0,0,857,858,1,0,0,0,858,859,
        1,0,0,0,859,860,3,286,143,0,860,862,5,126,0,0,861,863,3,200,100,
        0,862,861,1,0,0,0,862,863,1,0,0,0,863,864,1,0,0,0,864,865,5,127,
        0,0,865,867,1,0,0,0,866,868,3,154,77,0,867,866,1,0,0,0,867,868,1,
        0,0,0,868,125,1,0,0,0,869,871,3,128,64,0,870,872,3,130,65,0,871,
        870,1,0,0,0,871,872,1,0,0,0,872,127,1,0,0,0,873,876,5,5,0,0,874,
        876,3,286,143,0,875,873,1,0,0,0,875,874,1,0,0,0,876,129,1,0,0,0,
        877,879,5,126,0,0,878,880,3,132,66,0,879,878,1,0,0,0,879,880,1,0,
        0,0,880,881,1,0,0,0,881,882,5,127,0,0,882,131,1,0,0,0,883,888,3,
        134,67,0,884,885,5,133,0,0,885,887,3,134,67,0,886,884,1,0,0,0,887,
        890,1,0,0,0,888,886,1,0,0,0,888,889,1,0,0,0,889,133,1,0,0,0,890,
        888,1,0,0,0,891,896,3,126,63,0,892,896,3,282,141,0,893,896,3,284,
        142,0,894,896,3,136,68,0,895,891,1,0,0,0,895,892,1,0,0,0,895,893,
        1,0,0,0,895,894,1,0,0,0,896,135,1,0,0,0,897,898,3,128,64,0,898,902,
        5,137,0,0,899,903,3,282,141,0,900,903,3,128,64,0,901,903,3,284,142,
        0,902,899,1,0,0,0,902,900,1,0,0,0,902,901,1,0,0,0,903,137,1,0,0,
        0,904,909,3,140,70,0,905,909,3,142,71,0,906,909,3,144,72,0,907,909,
        3,146,73,0,908,904,1,0,0,0,908,905,1,0,0,0,908,906,1,0,0,0,908,907,
        1,0,0,0,909,139,1,0,0,0,910,912,3,154,77,0,911,910,1,0,0,0,911,912,
        1,0,0,0,912,913,1,0,0,0,913,915,3,286,143,0,914,916,3,154,77,0,915,
        914,1,0,0,0,915,916,1,0,0,0,916,917,1,0,0,0,917,918,5,126,0,0,918,
        919,3,196,98,0,919,920,5,127,0,0,920,921,5,132,0,0,921,141,1,0,0,
        0,922,924,3,154,77,0,923,922,1,0,0,0,923,924,1,0,0,0,924,926,1,0,
        0,0,925,927,5,29,0,0,926,925,1,0,0,0,926,927,1,0,0,0,927,928,1,0,
        0,0,928,930,3,188,94,0,929,931,3,286,143,0,930,929,1,0,0,0,930,931,
        1,0,0,0,931,932,1,0,0,0,932,933,5,132,0,0,933,143,1,0,0,0,934,935,
        3,152,76,0,935,936,3,156,78,0,936,939,1,0,0,0,937,939,3,152,76,0,
        938,934,1,0,0,0,938,937,1,0,0,0,939,940,1,0,0,0,940,941,5,132,0,
        0,941,145,1,0,0,0,942,944,3,154,77,0,943,942,1,0,0,0,943,944,1,0,
        0,0,944,945,1,0,0,0,945,950,5,29,0,0,946,947,3,152,76,0,947,948,
        3,148,74,0,948,951,1,0,0,0,949,951,3,152,76,0,950,946,1,0,0,0,950,
        949,1,0,0,0,951,952,1,0,0,0,952,953,5,132,0,0,953,147,1,0,0,0,954,
        959,3,150,75,0,955,956,5,133,0,0,956,958,3,150,75,0,957,955,1,0,
        0,0,958,961,1,0,0,0,959,957,1,0,0,0,959,960,1,0,0,0,960,149,1,0,
        0,0,961,959,1,0,0,0,962,964,3,202,101,0,963,962,1,0,0,0,963,964,
        1,0,0,0,964,965,1,0,0,0,965,966,3,196,98,0,966,151,1,0,0,0,967,976,
        3,172,86,0,968,976,3,154,77,0,969,976,3,168,84,0,970,976,3,170,85,
        0,971,976,3,166,83,0,972,976,3,174,87,0,973,976,3,176,88,0,974,976,
        3,180,90,0,975,967,1,0,0,0,975,968,1,0,0,0,975,969,1,0,0,0,975,970,
        1,0,0,0,975,971,1,0,0,0,975,972,1,0,0,0,975,973,1,0,0,0,975,974,
        1,0,0,0,976,977,1,0,0,0,977,975,1,0,0,0,977,978,1,0,0,0,978,153,
        1,0,0,0,979,980,5,84,0,0,980,981,5,126,0,0,981,982,5,126,0,0,982,
        987,3,126,63,0,983,984,5,133,0,0,984,986,3,126,63,0,985,983,1,0,
        0,0,986,989,1,0,0,0,987,985,1,0,0,0,987,988,1,0,0,0,988,990,1,0,
        0,0,989,987,1,0,0,0,990,991,5,127,0,0,991,992,5,127,0,0,992,155,
        1,0,0,0,993,998,3,158,79,0,994,995,5,133,0,0,995,997,3,158,79,0,
        996,994,1,0,0,0,997,1000,1,0,0,0,998,996,1,0,0,0,998,999,1,0,0,0,
        999,157,1,0,0,0,1000,998,1,0,0,0,1001,1004,3,222,111,0,1002,1003,
        5,137,0,0,1003,1005,3,264,132,0,1004,1002,1,0,0,0,1004,1005,1,0,
        0,0,1005,159,1,0,0,0,1006,1019,7,3,0,0,1007,1020,3,286,143,0,1008,
        1010,3,286,143,0,1009,1008,1,0,0,0,1009,1010,1,0,0,0,1010,1011,1,
        0,0,0,1011,1013,5,128,0,0,1012,1014,3,162,81,0,1013,1012,1,0,0,0,
        1014,1015,1,0,0,0,1015,1013,1,0,0,0,1015,1016,1,0,0,0,1016,1017,
        1,0,0,0,1017,1018,5,129,0,0,1018,1020,1,0,0,0,1019,1007,1,0,0,0,
        1019,1009,1,0,0,0,1020,161,1,0,0,0,1021,1022,3,164,82,0,1022,1024,
        3,184,92,0,1023,1025,3,204,102,0,1024,1023,1,0,0,0,1024,1025,1,0,
        0,0,1025,1026,1,0,0,0,1026,1027,5,132,0,0,1027,163,1,0,0,0,1028,
        1035,3,168,84,0,1029,1035,3,170,85,0,1030,1035,3,166,83,0,1031,1035,
        3,174,87,0,1032,1035,3,176,88,0,1033,1035,3,180,90,0,1034,1028,1,
        0,0,0,1034,1029,1,0,0,0,1034,1030,1,0,0,0,1034,1031,1,0,0,0,1034,
        1032,1,0,0,0,1034,1033,1,0,0,0,1035,1036,1,0,0,0,1036,1034,1,0,0,
        0,1036,1037,1,0,0,0,1037,165,1,0,0,0,1038,1039,5,116,0,0,1039,1040,
        5,126,0,0,1040,1041,3,286,143,0,1041,1042,5,127,0,0,1042,1045,1,
        0,0,0,1043,1045,5,115,0,0,1044,1038,1,0,0,0,1044,1043,1,0,0,0,1045,
        167,1,0,0,0,1046,1047,7,4,0,0,1047,169,1,0,0,0,1048,1049,7,5,0,0,
        1049,171,1,0,0,0,1050,1051,7,6,0,0,1051,173,1,0,0,0,1052,1053,7,
        7,0,0,1053,175,1,0,0,0,1054,1059,5,5,0,0,1055,1059,5,33,0,0,1056,
        1059,5,21,0,0,1057,1059,3,178,89,0,1058,1054,1,0,0,0,1058,1055,1,
        0,0,0,1058,1056,1,0,0,0,1058,1057,1,0,0,0,1059,177,1,0,0,0,1060,
        1061,7,8,0,0,1061,179,1,0,0,0,1062,1080,5,32,0,0,1063,1080,5,4,0,
        0,1064,1080,5,23,0,0,1065,1080,5,18,0,0,1066,1080,5,19,0,0,1067,
        1080,5,13,0,0,1068,1080,5,9,0,0,1069,1080,5,24,0,0,1070,1080,5,31,
        0,0,1071,1080,3,182,91,0,1072,1080,3,14,7,0,1073,1080,3,160,80,0,
        1074,1080,3,188,94,0,1075,1077,3,286,143,0,1076,1078,3,202,101,0,
        1077,1076,1,0,0,0,1077,1078,1,0,0,0,1078,1080,1,0,0,0,1079,1062,
        1,0,0,0,1079,1063,1,0,0,0,1079,1064,1,0,0,0,1079,1065,1,0,0,0,1079,
        1066,1,0,0,0,1079,1067,1,0,0,0,1079,1068,1,0,0,0,1079,1069,1,0,0,
        0,1079,1070,1,0,0,0,1079,1071,1,0,0,0,1079,1072,1,0,0,0,1079,1073,
        1,0,0,0,1079,1074,1,0,0,0,1079,1075,1,0,0,0,1080,181,1,0,0,0,1081,
        1082,5,95,0,0,1082,1083,5,126,0,0,1083,1084,3,258,129,0,1084,1085,
        5,127,0,0,1085,183,1,0,0,0,1086,1091,3,186,93,0,1087,1088,5,133,
        0,0,1088,1090,3,186,93,0,1089,1087,1,0,0,0,1090,1093,1,0,0,0,1091,
        1089,1,0,0,0,1091,1092,1,0,0,0,1092,185,1,0,0,0,1093,1091,1,0,0,
        0,1094,1101,3,222,111,0,1095,1097,3,222,111,0,1096,1095,1,0,0,0,
        1096,1097,1,0,0,0,1097,1098,1,0,0,0,1098,1099,5,143,0,0,1099,1101,
        3,282,141,0,1100,1094,1,0,0,0,1100,1096,1,0,0,0,1101,187,1,0,0,0,
        1102,1108,5,11,0,0,1103,1105,3,286,143,0,1104,1103,1,0,0,0,1104,
        1105,1,0,0,0,1105,1106,1,0,0,0,1106,1107,5,143,0,0,1107,1109,3,212,
        106,0,1108,1104,1,0,0,0,1108,1109,1,0,0,0,1109,1121,1,0,0,0,1110,
        1115,3,286,143,0,1111,1112,5,128,0,0,1112,1113,3,190,95,0,1113,1114,
        5,129,0,0,1114,1116,1,0,0,0,1115,1111,1,0,0,0,1115,1116,1,0,0,0,
        1116,1122,1,0,0,0,1117,1118,5,128,0,0,1118,1119,3,190,95,0,1119,
        1120,5,129,0,0,1120,1122,1,0,0,0,1121,1110,1,0,0,0,1121,1117,1,0,
        0,0,1122,1134,1,0,0,0,1123,1124,7,9,0,0,1124,1125,5,126,0,0,1125,
        1126,3,212,106,0,1126,1127,5,133,0,0,1127,1128,3,286,143,0,1128,
        1129,5,127,0,0,1129,1130,5,128,0,0,1130,1131,3,190,95,0,1131,1132,
        5,129,0,0,1132,1134,1,0,0,0,1133,1102,1,0,0,0,1133,1123,1,0,0,0,
        1134,189,1,0,0,0,1135,1140,3,192,96,0,1136,1137,5,133,0,0,1137,1139,
        3,192,96,0,1138,1136,1,0,0,0,1139,1142,1,0,0,0,1140,1138,1,0,0,0,
        1140,1141,1,0,0,0,1141,1144,1,0,0,0,1142,1140,1,0,0,0,1143,1145,
        5,133,0,0,1144,1143,1,0,0,0,1144,1145,1,0,0,0,1145,191,1,0,0,0,1146,
        1149,3,194,97,0,1147,1148,5,137,0,0,1148,1150,3,258,129,0,1149,1147,
        1,0,0,0,1149,1150,1,0,0,0,1150,193,1,0,0,0,1151,1154,3,286,143,0,
        1152,1154,5,7,0,0,1153,1151,1,0,0,0,1153,1152,1,0,0,0,1154,195,1,
        0,0,0,1155,1161,3,286,143,0,1156,1157,5,126,0,0,1157,1158,3,222,
        111,0,1158,1159,5,127,0,0,1159,1161,1,0,0,0,1160,1155,1,0,0,0,1160,
        1156,1,0,0,0,1161,1165,1,0,0,0,1162,1164,3,198,99,0,1163,1162,1,
        0,0,0,1164,1167,1,0,0,0,1165,1163,1,0,0,0,1165,1166,1,0,0,0,1166,
        1179,1,0,0,0,1167,1165,1,0,0,0,1168,1169,5,126,0,0,1169,1171,5,158,
        0,0,1170,1172,3,170,85,0,1171,1170,1,0,0,0,1171,1172,1,0,0,0,1172,
        1174,1,0,0,0,1173,1175,3,286,143,0,1174,1173,1,0,0,0,1174,1175,1,
        0,0,0,1175,1176,1,0,0,0,1176,1177,5,127,0,0,1177,1179,3,84,42,0,
        1178,1160,1,0,0,0,1178,1168,1,0,0,0,1179,197,1,0,0,0,1180,1182,5,
        130,0,0,1181,1183,3,266,133,0,1182,1181,1,0,0,0,1182,1183,1,0,0,
        0,1183,1184,1,0,0,0,1184,1185,5,131,0,0,1185,199,1,0,0,0,1186,1189,
        3,218,109,0,1187,1188,5,133,0,0,1188,1190,5,170,0,0,1189,1187,1,
        0,0,0,1189,1190,1,0,0,0,1190,201,1,0,0,0,1191,1193,5,154,0,0,1192,
        1194,3,152,76,0,1193,1192,1,0,0,0,1193,1194,1,0,0,0,1194,1196,1,
        0,0,0,1195,1197,3,202,101,0,1196,1195,1,0,0,0,1196,1197,1,0,0,0,
        1197,203,1,0,0,0,1198,1210,3,286,143,0,1199,1200,5,126,0,0,1200,
        1205,3,280,140,0,1201,1202,5,133,0,0,1202,1204,3,280,140,0,1203,
        1201,1,0,0,0,1204,1207,1,0,0,0,1205,1203,1,0,0,0,1205,1206,1,0,0,
        0,1206,1208,1,0,0,0,1207,1205,1,0,0,0,1208,1209,5,127,0,0,1209,1211,
        1,0,0,0,1210,1199,1,0,0,0,1210,1211,1,0,0,0,1211,205,1,0,0,0,1212,
        1217,5,128,0,0,1213,1215,3,256,128,0,1214,1216,5,133,0,0,1215,1214,
        1,0,0,0,1215,1216,1,0,0,0,1216,1218,1,0,0,0,1217,1213,1,0,0,0,1217,
        1218,1,0,0,0,1218,1219,1,0,0,0,1219,1220,5,129,0,0,1220,207,1,0,
        0,0,1221,1235,5,128,0,0,1222,1223,5,134,0,0,1223,1229,3,258,129,
        0,1224,1225,5,133,0,0,1225,1226,5,134,0,0,1226,1228,3,258,129,0,
        1227,1224,1,0,0,0,1228,1231,1,0,0,0,1229,1227,1,0,0,0,1229,1230,
        1,0,0,0,1230,1233,1,0,0,0,1231,1229,1,0,0,0,1232,1234,5,133,0,0,
        1233,1232,1,0,0,0,1233,1234,1,0,0,0,1234,1236,1,0,0,0,1235,1222,
        1,0,0,0,1235,1236,1,0,0,0,1236,1237,1,0,0,0,1237,1238,5,129,0,0,
        1238,209,1,0,0,0,1239,1244,3,264,132,0,1240,1241,5,133,0,0,1241,
        1243,3,264,132,0,1242,1240,1,0,0,0,1243,1246,1,0,0,0,1244,1242,1,
        0,0,0,1244,1245,1,0,0,0,1245,1248,1,0,0,0,1246,1244,1,0,0,0,1247,
        1249,5,133,0,0,1248,1247,1,0,0,0,1248,1249,1,0,0,0,1249,211,1,0,
        0,0,1250,1252,3,164,82,0,1251,1253,3,214,107,0,1252,1251,1,0,0,0,
        1252,1253,1,0,0,0,1253,1256,1,0,0,0,1254,1256,3,70,35,0,1255,1250,
        1,0,0,0,1255,1254,1,0,0,0,1256,213,1,0,0,0,1257,1259,3,202,101,0,
        1258,1260,3,214,107,0,1259,1258,1,0,0,0,1259,1260,1,0,0,0,1260,1281,
        1,0,0,0,1261,1263,5,126,0,0,1262,1264,3,214,107,0,1263,1262,1,0,
        0,0,1263,1264,1,0,0,0,1264,1265,1,0,0,0,1265,1267,5,127,0,0,1266,
        1268,3,216,108,0,1267,1266,1,0,0,0,1268,1269,1,0,0,0,1269,1267,1,
        0,0,0,1269,1270,1,0,0,0,1270,1281,1,0,0,0,1271,1273,5,130,0,0,1272,
        1274,3,266,133,0,1273,1272,1,0,0,0,1273,1274,1,0,0,0,1274,1275,1,
        0,0,0,1275,1277,5,131,0,0,1276,1271,1,0,0,0,1277,1278,1,0,0,0,1278,
        1276,1,0,0,0,1278,1279,1,0,0,0,1279,1281,1,0,0,0,1280,1257,1,0,0,
        0,1280,1261,1,0,0,0,1280,1276,1,0,0,0,1281,215,1,0,0,0,1282,1284,
        5,130,0,0,1283,1285,3,266,133,0,1284,1283,1,0,0,0,1284,1285,1,0,
        0,0,1285,1286,1,0,0,0,1286,1293,5,131,0,0,1287,1289,5,126,0,0,1288,
        1290,3,218,109,0,1289,1288,1,0,0,0,1289,1290,1,0,0,0,1290,1291,1,
        0,0,0,1291,1293,5,127,0,0,1292,1282,1,0,0,0,1292,1287,1,0,0,0,1293,
        217,1,0,0,0,1294,1299,3,220,110,0,1295,1296,5,133,0,0,1296,1298,
        3,220,110,0,1297,1295,1,0,0,0,1298,1301,1,0,0,0,1299,1297,1,0,0,
        0,1299,1300,1,0,0,0,1300,219,1,0,0,0,1301,1299,1,0,0,0,1302,1303,
        3,152,76,0,1303,1304,3,222,111,0,1304,1307,1,0,0,0,1305,1307,5,32,
        0,0,1306,1302,1,0,0,0,1306,1305,1,0,0,0,1307,221,1,0,0,0,1308,1310,
        3,202,101,0,1309,1308,1,0,0,0,1309,1310,1,0,0,0,1310,1311,1,0,0,
        0,1311,1312,3,196,98,0,1312,223,1,0,0,0,1313,1315,3,226,113,0,1314,
        1316,5,132,0,0,1315,1314,1,0,0,0,1315,1316,1,0,0,0,1316,1355,1,0,
        0,0,1317,1319,3,230,115,0,1318,1320,5,132,0,0,1319,1318,1,0,0,0,
        1319,1320,1,0,0,0,1320,1355,1,0,0,0,1321,1323,3,232,116,0,1322,1324,
        5,132,0,0,1323,1322,1,0,0,0,1323,1324,1,0,0,0,1324,1355,1,0,0,0,
        1325,1327,3,242,121,0,1326,1328,5,132,0,0,1327,1326,1,0,0,0,1327,
        1328,1,0,0,0,1328,1355,1,0,0,0,1329,1331,3,254,127,0,1330,1332,5,
        132,0,0,1331,1330,1,0,0,0,1331,1332,1,0,0,0,1332,1355,1,0,0,0,1333,
        1335,3,116,58,0,1334,1336,5,132,0,0,1335,1334,1,0,0,0,1335,1336,
        1,0,0,0,1336,1355,1,0,0,0,1337,1339,3,118,59,0,1338,1340,5,132,0,
        0,1339,1338,1,0,0,0,1339,1340,1,0,0,0,1340,1355,1,0,0,0,1341,1343,
        3,110,55,0,1342,1344,5,132,0,0,1343,1342,1,0,0,0,1343,1344,1,0,0,
        0,1344,1355,1,0,0,0,1345,1347,3,112,56,0,1346,1348,5,132,0,0,1347,
        1346,1,0,0,0,1347,1348,1,0,0,0,1348,1355,1,0,0,0,1349,1351,3,256,
        128,0,1350,1352,5,132,0,0,1351,1350,1,0,0,0,1351,1352,1,0,0,0,1352,
        1355,1,0,0,0,1353,1355,5,132,0,0,1354,1313,1,0,0,0,1354,1317,1,0,
        0,0,1354,1321,1,0,0,0,1354,1325,1,0,0,0,1354,1329,1,0,0,0,1354,1333,
        1,0,0,0,1354,1337,1,0,0,0,1354,1341,1,0,0,0,1354,1345,1,0,0,0,1354,
        1349,1,0,0,0,1354,1353,1,0,0,0,1355,225,1,0,0,0,1356,1357,3,286,
        143,0,1357,1358,5,143,0,0,1358,1359,3,224,112,0,1359,227,1,0,0,0,
        1360,1363,3,266,133,0,1361,1362,5,170,0,0,1362,1364,3,266,133,0,
        1363,1361,1,0,0,0,1363,1364,1,0,0,0,1364,229,1,0,0,0,1365,1370,5,
        128,0,0,1366,1369,3,138,69,0,1367,1369,3,224,112,0,1368,1366,1,0,
        0,0,1368,1367,1,0,0,0,1369,1372,1,0,0,0,1370,1368,1,0,0,0,1370,1371,
        1,0,0,0,1371,1373,1,0,0,0,1372,1370,1,0,0,0,1373,1374,5,129,0,0,
        1374,231,1,0,0,0,1375,1376,5,16,0,0,1376,1377,5,126,0,0,1377,1378,
        3,258,129,0,1378,1379,5,127,0,0,1379,1382,3,224,112,0,1380,1381,
        5,10,0,0,1381,1383,3,224,112,0,1382,1380,1,0,0,0,1382,1383,1,0,0,
        0,1383,1386,1,0,0,0,1384,1386,3,234,117,0,1385,1375,1,0,0,0,1385,
        1384,1,0,0,0,1386,233,1,0,0,0,1387,1388,5,28,0,0,1388,1389,5,126,
        0,0,1389,1390,3,258,129,0,1390,1391,5,127,0,0,1391,1392,3,236,118,
        0,1392,235,1,0,0,0,1393,1397,5,128,0,0,1394,1396,3,238,119,0,1395,
        1394,1,0,0,0,1396,1399,1,0,0,0,1397,1395,1,0,0,0,1397,1398,1,0,0,
        0,1398,1400,1,0,0,0,1399,1397,1,0,0,0,1400,1401,5,129,0,0,1401,237,
        1,0,0,0,1402,1404,3,240,120,0,1403,1402,1,0,0,0,1404,1405,1,0,0,
        0,1405,1403,1,0,0,0,1405,1406,1,0,0,0,1406,1408,1,0,0,0,1407,1409,
        3,224,112,0,1408,1407,1,0,0,0,1409,1410,1,0,0,0,1410,1408,1,0,0,
        0,1410,1411,1,0,0,0,1411,239,1,0,0,0,1412,1418,5,3,0,0,1413,1419,
        3,228,114,0,1414,1415,5,126,0,0,1415,1416,3,228,114,0,1416,1417,
        5,127,0,0,1417,1419,1,0,0,0,1418,1413,1,0,0,0,1418,1414,1,0,0,0,
        1419,1420,1,0,0,0,1420,1421,5,143,0,0,1421,1425,1,0,0,0,1422,1423,
        5,7,0,0,1423,1425,5,143,0,0,1424,1412,1,0,0,0,1424,1422,1,0,0,0,
        1425,241,1,0,0,0,1426,1431,3,244,122,0,1427,1431,3,246,123,0,1428,
        1431,3,248,124,0,1429,1431,3,252,126,0,1430,1426,1,0,0,0,1430,1427,
        1,0,0,0,1430,1428,1,0,0,0,1430,1429,1,0,0,0,1431,243,1,0,0,0,1432,
        1433,5,34,0,0,1433,1434,5,126,0,0,1434,1435,3,258,129,0,1435,1436,
        5,127,0,0,1436,1437,3,224,112,0,1437,245,1,0,0,0,1438,1439,5,8,0,
        0,1439,1440,3,224,112,0,1440,1441,5,34,0,0,1441,1442,5,126,0,0,1442,
        1443,3,258,129,0,1443,1444,5,127,0,0,1444,1445,5,132,0,0,1445,247,
        1,0,0,0,1446,1447,5,14,0,0,1447,1449,5,126,0,0,1448,1450,3,250,125,
        0,1449,1448,1,0,0,0,1449,1450,1,0,0,0,1450,1451,1,0,0,0,1451,1453,
        5,132,0,0,1452,1454,3,258,129,0,1453,1452,1,0,0,0,1453,1454,1,0,
        0,0,1454,1455,1,0,0,0,1455,1457,5,132,0,0,1456,1458,3,256,128,0,
        1457,1456,1,0,0,0,1457,1458,1,0,0,0,1458,1459,1,0,0,0,1459,1460,
        5,127,0,0,1460,1461,3,224,112,0,1461,249,1,0,0,0,1462,1463,3,152,
        76,0,1463,1464,3,156,78,0,1464,1467,1,0,0,0,1465,1467,3,256,128,
        0,1466,1462,1,0,0,0,1466,1465,1,0,0,0,1467,251,1,0,0,0,1468,1469,
        5,14,0,0,1469,1470,5,126,0,0,1470,1471,3,108,54,0,1471,1473,5,46,
        0,0,1472,1474,3,258,129,0,1473,1472,1,0,0,0,1473,1474,1,0,0,0,1474,
        1475,1,0,0,0,1475,1476,5,127,0,0,1476,1477,3,224,112,0,1477,253,
        1,0,0,0,1478,1479,5,15,0,0,1479,1487,3,286,143,0,1480,1487,5,6,0,
        0,1481,1487,5,2,0,0,1482,1484,5,22,0,0,1483,1485,3,258,129,0,1484,
        1483,1,0,0,0,1484,1485,1,0,0,0,1485,1487,1,0,0,0,1486,1478,1,0,0,
        0,1486,1480,1,0,0,0,1486,1481,1,0,0,0,1486,1482,1,0,0,0,1487,255,
        1,0,0,0,1488,1493,3,258,129,0,1489,1490,5,133,0,0,1490,1492,3,258,
        129,0,1491,1489,1,0,0,0,1492,1495,1,0,0,0,1493,1491,1,0,0,0,1493,
        1494,1,0,0,0,1494,257,1,0,0,0,1495,1493,1,0,0,0,1496,1497,6,129,
        -1,0,1497,1507,3,262,131,0,1498,1499,5,126,0,0,1499,1500,3,230,115,
        0,1500,1501,5,127,0,0,1501,1507,1,0,0,0,1502,1503,3,268,134,0,1503,
        1504,3,260,130,0,1504,1505,3,258,129,1,1505,1507,1,0,0,0,1506,1496,
        1,0,0,0,1506,1498,1,0,0,0,1506,1502,1,0,0,0,1507,1552,1,0,0,0,1508,
        1509,10,13,0,0,1509,1510,7,10,0,0,1510,1551,3,258,129,14,1511,1512,
        10,12,0,0,1512,1513,7,11,0,0,1513,1551,3,258,129,13,1514,1519,10,
        11,0,0,1515,1516,5,139,0,0,1516,1520,5,139,0,0,1517,1518,5,138,0,
        0,1518,1520,5,138,0,0,1519,1515,1,0,0,0,1519,1517,1,0,0,0,1520,1521,
        1,0,0,0,1521,1551,3,258,129,12,1522,1523,10,10,0,0,1523,1524,7,12,
        0,0,1524,1551,3,258,129,11,1525,1526,10,9,0,0,1526,1527,7,13,0,0,
        1527,1551,3,258,129,10,1528,1529,10,8,0,0,1529,1530,5,156,0,0,1530,
        1551,3,258,129,9,1531,1532,10,7,0,0,1532,1533,5,158,0,0,1533,1551,
        3,258,129,8,1534,1535,10,6,0,0,1535,1536,5,157,0,0,1536,1551,3,258,
        129,7,1537,1538,10,5,0,0,1538,1539,5,148,0,0,1539,1551,3,258,129,
        6,1540,1541,10,4,0,0,1541,1542,5,149,0,0,1542,1551,3,258,129,5,1543,
        1544,10,3,0,0,1544,1546,5,142,0,0,1545,1547,3,258,129,0,1546,1545,
        1,0,0,0,1546,1547,1,0,0,0,1547,1548,1,0,0,0,1548,1549,5,143,0,0,
        1549,1551,3,258,129,4,1550,1508,1,0,0,0,1550,1511,1,0,0,0,1550,1514,
        1,0,0,0,1550,1522,1,0,0,0,1550,1525,1,0,0,0,1550,1528,1,0,0,0,1550,
        1531,1,0,0,0,1550,1534,1,0,0,0,1550,1537,1,0,0,0,1550,1540,1,0,0,
        0,1550,1543,1,0,0,0,1551,1554,1,0,0,0,1552,1550,1,0,0,0,1552,1553,
        1,0,0,0,1553,259,1,0,0,0,1554,1552,1,0,0,0,1555,1556,7,14,0,0,1556,
        261,1,0,0,0,1557,1567,3,268,134,0,1558,1559,5,126,0,0,1559,1560,
        3,212,106,0,1560,1561,5,127,0,0,1561,1564,1,0,0,0,1562,1565,3,262,
        131,0,1563,1565,3,264,132,0,1564,1562,1,0,0,0,1564,1563,1,0,0,0,
        1565,1567,1,0,0,0,1566,1557,1,0,0,0,1566,1558,1,0,0,0,1567,263,1,
        0,0,0,1568,1572,3,258,129,0,1569,1572,3,206,103,0,1570,1572,3,208,
        104,0,1571,1568,1,0,0,0,1571,1569,1,0,0,0,1571,1570,1,0,0,0,1572,
        265,1,0,0,0,1573,1576,3,286,143,0,1574,1576,3,282,141,0,1575,1573,
        1,0,0,0,1575,1574,1,0,0,0,1576,267,1,0,0,0,1577,1592,3,272,136,0,
        1578,1584,5,25,0,0,1579,1585,3,268,134,0,1580,1581,5,126,0,0,1581,
        1582,3,180,90,0,1582,1583,5,127,0,0,1583,1585,1,0,0,0,1584,1579,
        1,0,0,0,1584,1580,1,0,0,0,1585,1592,1,0,0,0,1586,1587,7,15,0,0,1587,
        1592,3,268,134,0,1588,1589,3,270,135,0,1589,1590,3,262,131,0,1590,
        1592,1,0,0,0,1591,1577,1,0,0,0,1591,1578,1,0,0,0,1591,1586,1,0,0,
        0,1591,1588,1,0,0,0,1592,269,1,0,0,0,1593,1594,7,16,0,0,1594,271,
        1,0,0,0,1595,1596,6,136,-1,0,1596,1600,3,280,140,0,1597,1599,3,274,
        137,0,1598,1597,1,0,0,0,1599,1602,1,0,0,0,1600,1598,1,0,0,0,1600,
        1601,1,0,0,0,1601,1614,1,0,0,0,1602,1600,1,0,0,0,1603,1604,10,1,
        0,0,1604,1605,7,17,0,0,1605,1609,3,286,143,0,1606,1608,3,274,137,
        0,1607,1606,1,0,0,0,1608,1611,1,0,0,0,1609,1607,1,0,0,0,1609,1610,
        1,0,0,0,1610,1613,1,0,0,0,1611,1609,1,0,0,0,1612,1603,1,0,0,0,1613,
        1616,1,0,0,0,1614,1612,1,0,0,0,1614,1615,1,0,0,0,1615,273,1,0,0,
        0,1616,1614,1,0,0,0,1617,1618,5,130,0,0,1618,1619,3,258,129,0,1619,
        1620,5,131,0,0,1620,1636,1,0,0,0,1621,1623,5,126,0,0,1622,1624,3,
        276,138,0,1623,1622,1,0,0,0,1623,1624,1,0,0,0,1624,1625,1,0,0,0,
        1625,1636,5,127,0,0,1626,1629,5,126,0,0,1627,1630,5,133,0,0,1628,
        1630,8,18,0,0,1629,1627,1,0,0,0,1629,1628,1,0,0,0,1630,1631,1,0,
        0,0,1631,1629,1,0,0,0,1631,1632,1,0,0,0,1632,1633,1,0,0,0,1633,1636,
        5,127,0,0,1634,1636,7,15,0,0,1635,1617,1,0,0,0,1635,1621,1,0,0,0,
        1635,1626,1,0,0,0,1635,1634,1,0,0,0,1636,275,1,0,0,0,1637,1642,3,
        278,139,0,1638,1639,5,133,0,0,1639,1641,3,278,139,0,1640,1638,1,
        0,0,0,1641,1644,1,0,0,0,1642,1640,1,0,0,0,1642,1643,1,0,0,0,1643,
        277,1,0,0,0,1644,1642,1,0,0,0,1645,1648,3,258,129,0,1646,1648,3,
        180,90,0,1647,1645,1,0,0,0,1647,1646,1,0,0,0,1648,279,1,0,0,0,1649,
        1665,3,286,143,0,1650,1665,3,282,141,0,1651,1665,3,284,142,0,1652,
        1653,5,126,0,0,1653,1654,3,258,129,0,1654,1655,5,127,0,0,1655,1665,
        1,0,0,0,1656,1665,3,90,45,0,1657,1665,3,100,50,0,1658,1665,3,104,
        52,0,1659,1665,3,106,53,0,1660,1665,3,76,38,0,1661,1665,3,80,40,
        0,1662,1665,3,82,41,0,1663,1665,3,88,44,0,1664,1649,1,0,0,0,1664,
        1650,1,0,0,0,1664,1651,1,0,0,0,1664,1652,1,0,0,0,1664,1656,1,0,0,
        0,1664,1657,1,0,0,0,1664,1658,1,0,0,0,1664,1659,1,0,0,0,1664,1660,
        1,0,0,0,1664,1661,1,0,0,0,1664,1662,1,0,0,0,1664,1663,1,0,0,0,1665,
        281,1,0,0,0,1666,1685,5,173,0,0,1667,1685,5,174,0,0,1668,1685,5,
        175,0,0,1669,1671,7,11,0,0,1670,1669,1,0,0,0,1670,1671,1,0,0,0,1671,
        1672,1,0,0,0,1672,1685,5,176,0,0,1673,1675,7,11,0,0,1674,1673,1,
        0,0,0,1674,1675,1,0,0,0,1675,1676,1,0,0,0,1676,1685,5,177,0,0,1677,
        1685,5,171,0,0,1678,1685,5,48,0,0,1679,1685,5,50,0,0,1680,1685,5,
        57,0,0,1681,1685,5,49,0,0,1682,1685,5,38,0,0,1683,1685,5,39,0,0,
        1684,1666,1,0,0,0,1684,1667,1,0,0,0,1684,1668,1,0,0,0,1684,1670,
        1,0,0,0,1684,1674,1,0,0,0,1684,1677,1,0,0,0,1684,1678,1,0,0,0,1684,
        1679,1,0,0,0,1684,1680,1,0,0,0,1684,1681,1,0,0,0,1684,1682,1,0,0,
        0,1684,1683,1,0,0,0,1685,283,1,0,0,0,1686,1690,5,172,0,0,1687,1689,
        7,19,0,0,1688,1687,1,0,0,0,1689,1692,1,0,0,0,1690,1688,1,0,0,0,1690,
        1691,1,0,0,0,1691,1693,1,0,0,0,1692,1690,1,0,0,0,1693,1695,5,184,
        0,0,1694,1686,1,0,0,0,1695,1696,1,0,0,0,1696,1694,1,0,0,0,1696,1697,
        1,0,0,0,1697,285,1,0,0,0,1698,1699,7,20,0,0,1699,287,1,0,0,0,223,
        291,307,314,320,326,329,332,340,347,350,353,361,364,367,377,387,
        395,400,409,415,417,429,439,447,450,453,462,485,492,495,501,510,
        516,518,527,529,538,542,551,553,562,566,569,577,581,583,586,592,
        596,602,616,623,629,632,636,642,646,654,657,664,669,678,682,684,
        696,698,710,712,717,723,726,732,736,739,742,753,759,761,764,772,
        777,783,792,797,799,821,828,833,857,862,867,871,875,879,888,895,
        902,908,911,915,923,926,930,938,943,950,959,963,975,977,987,998,
        1004,1009,1015,1019,1024,1034,1036,1044,1058,1077,1079,1091,1096,
        1100,1104,1108,1115,1121,1133,1140,1144,1149,1153,1160,1165,1171,
        1174,1178,1182,1189,1193,1196,1205,1210,1215,1217,1229,1233,1235,
        1244,1248,1252,1255,1259,1263,1269,1273,1278,1280,1284,1289,1292,
        1299,1306,1309,1315,1319,1323,1327,1331,1335,1339,1343,1347,1351,
        1354,1363,1368,1370,1382,1385,1397,1405,1410,1418,1424,1430,1449,
        1453,1457,1466,1473,1484,1486,1493,1506,1519,1546,1550,1552,1564,
        1566,1571,1575,1584,1591,1600,1609,1614,1623,1629,1631,1635,1642,
        1647,1664,1670,1674,1684,1690,1696
    ]

class ObjectiveCParser ( Parser ):

    grammarFileName = "ObjectiveCParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'auto'", "'break'", "'case'", "'char'", 
                     "'const'", "'continue'", "'default'", "'do'", "'double'", 
                     "<INVALID>", "'enum'", "'extern'", "'float'", "'for'", 
                     "'goto'", "<INVALID>", "'inline'", "'int'", "'long'", 
                     "'register'", "'restrict'", "'return'", "'short'", 
                     "'signed'", "'sizeof'", "'static'", "'struct'", "'switch'", 
                     "'typedef'", "'union'", "'unsigned'", "'void'", "'volatile'", 
                     "'while'", "'_Bool'", "'_Complex'", "'_Imaginery'", 
                     "'true'", "'false'", "'BOOL'", "'Class'", "'bycopy'", 
                     "'byref'", "'id'", "'IMP'", "'in'", "'inout'", "'nil'", 
                     "'NO'", "'NULL'", "'oneway'", "'out'", "'Protocol'", 
                     "'SEL'", "'self'", "'super'", "'YES'", "'@autoreleasepool'", 
                     "'@catch'", "'@class'", "'@dynamic'", "'@encode'", 
                     "'@end'", "'@finally'", "'@implementation'", "'@interface'", 
                     "'@import'", "'@package'", "'@protocol'", "'@optional'", 
                     "'@private'", "'@property'", "'@protected'", "'@public'", 
                     "'@required'", "'@selector'", "'@synchronized'", "'@synthesize'", 
                     "'@throw'", "'@try'", "'atomic'", "'nonatomic'", "'retain'", 
                     "'__attribute__'", "'__autoreleasing'", "'__block'", 
                     "'__bridge'", "'__bridge_retained'", "'__bridge_transfer'", 
                     "'__covariant'", "'__contravariant'", "'__deprecated'", 
                     "'__kindof'", "'__strong'", "<INVALID>", "'__unsafe_unretained'", 
                     "'__unused'", "'__weak'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'null_resettable'", "'NS_INLINE'", "'NS_ENUM'", 
                     "'NS_OPTIONS'", "'assign'", "'copy'", "'getter'", "'setter'", 
                     "'strong'", "'readonly'", "'readwrite'", "'weak'", 
                     "'unsafe_unretained'", "'IBOutlet'", "'IBOutletCollection'", 
                     "'IBInspectable'", "'IB_DESIGNABLE'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'__TVOS_PROHIBITED'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'{'", "'}'", "'['", "']'", "';'", "','", "'.'", "'->'", 
                     "'@'", "'='", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'~'", "'?'", "':'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'++'", "'--'", 
                     "'+'", "'-'", "'*'", "'/'", "'&'", "'|'", "'^'", "'%'", 
                     "'+='", "'-='", "'*='", "'/='", "'&='", "'|='", "'^='", 
                     "'%='", "'<<='", "'>>='", "'...'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'\\'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'defined'", "<INVALID>", "'elif'", "<INVALID>", "'undef'", 
                     "'ifdef'", "'ifndef'", "'endif'" ]

    symbolicNames = [ "<INVALID>", "AUTO", "BREAK", "CASE", "CHAR", "CONST", 
                      "CONTINUE", "DEFAULT", "DO", "DOUBLE", "ELSE", "ENUM", 
                      "EXTERN", "FLOAT", "FOR", "GOTO", "IF", "INLINE", 
                      "INT", "LONG", "REGISTER", "RESTRICT", "RETURN", "SHORT", 
                      "SIGNED", "SIZEOF", "STATIC", "STRUCT", "SWITCH", 
                      "TYPEDEF", "UNION", "UNSIGNED", "VOID", "VOLATILE", 
                      "WHILE", "BOOL_", "COMPLEX", "IMAGINERY", "TRUE", 
                      "FALSE", "BOOL", "Class", "BYCOPY", "BYREF", "ID", 
                      "IMP", "IN", "INOUT", "NIL", "NO", "NULL_", "ONEWAY", 
                      "OUT", "PROTOCOL_", "SEL", "SELF", "SUPER", "YES", 
                      "AUTORELEASEPOOL", "CATCH", "CLASS", "DYNAMIC", "ENCODE", 
                      "END", "FINALLY", "IMPLEMENTATION", "INTERFACE", "IMPORT", 
                      "PACKAGE", "PROTOCOL", "OPTIONAL", "PRIVATE", "PROPERTY", 
                      "PROTECTED", "PUBLIC", "REQUIRED", "SELECTOR", "SYNCHRONIZED", 
                      "SYNTHESIZE", "THROW", "TRY", "ATOMIC", "NONATOMIC", 
                      "RETAIN", "ATTRIBUTE", "AUTORELEASING_QUALIFIER", 
                      "BLOCK", "BRIDGE", "BRIDGE_RETAINED", "BRIDGE_TRANSFER", 
                      "COVARIANT", "CONTRAVARIANT", "DEPRECATED", "KINDOF", 
                      "STRONG_QUALIFIER", "TYPEOF", "UNSAFE_UNRETAINED_QUALIFIER", 
                      "UNUSED", "WEAK_QUALIFIER", "NULL_UNSPECIFIED", "NULLABLE", 
                      "NONNULL", "NULL_RESETTABLE", "NS_INLINE", "NS_ENUM", 
                      "NS_OPTIONS", "ASSIGN", "COPY", "GETTER", "SETTER", 
                      "STRONG", "READONLY", "READWRITE", "WEAK", "UNSAFE_UNRETAINED", 
                      "IB_OUTLET", "IB_OUTLET_COLLECTION", "IB_INSPECTABLE", 
                      "IB_DESIGNABLE", "NS_ASSUME_NONNULL_BEGIN", "NS_ASSUME_NONNULL_END", 
                      "EXTERN_SUFFIX", "IOS_SUFFIX", "MAC_SUFFIX", "TVOS_PROHIBITED", 
                      "IDENTIFIER", "LP", "RP", "LBRACE", "RBRACE", "LBRACK", 
                      "RBRACK", "SEMI", "COMMA", "DOT", "STRUCTACCESS", 
                      "AT", "ASSIGNMENT", "GT", "LT", "BANG", "TILDE", "QUESTION", 
                      "COLON", "EQUAL", "LE", "GE", "NOTEQUAL", "AND", "OR", 
                      "INC", "DEC", "ADD", "SUB", "MUL", "DIV", "BITAND", 
                      "BITOR", "BITXOR", "MOD", "ADD_ASSIGN", "SUB_ASSIGN", 
                      "MUL_ASSIGN", "DIV_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", 
                      "XOR_ASSIGN", "MOD_ASSIGN", "LSHIFT_ASSIGN", "RSHIFT_ASSIGN", 
                      "ELIPSIS", "CHARACTER_LITERAL", "STRING_START", "HEX_LITERAL", 
                      "OCTAL_LITERAL", "BINARY_LITERAL", "DECIMAL_LITERAL", 
                      "FLOATING_POINT_LITERAL", "WS", "MULTI_COMMENT", "SINGLE_COMMENT", 
                      "BACKSLASH", "SHARP", "STRING_NEWLINE", "STRING_END", 
                      "STRING_VALUE", "DIRECTIVE_IMPORT", "DIRECTIVE_INCLUDE", 
                      "DIRECTIVE_PRAGMA", "DIRECTIVE_DEFINE", "DIRECTIVE_DEFINED", 
                      "DIRECTIVE_IF", "DIRECTIVE_ELIF", "DIRECTIVE_ELSE", 
                      "DIRECTIVE_UNDEF", "DIRECTIVE_IFDEF", "DIRECTIVE_IFNDEF", 
                      "DIRECTIVE_ENDIF", "DIRECTIVE_TRUE", "DIRECTIVE_FALSE", 
                      "DIRECTIVE_ERROR", "DIRECTIVE_WARNING", "DIRECTIVE_BANG", 
                      "DIRECTIVE_LP", "DIRECTIVE_RP", "DIRECTIVE_EQUAL", 
                      "DIRECTIVE_NOTEQUAL", "DIRECTIVE_AND", "DIRECTIVE_OR", 
                      "DIRECTIVE_LT", "DIRECTIVE_GT", "DIRECTIVE_LE", "DIRECTIVE_GE", 
                      "DIRECTIVE_STRING", "DIRECTIVE_ID", "DIRECTIVE_DECIMAL_LITERAL", 
                      "DIRECTIVE_FLOAT", "DIRECTIVE_NEWLINE", "DIRECTIVE_MULTI_COMMENT", 
                      "DIRECTIVE_SINGLE_COMMENT", "DIRECTIVE_BACKSLASH_NEWLINE", 
                      "DIRECTIVE_TEXT_NEWLINE", "DIRECTIVE_TEXT" ]

    RULE_translationUnit = 0
    RULE_topLevelDeclaration = 1
    RULE_importDeclaration = 2
    RULE_classInterface = 3
    RULE_categoryInterface = 4
    RULE_classImplementation = 5
    RULE_categoryImplementation = 6
    RULE_genericTypeSpecifier = 7
    RULE_protocolDeclaration = 8
    RULE_protocolDeclarationSection = 9
    RULE_protocolDeclarationList = 10
    RULE_classDeclarationList = 11
    RULE_protocolList = 12
    RULE_propertyDeclaration = 13
    RULE_propertyAttributesList = 14
    RULE_propertyAttribute = 15
    RULE_protocolName = 16
    RULE_instanceVariables = 17
    RULE_visibilitySection = 18
    RULE_accessModifier = 19
    RULE_interfaceDeclarationList = 20
    RULE_classMethodDeclaration = 21
    RULE_instanceMethodDeclaration = 22
    RULE_methodDeclaration = 23
    RULE_implementationDefinitionList = 24
    RULE_classMethodDefinition = 25
    RULE_instanceMethodDefinition = 26
    RULE_methodDefinition = 27
    RULE_methodSelector = 28
    RULE_keywordDeclarator = 29
    RULE_selector = 30
    RULE_methodType = 31
    RULE_propertyImplementation = 32
    RULE_propertySynthesizeList = 33
    RULE_propertySynthesizeItem = 34
    RULE_blockType = 35
    RULE_genericsSpecifier = 36
    RULE_typeSpecifierWithPrefixes = 37
    RULE_dictionaryExpression = 38
    RULE_dictionaryPair = 39
    RULE_arrayExpression = 40
    RULE_boxExpression = 41
    RULE_blockParameters = 42
    RULE_typeVariableDeclaratorOrName = 43
    RULE_blockExpression = 44
    RULE_messageExpression = 45
    RULE_receiver = 46
    RULE_messageSelector = 47
    RULE_keywordArgument = 48
    RULE_keywordArgumentType = 49
    RULE_selectorExpression = 50
    RULE_selectorName = 51
    RULE_protocolExpression = 52
    RULE_encodeExpression = 53
    RULE_typeVariableDeclarator = 54
    RULE_throwStatement = 55
    RULE_tryBlock = 56
    RULE_catchStatement = 57
    RULE_synchronizedStatement = 58
    RULE_autoreleaseStatement = 59
    RULE_functionDeclaration = 60
    RULE_functionDefinition = 61
    RULE_functionSignature = 62
    RULE_attribute = 63
    RULE_attributeName = 64
    RULE_attributeParameters = 65
    RULE_attributeParameterList = 66
    RULE_attributeParameter = 67
    RULE_attributeParameterAssignment = 68
    RULE_declaration = 69
    RULE_functionCallExpression = 70
    RULE_enumDeclaration = 71
    RULE_varDeclaration = 72
    RULE_typedefDeclaration = 73
    RULE_typeDeclaratorList = 74
    RULE_typeDeclarator = 75
    RULE_declarationSpecifiers = 76
    RULE_attributeSpecifier = 77
    RULE_initDeclaratorList = 78
    RULE_initDeclarator = 79
    RULE_structOrUnionSpecifier = 80
    RULE_fieldDeclaration = 81
    RULE_specifierQualifierList = 82
    RULE_ibOutletQualifier = 83
    RULE_arcBehaviourSpecifier = 84
    RULE_nullabilitySpecifier = 85
    RULE_storageClassSpecifier = 86
    RULE_typePrefix = 87
    RULE_typeQualifier = 88
    RULE_protocolQualifier = 89
    RULE_typeSpecifier = 90
    RULE_typeofExpression = 91
    RULE_fieldDeclaratorList = 92
    RULE_fieldDeclarator = 93
    RULE_enumSpecifier = 94
    RULE_enumeratorList = 95
    RULE_enumerator = 96
    RULE_enumeratorIdentifier = 97
    RULE_directDeclarator = 98
    RULE_declaratorSuffix = 99
    RULE_parameterList = 100
    RULE_pointer = 101
    RULE_macro = 102
    RULE_arrayInitializer = 103
    RULE_structInitializer = 104
    RULE_initializerList = 105
    RULE_typeName = 106
    RULE_abstractDeclarator = 107
    RULE_abstractDeclaratorSuffix = 108
    RULE_parameterDeclarationList = 109
    RULE_parameterDeclaration = 110
    RULE_declarator = 111
    RULE_statement = 112
    RULE_labeledStatement = 113
    RULE_rangeExpression = 114
    RULE_compoundStatement = 115
    RULE_selectionStatement = 116
    RULE_switchStatement = 117
    RULE_switchBlock = 118
    RULE_switchSection = 119
    RULE_switchLabel = 120
    RULE_iterationStatement = 121
    RULE_whileStatement = 122
    RULE_doStatement = 123
    RULE_forStatement = 124
    RULE_forLoopInitializer = 125
    RULE_forInStatement = 126
    RULE_jumpStatement = 127
    RULE_expressions = 128
    RULE_expression = 129
    RULE_assignmentOperator = 130
    RULE_castExpression = 131
    RULE_initializer = 132
    RULE_constantExpression = 133
    RULE_unaryExpression = 134
    RULE_unaryOperator = 135
    RULE_postfixExpression = 136
    RULE_postfix = 137
    RULE_argumentExpressionList = 138
    RULE_argumentExpression = 139
    RULE_primaryExpression = 140
    RULE_constant = 141
    RULE_stringLiteral = 142
    RULE_identifier = 143

    ruleNames =  [ "translationUnit", "topLevelDeclaration", "importDeclaration", 
                   "classInterface", "categoryInterface", "classImplementation", 
                   "categoryImplementation", "genericTypeSpecifier", "protocolDeclaration", 
                   "protocolDeclarationSection", "protocolDeclarationList", 
                   "classDeclarationList", "protocolList", "propertyDeclaration", 
                   "propertyAttributesList", "propertyAttribute", "protocolName", 
                   "instanceVariables", "visibilitySection", "accessModifier", 
                   "interfaceDeclarationList", "classMethodDeclaration", 
                   "instanceMethodDeclaration", "methodDeclaration", "implementationDefinitionList", 
                   "classMethodDefinition", "instanceMethodDefinition", 
                   "methodDefinition", "methodSelector", "keywordDeclarator", 
                   "selector", "methodType", "propertyImplementation", "propertySynthesizeList", 
                   "propertySynthesizeItem", "blockType", "genericsSpecifier", 
                   "typeSpecifierWithPrefixes", "dictionaryExpression", 
                   "dictionaryPair", "arrayExpression", "boxExpression", 
                   "blockParameters", "typeVariableDeclaratorOrName", "blockExpression", 
                   "messageExpression", "receiver", "messageSelector", "keywordArgument", 
                   "keywordArgumentType", "selectorExpression", "selectorName", 
                   "protocolExpression", "encodeExpression", "typeVariableDeclarator", 
                   "throwStatement", "tryBlock", "catchStatement", "synchronizedStatement", 
                   "autoreleaseStatement", "functionDeclaration", "functionDefinition", 
                   "functionSignature", "attribute", "attributeName", "attributeParameters", 
                   "attributeParameterList", "attributeParameter", "attributeParameterAssignment", 
                   "declaration", "functionCallExpression", "enumDeclaration", 
                   "varDeclaration", "typedefDeclaration", "typeDeclaratorList", 
                   "typeDeclarator", "declarationSpecifiers", "attributeSpecifier", 
                   "initDeclaratorList", "initDeclarator", "structOrUnionSpecifier", 
                   "fieldDeclaration", "specifierQualifierList", "ibOutletQualifier", 
                   "arcBehaviourSpecifier", "nullabilitySpecifier", "storageClassSpecifier", 
                   "typePrefix", "typeQualifier", "protocolQualifier", "typeSpecifier", 
                   "typeofExpression", "fieldDeclaratorList", "fieldDeclarator", 
                   "enumSpecifier", "enumeratorList", "enumerator", "enumeratorIdentifier", 
                   "directDeclarator", "declaratorSuffix", "parameterList", 
                   "pointer", "macro", "arrayInitializer", "structInitializer", 
                   "initializerList", "typeName", "abstractDeclarator", 
                   "abstractDeclaratorSuffix", "parameterDeclarationList", 
                   "parameterDeclaration", "declarator", "statement", "labeledStatement", 
                   "rangeExpression", "compoundStatement", "selectionStatement", 
                   "switchStatement", "switchBlock", "switchSection", "switchLabel", 
                   "iterationStatement", "whileStatement", "doStatement", 
                   "forStatement", "forLoopInitializer", "forInStatement", 
                   "jumpStatement", "expressions", "expression", "assignmentOperator", 
                   "castExpression", "initializer", "constantExpression", 
                   "unaryExpression", "unaryOperator", "postfixExpression", 
                   "postfix", "argumentExpressionList", "argumentExpression", 
                   "primaryExpression", "constant", "stringLiteral", "identifier" ]

    EOF = Token.EOF
    AUTO=1
    BREAK=2
    CASE=3
    CHAR=4
    CONST=5
    CONTINUE=6
    DEFAULT=7
    DO=8
    DOUBLE=9
    ELSE=10
    ENUM=11
    EXTERN=12
    FLOAT=13
    FOR=14
    GOTO=15
    IF=16
    INLINE=17
    INT=18
    LONG=19
    REGISTER=20
    RESTRICT=21
    RETURN=22
    SHORT=23
    SIGNED=24
    SIZEOF=25
    STATIC=26
    STRUCT=27
    SWITCH=28
    TYPEDEF=29
    UNION=30
    UNSIGNED=31
    VOID=32
    VOLATILE=33
    WHILE=34
    BOOL_=35
    COMPLEX=36
    IMAGINERY=37
    TRUE=38
    FALSE=39
    BOOL=40
    Class=41
    BYCOPY=42
    BYREF=43
    ID=44
    IMP=45
    IN=46
    INOUT=47
    NIL=48
    NO=49
    NULL_=50
    ONEWAY=51
    OUT=52
    PROTOCOL_=53
    SEL=54
    SELF=55
    SUPER=56
    YES=57
    AUTORELEASEPOOL=58
    CATCH=59
    CLASS=60
    DYNAMIC=61
    ENCODE=62
    END=63
    FINALLY=64
    IMPLEMENTATION=65
    INTERFACE=66
    IMPORT=67
    PACKAGE=68
    PROTOCOL=69
    OPTIONAL=70
    PRIVATE=71
    PROPERTY=72
    PROTECTED=73
    PUBLIC=74
    REQUIRED=75
    SELECTOR=76
    SYNCHRONIZED=77
    SYNTHESIZE=78
    THROW=79
    TRY=80
    ATOMIC=81
    NONATOMIC=82
    RETAIN=83
    ATTRIBUTE=84
    AUTORELEASING_QUALIFIER=85
    BLOCK=86
    BRIDGE=87
    BRIDGE_RETAINED=88
    BRIDGE_TRANSFER=89
    COVARIANT=90
    CONTRAVARIANT=91
    DEPRECATED=92
    KINDOF=93
    STRONG_QUALIFIER=94
    TYPEOF=95
    UNSAFE_UNRETAINED_QUALIFIER=96
    UNUSED=97
    WEAK_QUALIFIER=98
    NULL_UNSPECIFIED=99
    NULLABLE=100
    NONNULL=101
    NULL_RESETTABLE=102
    NS_INLINE=103
    NS_ENUM=104
    NS_OPTIONS=105
    ASSIGN=106
    COPY=107
    GETTER=108
    SETTER=109
    STRONG=110
    READONLY=111
    READWRITE=112
    WEAK=113
    UNSAFE_UNRETAINED=114
    IB_OUTLET=115
    IB_OUTLET_COLLECTION=116
    IB_INSPECTABLE=117
    IB_DESIGNABLE=118
    NS_ASSUME_NONNULL_BEGIN=119
    NS_ASSUME_NONNULL_END=120
    EXTERN_SUFFIX=121
    IOS_SUFFIX=122
    MAC_SUFFIX=123
    TVOS_PROHIBITED=124
    IDENTIFIER=125
    LP=126
    RP=127
    LBRACE=128
    RBRACE=129
    LBRACK=130
    RBRACK=131
    SEMI=132
    COMMA=133
    DOT=134
    STRUCTACCESS=135
    AT=136
    ASSIGNMENT=137
    GT=138
    LT=139
    BANG=140
    TILDE=141
    QUESTION=142
    COLON=143
    EQUAL=144
    LE=145
    GE=146
    NOTEQUAL=147
    AND=148
    OR=149
    INC=150
    DEC=151
    ADD=152
    SUB=153
    MUL=154
    DIV=155
    BITAND=156
    BITOR=157
    BITXOR=158
    MOD=159
    ADD_ASSIGN=160
    SUB_ASSIGN=161
    MUL_ASSIGN=162
    DIV_ASSIGN=163
    AND_ASSIGN=164
    OR_ASSIGN=165
    XOR_ASSIGN=166
    MOD_ASSIGN=167
    LSHIFT_ASSIGN=168
    RSHIFT_ASSIGN=169
    ELIPSIS=170
    CHARACTER_LITERAL=171
    STRING_START=172
    HEX_LITERAL=173
    OCTAL_LITERAL=174
    BINARY_LITERAL=175
    DECIMAL_LITERAL=176
    FLOATING_POINT_LITERAL=177
    WS=178
    MULTI_COMMENT=179
    SINGLE_COMMENT=180
    BACKSLASH=181
    SHARP=182
    STRING_NEWLINE=183
    STRING_END=184
    STRING_VALUE=185
    DIRECTIVE_IMPORT=186
    DIRECTIVE_INCLUDE=187
    DIRECTIVE_PRAGMA=188
    DIRECTIVE_DEFINE=189
    DIRECTIVE_DEFINED=190
    DIRECTIVE_IF=191
    DIRECTIVE_ELIF=192
    DIRECTIVE_ELSE=193
    DIRECTIVE_UNDEF=194
    DIRECTIVE_IFDEF=195
    DIRECTIVE_IFNDEF=196
    DIRECTIVE_ENDIF=197
    DIRECTIVE_TRUE=198
    DIRECTIVE_FALSE=199
    DIRECTIVE_ERROR=200
    DIRECTIVE_WARNING=201
    DIRECTIVE_BANG=202
    DIRECTIVE_LP=203
    DIRECTIVE_RP=204
    DIRECTIVE_EQUAL=205
    DIRECTIVE_NOTEQUAL=206
    DIRECTIVE_AND=207
    DIRECTIVE_OR=208
    DIRECTIVE_LT=209
    DIRECTIVE_GT=210
    DIRECTIVE_LE=211
    DIRECTIVE_GE=212
    DIRECTIVE_STRING=213
    DIRECTIVE_ID=214
    DIRECTIVE_DECIMAL_LITERAL=215
    DIRECTIVE_FLOAT=216
    DIRECTIVE_NEWLINE=217
    DIRECTIVE_MULTI_COMMENT=218
    DIRECTIVE_SINGLE_COMMENT=219
    DIRECTIVE_BACKSLASH_NEWLINE=220
    DIRECTIVE_TEXT_NEWLINE=221
    DIRECTIVE_TEXT=222

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class TranslationUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(ObjectiveCParser.EOF, 0)

        def topLevelDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.TopLevelDeclarationContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.TopLevelDeclarationContext,i)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_translationUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTranslationUnit" ):
                listener.enterTranslationUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTranslationUnit" ):
                listener.exitTranslationUnit(self)




    def translationUnit(self):

        localctx = ObjectiveCParser.TranslationUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_translationUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 291
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 1295065285207669298) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 1170935903116263447) != 0):
                self.state = 288
                self.topLevelDeclaration()
                self.state = 293
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 294
            self.match(ObjectiveCParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopLevelDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def importDeclaration(self):
            return self.getTypedRuleContext(ObjectiveCParser.ImportDeclarationContext,0)


        def functionDeclaration(self):
            return self.getTypedRuleContext(ObjectiveCParser.FunctionDeclarationContext,0)


        def declaration(self):
            return self.getTypedRuleContext(ObjectiveCParser.DeclarationContext,0)


        def classInterface(self):
            return self.getTypedRuleContext(ObjectiveCParser.ClassInterfaceContext,0)


        def classImplementation(self):
            return self.getTypedRuleContext(ObjectiveCParser.ClassImplementationContext,0)


        def categoryInterface(self):
            return self.getTypedRuleContext(ObjectiveCParser.CategoryInterfaceContext,0)


        def categoryImplementation(self):
            return self.getTypedRuleContext(ObjectiveCParser.CategoryImplementationContext,0)


        def protocolDeclaration(self):
            return self.getTypedRuleContext(ObjectiveCParser.ProtocolDeclarationContext,0)


        def protocolDeclarationList(self):
            return self.getTypedRuleContext(ObjectiveCParser.ProtocolDeclarationListContext,0)


        def classDeclarationList(self):
            return self.getTypedRuleContext(ObjectiveCParser.ClassDeclarationListContext,0)


        def functionDefinition(self):
            return self.getTypedRuleContext(ObjectiveCParser.FunctionDefinitionContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_topLevelDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopLevelDeclaration" ):
                listener.enterTopLevelDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopLevelDeclaration" ):
                listener.exitTopLevelDeclaration(self)




    def topLevelDeclaration(self):

        localctx = ObjectiveCParser.TopLevelDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_topLevelDeclaration)
        try:
            self.state = 307
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 296
                self.importDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 297
                self.functionDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 298
                self.declaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 299
                self.classInterface()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 300
                self.classImplementation()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 301
                self.categoryInterface()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 302
                self.categoryImplementation()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 303
                self.protocolDeclaration()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 304
                self.protocolDeclarationList()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 305
                self.classDeclarationList()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 306
                self.functionDefinition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(ObjectiveCParser.IMPORT, 0)

        def identifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.IdentifierContext,0)


        def SEMI(self):
            return self.getToken(ObjectiveCParser.SEMI, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_importDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportDeclaration" ):
                listener.enterImportDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportDeclaration" ):
                listener.exitImportDeclaration(self)




    def importDeclaration(self):

        localctx = ObjectiveCParser.ImportDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_importDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 309
            self.match(ObjectiveCParser.IMPORT)
            self.state = 310
            self.identifier()
            self.state = 311
            self.match(ObjectiveCParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassInterfaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.className = None # GenericTypeSpecifierContext
            self.superclassName = None # IdentifierContext

        def INTERFACE(self):
            return self.getToken(ObjectiveCParser.INTERFACE, 0)

        def END(self):
            return self.getToken(ObjectiveCParser.END, 0)

        def genericTypeSpecifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.GenericTypeSpecifierContext,0)


        def IB_DESIGNABLE(self):
            return self.getToken(ObjectiveCParser.IB_DESIGNABLE, 0)

        def COLON(self):
            return self.getToken(ObjectiveCParser.COLON, 0)

        def LT(self):
            return self.getToken(ObjectiveCParser.LT, 0)

        def protocolList(self):
            return self.getTypedRuleContext(ObjectiveCParser.ProtocolListContext,0)


        def GT(self):
            return self.getToken(ObjectiveCParser.GT, 0)

        def instanceVariables(self):
            return self.getTypedRuleContext(ObjectiveCParser.InstanceVariablesContext,0)


        def interfaceDeclarationList(self):
            return self.getTypedRuleContext(ObjectiveCParser.InterfaceDeclarationListContext,0)


        def identifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.IdentifierContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_classInterface

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassInterface" ):
                listener.enterClassInterface(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassInterface" ):
                listener.exitClassInterface(self)




    def classInterface(self):

        localctx = ObjectiveCParser.ClassInterfaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_classInterface)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 314
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==118:
                self.state = 313
                self.match(ObjectiveCParser.IB_DESIGNABLE)


            self.state = 316
            self.match(ObjectiveCParser.INTERFACE)
            self.state = 317
            localctx.className = self.genericTypeSpecifier()
            self.state = 320
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==143:
                self.state = 318
                self.match(ObjectiveCParser.COLON)
                self.state = 319
                localctx.superclassName = self.identifier()


            self.state = 326
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==139:
                self.state = 322
                self.match(ObjectiveCParser.LT)
                self.state = 323
                self.protocolList()
                self.state = 324
                self.match(ObjectiveCParser.GT)


            self.state = 329
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==128:
                self.state = 328
                self.instanceVariables()


            self.state = 332
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 142143780600822322) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 9147936743095809) != 0) or _la==152 or _la==153:
                self.state = 331
                self.interfaceDeclarationList()


            self.state = 334
            self.match(ObjectiveCParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CategoryInterfaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.categoryName = None # GenericTypeSpecifierContext
            self.className = None # IdentifierContext

        def INTERFACE(self):
            return self.getToken(ObjectiveCParser.INTERFACE, 0)

        def LP(self):
            return self.getToken(ObjectiveCParser.LP, 0)

        def RP(self):
            return self.getToken(ObjectiveCParser.RP, 0)

        def END(self):
            return self.getToken(ObjectiveCParser.END, 0)

        def genericTypeSpecifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.GenericTypeSpecifierContext,0)


        def LT(self):
            return self.getToken(ObjectiveCParser.LT, 0)

        def protocolList(self):
            return self.getTypedRuleContext(ObjectiveCParser.ProtocolListContext,0)


        def GT(self):
            return self.getToken(ObjectiveCParser.GT, 0)

        def instanceVariables(self):
            return self.getTypedRuleContext(ObjectiveCParser.InstanceVariablesContext,0)


        def interfaceDeclarationList(self):
            return self.getTypedRuleContext(ObjectiveCParser.InterfaceDeclarationListContext,0)


        def identifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.IdentifierContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_categoryInterface

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCategoryInterface" ):
                listener.enterCategoryInterface(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCategoryInterface" ):
                listener.exitCategoryInterface(self)




    def categoryInterface(self):

        localctx = ObjectiveCParser.CategoryInterfaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_categoryInterface)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 336
            self.match(ObjectiveCParser.INTERFACE)
            self.state = 337
            localctx.categoryName = self.genericTypeSpecifier()
            self.state = 338
            self.match(ObjectiveCParser.LP)
            self.state = 340
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 142143763727253504) != 0) or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & 17867063762871) != 0):
                self.state = 339
                localctx.className = self.identifier()


            self.state = 342
            self.match(ObjectiveCParser.RP)
            self.state = 347
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==139:
                self.state = 343
                self.match(ObjectiveCParser.LT)
                self.state = 344
                self.protocolList()
                self.state = 345
                self.match(ObjectiveCParser.GT)


            self.state = 350
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==128:
                self.state = 349
                self.instanceVariables()


            self.state = 353
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 142143780600822322) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 9147936743095809) != 0) or _la==152 or _la==153:
                self.state = 352
                self.interfaceDeclarationList()


            self.state = 355
            self.match(ObjectiveCParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassImplementationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.className = None # GenericTypeSpecifierContext
            self.superclassName = None # IdentifierContext

        def IMPLEMENTATION(self):
            return self.getToken(ObjectiveCParser.IMPLEMENTATION, 0)

        def END(self):
            return self.getToken(ObjectiveCParser.END, 0)

        def genericTypeSpecifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.GenericTypeSpecifierContext,0)


        def COLON(self):
            return self.getToken(ObjectiveCParser.COLON, 0)

        def instanceVariables(self):
            return self.getTypedRuleContext(ObjectiveCParser.InstanceVariablesContext,0)


        def implementationDefinitionList(self):
            return self.getTypedRuleContext(ObjectiveCParser.ImplementationDefinitionListContext,0)


        def identifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.IdentifierContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_classImplementation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassImplementation" ):
                listener.enterClassImplementation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassImplementation" ):
                listener.exitClassImplementation(self)




    def classImplementation(self):

        localctx = ObjectiveCParser.ClassImplementationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_classImplementation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 357
            self.match(ObjectiveCParser.IMPLEMENTATION)
            self.state = 358
            localctx.className = self.genericTypeSpecifier()
            self.state = 361
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==143:
                self.state = 359
                self.match(ObjectiveCParser.COLON)
                self.state = 360
                localctx.superclassName = self.identifier()


            self.state = 364
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==128:
                self.state = 363
                self.instanceVariables()


            self.state = 367
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2447986789814516274) != 0) or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & 142936511610873) != 0) or _la==152 or _la==153:
                self.state = 366
                self.implementationDefinitionList()


            self.state = 369
            self.match(ObjectiveCParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CategoryImplementationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.className = None # GenericTypeSpecifierContext
            self.categoryName = None # IdentifierContext

        def IMPLEMENTATION(self):
            return self.getToken(ObjectiveCParser.IMPLEMENTATION, 0)

        def LP(self):
            return self.getToken(ObjectiveCParser.LP, 0)

        def RP(self):
            return self.getToken(ObjectiveCParser.RP, 0)

        def END(self):
            return self.getToken(ObjectiveCParser.END, 0)

        def genericTypeSpecifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.GenericTypeSpecifierContext,0)


        def identifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.IdentifierContext,0)


        def implementationDefinitionList(self):
            return self.getTypedRuleContext(ObjectiveCParser.ImplementationDefinitionListContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_categoryImplementation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCategoryImplementation" ):
                listener.enterCategoryImplementation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCategoryImplementation" ):
                listener.exitCategoryImplementation(self)




    def categoryImplementation(self):

        localctx = ObjectiveCParser.CategoryImplementationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_categoryImplementation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 371
            self.match(ObjectiveCParser.IMPLEMENTATION)
            self.state = 372
            localctx.className = self.genericTypeSpecifier()
            self.state = 373
            self.match(ObjectiveCParser.LP)
            self.state = 374
            localctx.categoryName = self.identifier()
            self.state = 375
            self.match(ObjectiveCParser.RP)
            self.state = 377
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2447986789814516274) != 0) or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & 142936511610873) != 0) or _la==152 or _la==153:
                self.state = 376
                self.implementationDefinitionList()


            self.state = 379
            self.match(ObjectiveCParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericTypeSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.IdentifierContext,0)


        def genericsSpecifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.GenericsSpecifierContext,0)


        def LT(self):
            return self.getToken(ObjectiveCParser.LT, 0)

        def protocolList(self):
            return self.getTypedRuleContext(ObjectiveCParser.ProtocolListContext,0)


        def GT(self):
            return self.getToken(ObjectiveCParser.GT, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_genericTypeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericTypeSpecifier" ):
                listener.enterGenericTypeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericTypeSpecifier" ):
                listener.exitGenericTypeSpecifier(self)




    def genericTypeSpecifier(self):

        localctx = ObjectiveCParser.GenericTypeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_genericTypeSpecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 381
            self.identifier()
            self.state = 387
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.state = 382
                self.match(ObjectiveCParser.LT)
                self.state = 383
                self.protocolList()
                self.state = 384
                self.match(ObjectiveCParser.GT)

            elif la_ == 2:
                self.state = 386
                self.genericsSpecifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProtocolDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROTOCOL(self):
            return self.getToken(ObjectiveCParser.PROTOCOL, 0)

        def protocolName(self):
            return self.getTypedRuleContext(ObjectiveCParser.ProtocolNameContext,0)


        def END(self):
            return self.getToken(ObjectiveCParser.END, 0)

        def LT(self):
            return self.getToken(ObjectiveCParser.LT, 0)

        def protocolList(self):
            return self.getTypedRuleContext(ObjectiveCParser.ProtocolListContext,0)


        def GT(self):
            return self.getToken(ObjectiveCParser.GT, 0)

        def protocolDeclarationSection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.ProtocolDeclarationSectionContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.ProtocolDeclarationSectionContext,i)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_protocolDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProtocolDeclaration" ):
                listener.enterProtocolDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProtocolDeclaration" ):
                listener.exitProtocolDeclaration(self)




    def protocolDeclaration(self):

        localctx = ObjectiveCParser.ProtocolDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_protocolDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 389
            self.match(ObjectiveCParser.PROTOCOL)
            self.state = 390
            self.protocolName()
            self.state = 395
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==139:
                self.state = 391
                self.match(ObjectiveCParser.LT)
                self.state = 392
                self.protocolList()
                self.state = 393
                self.match(ObjectiveCParser.GT)


            self.state = 400
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 142143780600822322) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 36591746972383269) != 0) or _la==152 or _la==153:
                self.state = 397
                self.protocolDeclarationSection()
                self.state = 402
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 403
            self.match(ObjectiveCParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProtocolDeclarationSectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.modifier = None # Token

        def REQUIRED(self):
            return self.getToken(ObjectiveCParser.REQUIRED, 0)

        def OPTIONAL(self):
            return self.getToken(ObjectiveCParser.OPTIONAL, 0)

        def interfaceDeclarationList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.InterfaceDeclarationListContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.InterfaceDeclarationListContext,i)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_protocolDeclarationSection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProtocolDeclarationSection" ):
                listener.enterProtocolDeclarationSection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProtocolDeclarationSection" ):
                listener.exitProtocolDeclarationSection(self)




    def protocolDeclarationSection(self):

        localctx = ObjectiveCParser.ProtocolDeclarationSectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_protocolDeclarationSection)
        self._la = 0 # Token type
        try:
            self.state = 417
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [70, 75]:
                self.enterOuterAlt(localctx, 1)
                self.state = 405
                localctx.modifier = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==70 or _la==75):
                    localctx.modifier = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 409
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,18,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 406
                        self.interfaceDeclarationList() 
                    self.state = 411
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,18,self._ctx)

                pass
            elif token in [1, 4, 5, 9, 11, 12, 13, 17, 18, 19, 20, 21, 23, 24, 26, 27, 29, 30, 31, 32, 33, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 72, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 125, 152, 153]:
                self.enterOuterAlt(localctx, 2)
                self.state = 413 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 412
                        self.interfaceDeclarationList()

                    else:
                        raise NoViableAltException(self)
                    self.state = 415 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,19,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProtocolDeclarationListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROTOCOL(self):
            return self.getToken(ObjectiveCParser.PROTOCOL, 0)

        def protocolList(self):
            return self.getTypedRuleContext(ObjectiveCParser.ProtocolListContext,0)


        def SEMI(self):
            return self.getToken(ObjectiveCParser.SEMI, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_protocolDeclarationList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProtocolDeclarationList" ):
                listener.enterProtocolDeclarationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProtocolDeclarationList" ):
                listener.exitProtocolDeclarationList(self)




    def protocolDeclarationList(self):

        localctx = ObjectiveCParser.ProtocolDeclarationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_protocolDeclarationList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 419
            self.match(ObjectiveCParser.PROTOCOL)
            self.state = 420
            self.protocolList()
            self.state = 421
            self.match(ObjectiveCParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassDeclarationListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(ObjectiveCParser.CLASS, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.IdentifierContext,i)


        def SEMI(self):
            return self.getToken(ObjectiveCParser.SEMI, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ObjectiveCParser.COMMA)
            else:
                return self.getToken(ObjectiveCParser.COMMA, i)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_classDeclarationList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassDeclarationList" ):
                listener.enterClassDeclarationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassDeclarationList" ):
                listener.exitClassDeclarationList(self)




    def classDeclarationList(self):

        localctx = ObjectiveCParser.ClassDeclarationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_classDeclarationList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 423
            self.match(ObjectiveCParser.CLASS)
            self.state = 424
            self.identifier()
            self.state = 429
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==133:
                self.state = 425
                self.match(ObjectiveCParser.COMMA)
                self.state = 426
                self.identifier()
                self.state = 431
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 432
            self.match(ObjectiveCParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProtocolListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def protocolName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.ProtocolNameContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.ProtocolNameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ObjectiveCParser.COMMA)
            else:
                return self.getToken(ObjectiveCParser.COMMA, i)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_protocolList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProtocolList" ):
                listener.enterProtocolList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProtocolList" ):
                listener.exitProtocolList(self)




    def protocolList(self):

        localctx = ObjectiveCParser.ProtocolListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_protocolList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 434
            self.protocolName()
            self.state = 439
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==133:
                self.state = 435
                self.match(ObjectiveCParser.COMMA)
                self.state = 436
                self.protocolName()
                self.state = 441
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROPERTY(self):
            return self.getToken(ObjectiveCParser.PROPERTY, 0)

        def fieldDeclaration(self):
            return self.getTypedRuleContext(ObjectiveCParser.FieldDeclarationContext,0)


        def LP(self):
            return self.getToken(ObjectiveCParser.LP, 0)

        def propertyAttributesList(self):
            return self.getTypedRuleContext(ObjectiveCParser.PropertyAttributesListContext,0)


        def RP(self):
            return self.getToken(ObjectiveCParser.RP, 0)

        def ibOutletQualifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.IbOutletQualifierContext,0)


        def IB_INSPECTABLE(self):
            return self.getToken(ObjectiveCParser.IB_INSPECTABLE, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_propertyDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyDeclaration" ):
                listener.enterPropertyDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyDeclaration" ):
                listener.exitPropertyDeclaration(self)




    def propertyDeclaration(self):

        localctx = ObjectiveCParser.PropertyDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_propertyDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 442
            self.match(ObjectiveCParser.PROPERTY)
            self.state = 447
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==126:
                self.state = 443
                self.match(ObjectiveCParser.LP)
                self.state = 444
                self.propertyAttributesList()
                self.state = 445
                self.match(ObjectiveCParser.RP)


            self.state = 450
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.state = 449
                self.ibOutletQualifier()


            self.state = 453
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
            if la_ == 1:
                self.state = 452
                self.match(ObjectiveCParser.IB_INSPECTABLE)


            self.state = 455
            self.fieldDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyAttributesListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def propertyAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.PropertyAttributeContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.PropertyAttributeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ObjectiveCParser.COMMA)
            else:
                return self.getToken(ObjectiveCParser.COMMA, i)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_propertyAttributesList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyAttributesList" ):
                listener.enterPropertyAttributesList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyAttributesList" ):
                listener.exitPropertyAttributesList(self)




    def propertyAttributesList(self):

        localctx = ObjectiveCParser.PropertyAttributesListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_propertyAttributesList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 457
            self.propertyAttribute()
            self.state = 462
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==133:
                self.state = 458
                self.match(ObjectiveCParser.COMMA)
                self.state = 459
                self.propertyAttribute()
                self.state = 464
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyAttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ATOMIC(self):
            return self.getToken(ObjectiveCParser.ATOMIC, 0)

        def NONATOMIC(self):
            return self.getToken(ObjectiveCParser.NONATOMIC, 0)

        def STRONG(self):
            return self.getToken(ObjectiveCParser.STRONG, 0)

        def WEAK(self):
            return self.getToken(ObjectiveCParser.WEAK, 0)

        def RETAIN(self):
            return self.getToken(ObjectiveCParser.RETAIN, 0)

        def ASSIGN(self):
            return self.getToken(ObjectiveCParser.ASSIGN, 0)

        def UNSAFE_UNRETAINED(self):
            return self.getToken(ObjectiveCParser.UNSAFE_UNRETAINED, 0)

        def COPY(self):
            return self.getToken(ObjectiveCParser.COPY, 0)

        def READONLY(self):
            return self.getToken(ObjectiveCParser.READONLY, 0)

        def READWRITE(self):
            return self.getToken(ObjectiveCParser.READWRITE, 0)

        def GETTER(self):
            return self.getToken(ObjectiveCParser.GETTER, 0)

        def ASSIGNMENT(self):
            return self.getToken(ObjectiveCParser.ASSIGNMENT, 0)

        def identifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.IdentifierContext,0)


        def SETTER(self):
            return self.getToken(ObjectiveCParser.SETTER, 0)

        def COLON(self):
            return self.getToken(ObjectiveCParser.COLON, 0)

        def nullabilitySpecifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.NullabilitySpecifierContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_propertyAttribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyAttribute" ):
                listener.enterPropertyAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyAttribute" ):
                listener.exitPropertyAttribute(self)




    def propertyAttribute(self):

        localctx = ObjectiveCParser.PropertyAttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_propertyAttribute)
        try:
            self.state = 485
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 465
                self.match(ObjectiveCParser.ATOMIC)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 466
                self.match(ObjectiveCParser.NONATOMIC)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 467
                self.match(ObjectiveCParser.STRONG)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 468
                self.match(ObjectiveCParser.WEAK)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 469
                self.match(ObjectiveCParser.RETAIN)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 470
                self.match(ObjectiveCParser.ASSIGN)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 471
                self.match(ObjectiveCParser.UNSAFE_UNRETAINED)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 472
                self.match(ObjectiveCParser.COPY)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 473
                self.match(ObjectiveCParser.READONLY)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 474
                self.match(ObjectiveCParser.READWRITE)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 475
                self.match(ObjectiveCParser.GETTER)
                self.state = 476
                self.match(ObjectiveCParser.ASSIGNMENT)
                self.state = 477
                self.identifier()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 478
                self.match(ObjectiveCParser.SETTER)
                self.state = 479
                self.match(ObjectiveCParser.ASSIGNMENT)
                self.state = 480
                self.identifier()
                self.state = 481
                self.match(ObjectiveCParser.COLON)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 483
                self.nullabilitySpecifier()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 484
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProtocolNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(ObjectiveCParser.LT, 0)

        def protocolList(self):
            return self.getTypedRuleContext(ObjectiveCParser.ProtocolListContext,0)


        def GT(self):
            return self.getToken(ObjectiveCParser.GT, 0)

        def identifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.IdentifierContext,0)


        def COVARIANT(self):
            return self.getToken(ObjectiveCParser.COVARIANT, 0)

        def CONTRAVARIANT(self):
            return self.getToken(ObjectiveCParser.CONTRAVARIANT, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_protocolName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProtocolName" ):
                listener.enterProtocolName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProtocolName" ):
                listener.exitProtocolName(self)




    def protocolName(self):

        localctx = ObjectiveCParser.ProtocolNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_protocolName)
        self._la = 0 # Token type
        try:
            self.state = 495
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [139]:
                self.enterOuterAlt(localctx, 1)
                self.state = 487
                self.match(ObjectiveCParser.LT)
                self.state = 488
                self.protocolList()
                self.state = 489
                self.match(ObjectiveCParser.GT)
                pass
            elif token in [40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 81, 82, 83, 85, 86, 88, 89, 90, 91, 92, 93, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 125]:
                self.enterOuterAlt(localctx, 2)
                self.state = 492
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
                if la_ == 1:
                    self.state = 491
                    _la = self._input.LA(1)
                    if not(_la==90 or _la==91):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 494
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InstanceVariablesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(ObjectiveCParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(ObjectiveCParser.RBRACE, 0)

        def visibilitySection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.VisibilitySectionContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.VisibilitySectionContext,i)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_instanceVariables

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstanceVariables" ):
                listener.enterInstanceVariables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstanceVariables" ):
                listener.exitInstanceVariables(self)




    def instanceVariables(self):

        localctx = ObjectiveCParser.InstanceVariablesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_instanceVariables)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 497
            self.match(ObjectiveCParser.LBRACE)
            self.state = 501
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 142143779995789872) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 146366987889467497) != 0):
                self.state = 498
                self.visibilitySection()
                self.state = 503
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 504
            self.match(ObjectiveCParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VisibilitySectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def accessModifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.AccessModifierContext,0)


        def fieldDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.FieldDeclarationContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.FieldDeclarationContext,i)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_visibilitySection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVisibilitySection" ):
                listener.enterVisibilitySection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVisibilitySection" ):
                listener.exitVisibilitySection(self)




    def visibilitySection(self):

        localctx = ObjectiveCParser.VisibilitySectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_visibilitySection)
        try:
            self.state = 518
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [68, 71, 73, 74]:
                self.enterOuterAlt(localctx, 1)
                self.state = 506
                self.accessModifier()
                self.state = 510
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,31,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 507
                        self.fieldDeclaration() 
                    self.state = 512
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,31,self._ctx)

                pass
            elif token in [4, 5, 9, 11, 13, 17, 18, 19, 21, 23, 24, 27, 30, 31, 32, 33, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 125]:
                self.enterOuterAlt(localctx, 2)
                self.state = 514 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 513
                        self.fieldDeclaration()

                    else:
                        raise NoViableAltException(self)
                    self.state = 516 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,32,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AccessModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRIVATE(self):
            return self.getToken(ObjectiveCParser.PRIVATE, 0)

        def PROTECTED(self):
            return self.getToken(ObjectiveCParser.PROTECTED, 0)

        def PACKAGE(self):
            return self.getToken(ObjectiveCParser.PACKAGE, 0)

        def PUBLIC(self):
            return self.getToken(ObjectiveCParser.PUBLIC, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_accessModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccessModifier" ):
                listener.enterAccessModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccessModifier" ):
                listener.exitAccessModifier(self)




    def accessModifier(self):

        localctx = ObjectiveCParser.AccessModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_accessModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 520
            _la = self._input.LA(1)
            if not(((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 105) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceDeclarationListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.DeclarationContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.DeclarationContext,i)


        def classMethodDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.ClassMethodDeclarationContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.ClassMethodDeclarationContext,i)


        def instanceMethodDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.InstanceMethodDeclarationContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.InstanceMethodDeclarationContext,i)


        def propertyDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.PropertyDeclarationContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.PropertyDeclarationContext,i)


        def functionDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.FunctionDeclarationContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.FunctionDeclarationContext,i)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_interfaceDeclarationList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceDeclarationList" ):
                listener.enterInterfaceDeclarationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceDeclarationList" ):
                listener.exitInterfaceDeclarationList(self)




    def interfaceDeclarationList(self):

        localctx = ObjectiveCParser.InterfaceDeclarationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_interfaceDeclarationList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 527 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 527
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
                    if la_ == 1:
                        self.state = 522
                        self.declaration()
                        pass

                    elif la_ == 2:
                        self.state = 523
                        self.classMethodDeclaration()
                        pass

                    elif la_ == 3:
                        self.state = 524
                        self.instanceMethodDeclaration()
                        pass

                    elif la_ == 4:
                        self.state = 525
                        self.propertyDeclaration()
                        pass

                    elif la_ == 5:
                        self.state = 526
                        self.functionDeclaration()
                        pass



                else:
                    raise NoViableAltException(self)
                self.state = 529 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,35,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassMethodDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(ObjectiveCParser.ADD, 0)

        def methodDeclaration(self):
            return self.getTypedRuleContext(ObjectiveCParser.MethodDeclarationContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_classMethodDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassMethodDeclaration" ):
                listener.enterClassMethodDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassMethodDeclaration" ):
                listener.exitClassMethodDeclaration(self)




    def classMethodDeclaration(self):

        localctx = ObjectiveCParser.ClassMethodDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_classMethodDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 531
            self.match(ObjectiveCParser.ADD)
            self.state = 532
            self.methodDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InstanceMethodDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUB(self):
            return self.getToken(ObjectiveCParser.SUB, 0)

        def methodDeclaration(self):
            return self.getTypedRuleContext(ObjectiveCParser.MethodDeclarationContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_instanceMethodDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstanceMethodDeclaration" ):
                listener.enterInstanceMethodDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstanceMethodDeclaration" ):
                listener.exitInstanceMethodDeclaration(self)




    def instanceMethodDeclaration(self):

        localctx = ObjectiveCParser.InstanceMethodDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_instanceMethodDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 534
            self.match(ObjectiveCParser.SUB)
            self.state = 535
            self.methodDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def methodSelector(self):
            return self.getTypedRuleContext(ObjectiveCParser.MethodSelectorContext,0)


        def SEMI(self):
            return self.getToken(ObjectiveCParser.SEMI, 0)

        def methodType(self):
            return self.getTypedRuleContext(ObjectiveCParser.MethodTypeContext,0)


        def macro(self):
            return self.getTypedRuleContext(ObjectiveCParser.MacroContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_methodDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodDeclaration" ):
                listener.enterMethodDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodDeclaration" ):
                listener.exitMethodDeclaration(self)




    def methodDeclaration(self):

        localctx = ObjectiveCParser.MethodDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_methodDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 538
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==126:
                self.state = 537
                self.methodType()


            self.state = 540
            self.methodSelector()
            self.state = 542
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 142143763727253504) != 0) or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & 17867063762871) != 0):
                self.state = 541
                self.macro()


            self.state = 544
            self.match(ObjectiveCParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImplementationDefinitionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.FunctionDefinitionContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.FunctionDefinitionContext,i)


        def declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.DeclarationContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.DeclarationContext,i)


        def classMethodDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.ClassMethodDefinitionContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.ClassMethodDefinitionContext,i)


        def instanceMethodDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.InstanceMethodDefinitionContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.InstanceMethodDefinitionContext,i)


        def propertyImplementation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.PropertyImplementationContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.PropertyImplementationContext,i)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_implementationDefinitionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImplementationDefinitionList" ):
                listener.enterImplementationDefinitionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImplementationDefinitionList" ):
                listener.exitImplementationDefinitionList(self)




    def implementationDefinitionList(self):

        localctx = ObjectiveCParser.ImplementationDefinitionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_implementationDefinitionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 551 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 551
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
                if la_ == 1:
                    self.state = 546
                    self.functionDefinition()
                    pass

                elif la_ == 2:
                    self.state = 547
                    self.declaration()
                    pass

                elif la_ == 3:
                    self.state = 548
                    self.classMethodDefinition()
                    pass

                elif la_ == 4:
                    self.state = 549
                    self.instanceMethodDefinition()
                    pass

                elif la_ == 5:
                    self.state = 550
                    self.propertyImplementation()
                    pass


                self.state = 553 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 2447986789814516274) != 0) or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & 142936511610873) != 0) or _la==152 or _la==153):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassMethodDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(ObjectiveCParser.ADD, 0)

        def methodDefinition(self):
            return self.getTypedRuleContext(ObjectiveCParser.MethodDefinitionContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_classMethodDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassMethodDefinition" ):
                listener.enterClassMethodDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassMethodDefinition" ):
                listener.exitClassMethodDefinition(self)




    def classMethodDefinition(self):

        localctx = ObjectiveCParser.ClassMethodDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_classMethodDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 555
            self.match(ObjectiveCParser.ADD)
            self.state = 556
            self.methodDefinition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InstanceMethodDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUB(self):
            return self.getToken(ObjectiveCParser.SUB, 0)

        def methodDefinition(self):
            return self.getTypedRuleContext(ObjectiveCParser.MethodDefinitionContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_instanceMethodDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstanceMethodDefinition" ):
                listener.enterInstanceMethodDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstanceMethodDefinition" ):
                listener.exitInstanceMethodDefinition(self)




    def instanceMethodDefinition(self):

        localctx = ObjectiveCParser.InstanceMethodDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_instanceMethodDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 558
            self.match(ObjectiveCParser.SUB)
            self.state = 559
            self.methodDefinition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def methodSelector(self):
            return self.getTypedRuleContext(ObjectiveCParser.MethodSelectorContext,0)


        def compoundStatement(self):
            return self.getTypedRuleContext(ObjectiveCParser.CompoundStatementContext,0)


        def methodType(self):
            return self.getTypedRuleContext(ObjectiveCParser.MethodTypeContext,0)


        def initDeclaratorList(self):
            return self.getTypedRuleContext(ObjectiveCParser.InitDeclaratorListContext,0)


        def SEMI(self):
            return self.getToken(ObjectiveCParser.SEMI, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_methodDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodDefinition" ):
                listener.enterMethodDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodDefinition" ):
                listener.exitMethodDefinition(self)




    def methodDefinition(self):

        localctx = ObjectiveCParser.MethodDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_methodDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 562
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==126:
                self.state = 561
                self.methodType()


            self.state = 564
            self.methodSelector()
            self.state = 566
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 40)) & ~0x3f) == 0 and ((1 << (_la - 40)) & -414491694415611649) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & 1125899913166847) != 0):
                self.state = 565
                self.initDeclaratorList()


            self.state = 569
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==132:
                self.state = 568
                self.match(ObjectiveCParser.SEMI)


            self.state = 571
            self.compoundStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodSelectorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selector(self):
            return self.getTypedRuleContext(ObjectiveCParser.SelectorContext,0)


        def keywordDeclarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.KeywordDeclaratorContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.KeywordDeclaratorContext,i)


        def COMMA(self):
            return self.getToken(ObjectiveCParser.COMMA, 0)

        def ELIPSIS(self):
            return self.getToken(ObjectiveCParser.ELIPSIS, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_methodSelector

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodSelector" ):
                listener.enterMethodSelector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodSelector" ):
                listener.exitMethodSelector(self)




    def methodSelector(self):

        localctx = ObjectiveCParser.MethodSelectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_methodSelector)
        self._la = 0 # Token type
        try:
            self.state = 583
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 573
                self.selector()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 575 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 574
                        self.keywordDeclarator()

                    else:
                        raise NoViableAltException(self)
                    self.state = 577 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,43,self._ctx)

                self.state = 581
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==133:
                    self.state = 579
                    self.match(ObjectiveCParser.COMMA)
                    self.state = 580
                    self.match(ObjectiveCParser.ELIPSIS)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywordDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(ObjectiveCParser.COLON, 0)

        def identifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.IdentifierContext,0)


        def selector(self):
            return self.getTypedRuleContext(ObjectiveCParser.SelectorContext,0)


        def methodType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.MethodTypeContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.MethodTypeContext,i)


        def arcBehaviourSpecifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.ArcBehaviourSpecifierContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_keywordDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeywordDeclarator" ):
                listener.enterKeywordDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeywordDeclarator" ):
                listener.exitKeywordDeclarator(self)




    def keywordDeclarator(self):

        localctx = ObjectiveCParser.KeywordDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_keywordDeclarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 586
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 142143763731447808) != 0) or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & 17867063762871) != 0):
                self.state = 585
                self.selector()


            self.state = 588
            self.match(ObjectiveCParser.COLON)
            self.state = 592
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==126:
                self.state = 589
                self.methodType()
                self.state = 594
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 596
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.state = 595
                self.arcBehaviourSpecifier()


            self.state = 598
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.IdentifierContext,0)


        def RETURN(self):
            return self.getToken(ObjectiveCParser.RETURN, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_selector

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelector" ):
                listener.enterSelector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelector" ):
                listener.exitSelector(self)




    def selector(self):

        localctx = ObjectiveCParser.SelectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_selector)
        try:
            self.state = 602
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 81, 82, 83, 85, 86, 88, 89, 90, 91, 92, 93, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 125]:
                self.enterOuterAlt(localctx, 1)
                self.state = 600
                self.identifier()
                pass
            elif token in [22]:
                self.enterOuterAlt(localctx, 2)
                self.state = 601
                self.match(ObjectiveCParser.RETURN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LP(self):
            return self.getToken(ObjectiveCParser.LP, 0)

        def typeName(self):
            return self.getTypedRuleContext(ObjectiveCParser.TypeNameContext,0)


        def RP(self):
            return self.getToken(ObjectiveCParser.RP, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_methodType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodType" ):
                listener.enterMethodType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodType" ):
                listener.exitMethodType(self)




    def methodType(self):

        localctx = ObjectiveCParser.MethodTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_methodType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 604
            self.match(ObjectiveCParser.LP)
            self.state = 605
            self.typeName()
            self.state = 606
            self.match(ObjectiveCParser.RP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyImplementationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SYNTHESIZE(self):
            return self.getToken(ObjectiveCParser.SYNTHESIZE, 0)

        def propertySynthesizeList(self):
            return self.getTypedRuleContext(ObjectiveCParser.PropertySynthesizeListContext,0)


        def SEMI(self):
            return self.getToken(ObjectiveCParser.SEMI, 0)

        def DYNAMIC(self):
            return self.getToken(ObjectiveCParser.DYNAMIC, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_propertyImplementation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyImplementation" ):
                listener.enterPropertyImplementation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyImplementation" ):
                listener.exitPropertyImplementation(self)




    def propertyImplementation(self):

        localctx = ObjectiveCParser.PropertyImplementationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_propertyImplementation)
        try:
            self.state = 616
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [78]:
                self.enterOuterAlt(localctx, 1)
                self.state = 608
                self.match(ObjectiveCParser.SYNTHESIZE)
                self.state = 609
                self.propertySynthesizeList()
                self.state = 610
                self.match(ObjectiveCParser.SEMI)
                pass
            elif token in [61]:
                self.enterOuterAlt(localctx, 2)
                self.state = 612
                self.match(ObjectiveCParser.DYNAMIC)
                self.state = 613
                self.propertySynthesizeList()
                self.state = 614
                self.match(ObjectiveCParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertySynthesizeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def propertySynthesizeItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.PropertySynthesizeItemContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.PropertySynthesizeItemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ObjectiveCParser.COMMA)
            else:
                return self.getToken(ObjectiveCParser.COMMA, i)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_propertySynthesizeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertySynthesizeList" ):
                listener.enterPropertySynthesizeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertySynthesizeList" ):
                listener.exitPropertySynthesizeList(self)




    def propertySynthesizeList(self):

        localctx = ObjectiveCParser.PropertySynthesizeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_propertySynthesizeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 618
            self.propertySynthesizeItem()
            self.state = 623
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==133:
                self.state = 619
                self.match(ObjectiveCParser.COMMA)
                self.state = 620
                self.propertySynthesizeItem()
                self.state = 625
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertySynthesizeItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.IdentifierContext,i)


        def ASSIGNMENT(self):
            return self.getToken(ObjectiveCParser.ASSIGNMENT, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_propertySynthesizeItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertySynthesizeItem" ):
                listener.enterPropertySynthesizeItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertySynthesizeItem" ):
                listener.exitPropertySynthesizeItem(self)




    def propertySynthesizeItem(self):

        localctx = ObjectiveCParser.PropertySynthesizeItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_propertySynthesizeItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 626
            self.identifier()
            self.state = 629
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==137:
                self.state = 627
                self.match(ObjectiveCParser.ASSIGNMENT)
                self.state = 628
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.TypeSpecifierContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.TypeSpecifierContext,i)


        def LP(self):
            return self.getToken(ObjectiveCParser.LP, 0)

        def BITXOR(self):
            return self.getToken(ObjectiveCParser.BITXOR, 0)

        def RP(self):
            return self.getToken(ObjectiveCParser.RP, 0)

        def nullabilitySpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.NullabilitySpecifierContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.NullabilitySpecifierContext,i)


        def blockParameters(self):
            return self.getTypedRuleContext(ObjectiveCParser.BlockParametersContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_blockType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockType" ):
                listener.enterBlockType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockType" ):
                listener.exitBlockType(self)




    def blockType(self):

        localctx = ObjectiveCParser.BlockTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_blockType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 632
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                self.state = 631
                self.nullabilitySpecifier()


            self.state = 634
            self.typeSpecifier()
            self.state = 636
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 99)) & ~0x3f) == 0 and ((1 << (_la - 99)) & 15) != 0):
                self.state = 635
                self.nullabilitySpecifier()


            self.state = 638
            self.match(ObjectiveCParser.LP)
            self.state = 639
            self.match(ObjectiveCParser.BITXOR)
            self.state = 642
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
            if la_ == 1:
                self.state = 640
                self.nullabilitySpecifier()

            elif la_ == 2:
                self.state = 641
                self.typeSpecifier()


            self.state = 644
            self.match(ObjectiveCParser.RP)
            self.state = 646
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==126:
                self.state = 645
                self.blockParameters()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericsSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(ObjectiveCParser.LT, 0)

        def GT(self):
            return self.getToken(ObjectiveCParser.GT, 0)

        def typeSpecifierWithPrefixes(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.TypeSpecifierWithPrefixesContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.TypeSpecifierWithPrefixesContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ObjectiveCParser.COMMA)
            else:
                return self.getToken(ObjectiveCParser.COMMA, i)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_genericsSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericsSpecifier" ):
                listener.enterGenericsSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericsSpecifier" ):
                listener.exitGenericsSpecifier(self)




    def genericsSpecifier(self):

        localctx = ObjectiveCParser.GenericsSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_genericsSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 648
            self.match(ObjectiveCParser.LT)
            self.state = 657
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 142143779995789872) != 0) or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & 17867063951351) != 0):
                self.state = 649
                self.typeSpecifierWithPrefixes()
                self.state = 654
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==133:
                    self.state = 650
                    self.match(ObjectiveCParser.COMMA)
                    self.state = 651
                    self.typeSpecifierWithPrefixes()
                    self.state = 656
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 659
            self.match(ObjectiveCParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeSpecifierWithPrefixesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeSpecifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.TypeSpecifierContext,0)


        def typePrefix(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.TypePrefixContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.TypePrefixContext,i)


        def typeName(self):
            return self.getTypedRuleContext(ObjectiveCParser.TypeNameContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_typeSpecifierWithPrefixes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeSpecifierWithPrefixes" ):
                listener.enterTypeSpecifierWithPrefixes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeSpecifierWithPrefixes" ):
                listener.exitTypeSpecifierWithPrefixes(self)




    def typeSpecifierWithPrefixes(self):

        localctx = ObjectiveCParser.TypeSpecifierWithPrefixesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_typeSpecifierWithPrefixes)
        try:
            self.state = 669
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 664
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,59,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 661
                        self.typePrefix() 
                    self.state = 666
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,59,self._ctx)

                self.state = 667
                self.typeSpecifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 668
                self.typeName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DictionaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(ObjectiveCParser.AT, 0)

        def LBRACE(self):
            return self.getToken(ObjectiveCParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(ObjectiveCParser.RBRACE, 0)

        def dictionaryPair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.DictionaryPairContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.DictionaryPairContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ObjectiveCParser.COMMA)
            else:
                return self.getToken(ObjectiveCParser.COMMA, i)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_dictionaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDictionaryExpression" ):
                listener.enterDictionaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDictionaryExpression" ):
                listener.exitDictionaryExpression(self)




    def dictionaryExpression(self):

        localctx = ObjectiveCParser.DictionaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_dictionaryExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 671
            self.match(ObjectiveCParser.AT)
            self.state = 672
            self.match(ObjectiveCParser.LBRACE)
            self.state = 684
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4899916119734747136) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 2523141690462269569) != 0) or ((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & 4363692523569) != 0):
                self.state = 673
                self.dictionaryPair()
                self.state = 678
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,61,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 674
                        self.match(ObjectiveCParser.COMMA)
                        self.state = 675
                        self.dictionaryPair() 
                    self.state = 680
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,61,self._ctx)

                self.state = 682
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==133:
                    self.state = 681
                    self.match(ObjectiveCParser.COMMA)




            self.state = 686
            self.match(ObjectiveCParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DictionaryPairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def castExpression(self):
            return self.getTypedRuleContext(ObjectiveCParser.CastExpressionContext,0)


        def COLON(self):
            return self.getToken(ObjectiveCParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(ObjectiveCParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_dictionaryPair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDictionaryPair" ):
                listener.enterDictionaryPair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDictionaryPair" ):
                listener.exitDictionaryPair(self)




    def dictionaryPair(self):

        localctx = ObjectiveCParser.DictionaryPairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_dictionaryPair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 688
            self.castExpression()
            self.state = 689
            self.match(ObjectiveCParser.COLON)
            self.state = 690
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(ObjectiveCParser.AT, 0)

        def LBRACK(self):
            return self.getToken(ObjectiveCParser.LBRACK, 0)

        def RBRACK(self):
            return self.getToken(ObjectiveCParser.RBRACK, 0)

        def expressions(self):
            return self.getTypedRuleContext(ObjectiveCParser.ExpressionsContext,0)


        def COMMA(self):
            return self.getToken(ObjectiveCParser.COMMA, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_arrayExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayExpression" ):
                listener.enterArrayExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayExpression" ):
                listener.exitArrayExpression(self)




    def arrayExpression(self):

        localctx = ObjectiveCParser.ArrayExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_arrayExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 692
            self.match(ObjectiveCParser.AT)
            self.state = 693
            self.match(ObjectiveCParser.LBRACK)
            self.state = 698
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4899916119734747136) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 2523141690462269569) != 0) or ((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & 4363692523569) != 0):
                self.state = 694
                self.expressions()
                self.state = 696
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==133:
                    self.state = 695
                    self.match(ObjectiveCParser.COMMA)




            self.state = 700
            self.match(ObjectiveCParser.RBRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoxExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(ObjectiveCParser.AT, 0)

        def LP(self):
            return self.getToken(ObjectiveCParser.LP, 0)

        def expression(self):
            return self.getTypedRuleContext(ObjectiveCParser.ExpressionContext,0)


        def RP(self):
            return self.getToken(ObjectiveCParser.RP, 0)

        def constant(self):
            return self.getTypedRuleContext(ObjectiveCParser.ConstantContext,0)


        def identifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.IdentifierContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_boxExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoxExpression" ):
                listener.enterBoxExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoxExpression" ):
                listener.exitBoxExpression(self)




    def boxExpression(self):

        localctx = ObjectiveCParser.BoxExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_boxExpression)
        try:
            self.state = 712
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 702
                self.match(ObjectiveCParser.AT)
                self.state = 703
                self.match(ObjectiveCParser.LP)
                self.state = 704
                self.expression(0)
                self.state = 705
                self.match(ObjectiveCParser.RP)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 707
                self.match(ObjectiveCParser.AT)
                self.state = 710
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [38, 39, 48, 49, 50, 57, 152, 153, 171, 173, 174, 175, 176, 177]:
                    self.state = 708
                    self.constant()
                    pass
                elif token in [40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 81, 82, 83, 85, 86, 88, 89, 90, 91, 92, 93, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 125]:
                    self.state = 709
                    self.identifier()
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LP(self):
            return self.getToken(ObjectiveCParser.LP, 0)

        def RP(self):
            return self.getToken(ObjectiveCParser.RP, 0)

        def typeVariableDeclaratorOrName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.TypeVariableDeclaratorOrNameContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.TypeVariableDeclaratorOrNameContext,i)


        def VOID(self):
            return self.getToken(ObjectiveCParser.VOID, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ObjectiveCParser.COMMA)
            else:
                return self.getToken(ObjectiveCParser.COMMA, i)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_blockParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockParameters" ):
                listener.enterBlockParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockParameters" ):
                listener.exitBlockParameters(self)




    def blockParameters(self):

        localctx = ObjectiveCParser.BlockParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_blockParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 714
            self.match(ObjectiveCParser.LP)
            self.state = 726
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 142143780063951410) != 0) or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & 17867063951359) != 0):
                self.state = 717
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
                if la_ == 1:
                    self.state = 715
                    self.typeVariableDeclaratorOrName()
                    pass

                elif la_ == 2:
                    self.state = 716
                    self.match(ObjectiveCParser.VOID)
                    pass


                self.state = 723
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==133:
                    self.state = 719
                    self.match(ObjectiveCParser.COMMA)
                    self.state = 720
                    self.typeVariableDeclaratorOrName()
                    self.state = 725
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 728
            self.match(ObjectiveCParser.RP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeVariableDeclaratorOrNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeVariableDeclarator(self):
            return self.getTypedRuleContext(ObjectiveCParser.TypeVariableDeclaratorContext,0)


        def typeName(self):
            return self.getTypedRuleContext(ObjectiveCParser.TypeNameContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_typeVariableDeclaratorOrName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeVariableDeclaratorOrName" ):
                listener.enterTypeVariableDeclaratorOrName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeVariableDeclaratorOrName" ):
                listener.exitTypeVariableDeclaratorOrName(self)




    def typeVariableDeclaratorOrName(self):

        localctx = ObjectiveCParser.TypeVariableDeclaratorOrNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_typeVariableDeclaratorOrName)
        try:
            self.state = 732
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 730
                self.typeVariableDeclarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 731
                self.typeName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BITXOR(self):
            return self.getToken(ObjectiveCParser.BITXOR, 0)

        def compoundStatement(self):
            return self.getTypedRuleContext(ObjectiveCParser.CompoundStatementContext,0)


        def typeSpecifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.TypeSpecifierContext,0)


        def nullabilitySpecifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.NullabilitySpecifierContext,0)


        def blockParameters(self):
            return self.getTypedRuleContext(ObjectiveCParser.BlockParametersContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_blockExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockExpression" ):
                listener.enterBlockExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockExpression" ):
                listener.exitBlockExpression(self)




    def blockExpression(self):

        localctx = ObjectiveCParser.BlockExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_blockExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 734
            self.match(ObjectiveCParser.BITXOR)
            self.state = 736
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
            if la_ == 1:
                self.state = 735
                self.typeSpecifier()


            self.state = 739
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 99)) & ~0x3f) == 0 and ((1 << (_la - 99)) & 15) != 0):
                self.state = 738
                self.nullabilitySpecifier()


            self.state = 742
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==126:
                self.state = 741
                self.blockParameters()


            self.state = 744
            self.compoundStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MessageExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(ObjectiveCParser.LBRACK, 0)

        def receiver(self):
            return self.getTypedRuleContext(ObjectiveCParser.ReceiverContext,0)


        def messageSelector(self):
            return self.getTypedRuleContext(ObjectiveCParser.MessageSelectorContext,0)


        def RBRACK(self):
            return self.getToken(ObjectiveCParser.RBRACK, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_messageExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMessageExpression" ):
                listener.enterMessageExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMessageExpression" ):
                listener.exitMessageExpression(self)




    def messageExpression(self):

        localctx = ObjectiveCParser.MessageExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_messageExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 746
            self.match(ObjectiveCParser.LBRACK)
            self.state = 747
            self.receiver()
            self.state = 748
            self.messageSelector()
            self.state = 749
            self.match(ObjectiveCParser.RBRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReceiverContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(ObjectiveCParser.ExpressionContext,0)


        def typeSpecifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.TypeSpecifierContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_receiver

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReceiver" ):
                listener.enterReceiver(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReceiver" ):
                listener.exitReceiver(self)




    def receiver(self):

        localctx = ObjectiveCParser.ReceiverContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_receiver)
        try:
            self.state = 753
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 751
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 752
                self.typeSpecifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MessageSelectorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selector(self):
            return self.getTypedRuleContext(ObjectiveCParser.SelectorContext,0)


        def keywordArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.KeywordArgumentContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.KeywordArgumentContext,i)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_messageSelector

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMessageSelector" ):
                listener.enterMessageSelector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMessageSelector" ):
                listener.exitMessageSelector(self)




    def messageSelector(self):

        localctx = ObjectiveCParser.MessageSelectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_messageSelector)
        self._la = 0 # Token type
        try:
            self.state = 761
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 755
                self.selector()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 757 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 756
                    self.keywordArgument()
                    self.state = 759 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 142143763731447808) != 0) or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & 4611703885491150775) != 0)):
                        break

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywordArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(ObjectiveCParser.COLON, 0)

        def keywordArgumentType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.KeywordArgumentTypeContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.KeywordArgumentTypeContext,i)


        def selector(self):
            return self.getTypedRuleContext(ObjectiveCParser.SelectorContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ObjectiveCParser.COMMA)
            else:
                return self.getToken(ObjectiveCParser.COMMA, i)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_keywordArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeywordArgument" ):
                listener.enterKeywordArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeywordArgument" ):
                listener.exitKeywordArgument(self)




    def keywordArgument(self):

        localctx = ObjectiveCParser.KeywordArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_keywordArgument)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 764
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 142143763731447808) != 0) or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & 17867063762871) != 0):
                self.state = 763
                self.selector()


            self.state = 766
            self.match(ObjectiveCParser.COLON)
            self.state = 767
            self.keywordArgumentType()
            self.state = 772
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==133:
                self.state = 768
                self.match(ObjectiveCParser.COMMA)
                self.state = 769
                self.keywordArgumentType()
                self.state = 774
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywordArgumentTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressions(self):
            return self.getTypedRuleContext(ObjectiveCParser.ExpressionsContext,0)


        def nullabilitySpecifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.NullabilitySpecifierContext,0)


        def LBRACE(self):
            return self.getToken(ObjectiveCParser.LBRACE, 0)

        def initializerList(self):
            return self.getTypedRuleContext(ObjectiveCParser.InitializerListContext,0)


        def RBRACE(self):
            return self.getToken(ObjectiveCParser.RBRACE, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_keywordArgumentType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeywordArgumentType" ):
                listener.enterKeywordArgumentType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeywordArgumentType" ):
                listener.exitKeywordArgumentType(self)




    def keywordArgumentType(self):

        localctx = ObjectiveCParser.KeywordArgumentTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_keywordArgumentType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 775
            self.expressions()
            self.state = 777
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                self.state = 776
                self.nullabilitySpecifier()


            self.state = 783
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==128:
                self.state = 779
                self.match(ObjectiveCParser.LBRACE)
                self.state = 780
                self.initializerList()
                self.state = 781
                self.match(ObjectiveCParser.RBRACE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECTOR(self):
            return self.getToken(ObjectiveCParser.SELECTOR, 0)

        def LP(self):
            return self.getToken(ObjectiveCParser.LP, 0)

        def selectorName(self):
            return self.getTypedRuleContext(ObjectiveCParser.SelectorNameContext,0)


        def RP(self):
            return self.getToken(ObjectiveCParser.RP, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_selectorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectorExpression" ):
                listener.enterSelectorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectorExpression" ):
                listener.exitSelectorExpression(self)




    def selectorExpression(self):

        localctx = ObjectiveCParser.SelectorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_selectorExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 785
            self.match(ObjectiveCParser.SELECTOR)
            self.state = 786
            self.match(ObjectiveCParser.LP)
            self.state = 787
            self.selectorName()
            self.state = 788
            self.match(ObjectiveCParser.RP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectorNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selector(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.SelectorContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.SelectorContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(ObjectiveCParser.COLON)
            else:
                return self.getToken(ObjectiveCParser.COLON, i)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_selectorName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectorName" ):
                listener.enterSelectorName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectorName" ):
                listener.exitSelectorName(self)




    def selectorName(self):

        localctx = ObjectiveCParser.SelectorNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_selectorName)
        self._la = 0 # Token type
        try:
            self.state = 799
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 790
                self.selector()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 795 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 792
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 142143763731447808) != 0) or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & 17867063762871) != 0):
                        self.state = 791
                        self.selector()


                    self.state = 794
                    self.match(ObjectiveCParser.COLON)
                    self.state = 797 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 142143763731447808) != 0) or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & 4611703885491150775) != 0)):
                        break

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProtocolExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROTOCOL(self):
            return self.getToken(ObjectiveCParser.PROTOCOL, 0)

        def LP(self):
            return self.getToken(ObjectiveCParser.LP, 0)

        def protocolName(self):
            return self.getTypedRuleContext(ObjectiveCParser.ProtocolNameContext,0)


        def RP(self):
            return self.getToken(ObjectiveCParser.RP, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_protocolExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProtocolExpression" ):
                listener.enterProtocolExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProtocolExpression" ):
                listener.exitProtocolExpression(self)




    def protocolExpression(self):

        localctx = ObjectiveCParser.ProtocolExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_protocolExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 801
            self.match(ObjectiveCParser.PROTOCOL)
            self.state = 802
            self.match(ObjectiveCParser.LP)
            self.state = 803
            self.protocolName()
            self.state = 804
            self.match(ObjectiveCParser.RP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EncodeExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENCODE(self):
            return self.getToken(ObjectiveCParser.ENCODE, 0)

        def LP(self):
            return self.getToken(ObjectiveCParser.LP, 0)

        def typeName(self):
            return self.getTypedRuleContext(ObjectiveCParser.TypeNameContext,0)


        def RP(self):
            return self.getToken(ObjectiveCParser.RP, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_encodeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEncodeExpression" ):
                listener.enterEncodeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEncodeExpression" ):
                listener.exitEncodeExpression(self)




    def encodeExpression(self):

        localctx = ObjectiveCParser.EncodeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_encodeExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 806
            self.match(ObjectiveCParser.ENCODE)
            self.state = 807
            self.match(ObjectiveCParser.LP)
            self.state = 808
            self.typeName()
            self.state = 809
            self.match(ObjectiveCParser.RP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeVariableDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifiers(self):
            return self.getTypedRuleContext(ObjectiveCParser.DeclarationSpecifiersContext,0)


        def declarator(self):
            return self.getTypedRuleContext(ObjectiveCParser.DeclaratorContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_typeVariableDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeVariableDeclarator" ):
                listener.enterTypeVariableDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeVariableDeclarator" ):
                listener.exitTypeVariableDeclarator(self)




    def typeVariableDeclarator(self):

        localctx = ObjectiveCParser.TypeVariableDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_typeVariableDeclarator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 811
            self.declarationSpecifiers()
            self.state = 812
            self.declarator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThrowStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THROW(self):
            return self.getToken(ObjectiveCParser.THROW, 0)

        def LP(self):
            return self.getToken(ObjectiveCParser.LP, 0)

        def identifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.IdentifierContext,0)


        def RP(self):
            return self.getToken(ObjectiveCParser.RP, 0)

        def expression(self):
            return self.getTypedRuleContext(ObjectiveCParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_throwStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrowStatement" ):
                listener.enterThrowStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrowStatement" ):
                listener.exitThrowStatement(self)




    def throwStatement(self):

        localctx = ObjectiveCParser.ThrowStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_throwStatement)
        try:
            self.state = 821
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 814
                self.match(ObjectiveCParser.THROW)
                self.state = 815
                self.match(ObjectiveCParser.LP)
                self.state = 816
                self.identifier()
                self.state = 817
                self.match(ObjectiveCParser.RP)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 819
                self.match(ObjectiveCParser.THROW)
                self.state = 820
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.tryStatement = None # CompoundStatementContext
            self.finallyStatement = None # CompoundStatementContext

        def TRY(self):
            return self.getToken(ObjectiveCParser.TRY, 0)

        def compoundStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.CompoundStatementContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.CompoundStatementContext,i)


        def catchStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.CatchStatementContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.CatchStatementContext,i)


        def FINALLY(self):
            return self.getToken(ObjectiveCParser.FINALLY, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_tryBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryBlock" ):
                listener.enterTryBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryBlock" ):
                listener.exitTryBlock(self)




    def tryBlock(self):

        localctx = ObjectiveCParser.TryBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_tryBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 823
            self.match(ObjectiveCParser.TRY)
            self.state = 824
            localctx.tryStatement = self.compoundStatement()
            self.state = 828
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==59:
                self.state = 825
                self.catchStatement()
                self.state = 830
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 833
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==64:
                self.state = 831
                self.match(ObjectiveCParser.FINALLY)
                self.state = 832
                localctx.finallyStatement = self.compoundStatement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CatchStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CATCH(self):
            return self.getToken(ObjectiveCParser.CATCH, 0)

        def LP(self):
            return self.getToken(ObjectiveCParser.LP, 0)

        def typeVariableDeclarator(self):
            return self.getTypedRuleContext(ObjectiveCParser.TypeVariableDeclaratorContext,0)


        def RP(self):
            return self.getToken(ObjectiveCParser.RP, 0)

        def compoundStatement(self):
            return self.getTypedRuleContext(ObjectiveCParser.CompoundStatementContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_catchStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatchStatement" ):
                listener.enterCatchStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatchStatement" ):
                listener.exitCatchStatement(self)




    def catchStatement(self):

        localctx = ObjectiveCParser.CatchStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_catchStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 835
            self.match(ObjectiveCParser.CATCH)
            self.state = 836
            self.match(ObjectiveCParser.LP)
            self.state = 837
            self.typeVariableDeclarator()
            self.state = 838
            self.match(ObjectiveCParser.RP)
            self.state = 839
            self.compoundStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SynchronizedStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SYNCHRONIZED(self):
            return self.getToken(ObjectiveCParser.SYNCHRONIZED, 0)

        def LP(self):
            return self.getToken(ObjectiveCParser.LP, 0)

        def expression(self):
            return self.getTypedRuleContext(ObjectiveCParser.ExpressionContext,0)


        def RP(self):
            return self.getToken(ObjectiveCParser.RP, 0)

        def compoundStatement(self):
            return self.getTypedRuleContext(ObjectiveCParser.CompoundStatementContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_synchronizedStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSynchronizedStatement" ):
                listener.enterSynchronizedStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSynchronizedStatement" ):
                listener.exitSynchronizedStatement(self)




    def synchronizedStatement(self):

        localctx = ObjectiveCParser.SynchronizedStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_synchronizedStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 841
            self.match(ObjectiveCParser.SYNCHRONIZED)
            self.state = 842
            self.match(ObjectiveCParser.LP)
            self.state = 843
            self.expression(0)
            self.state = 844
            self.match(ObjectiveCParser.RP)
            self.state = 845
            self.compoundStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AutoreleaseStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTORELEASEPOOL(self):
            return self.getToken(ObjectiveCParser.AUTORELEASEPOOL, 0)

        def compoundStatement(self):
            return self.getTypedRuleContext(ObjectiveCParser.CompoundStatementContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_autoreleaseStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAutoreleaseStatement" ):
                listener.enterAutoreleaseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAutoreleaseStatement" ):
                listener.exitAutoreleaseStatement(self)




    def autoreleaseStatement(self):

        localctx = ObjectiveCParser.AutoreleaseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_autoreleaseStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 847
            self.match(ObjectiveCParser.AUTORELEASEPOOL)
            self.state = 848
            self.compoundStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionSignature(self):
            return self.getTypedRuleContext(ObjectiveCParser.FunctionSignatureContext,0)


        def SEMI(self):
            return self.getToken(ObjectiveCParser.SEMI, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_functionDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDeclaration" ):
                listener.enterFunctionDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDeclaration" ):
                listener.exitFunctionDeclaration(self)




    def functionDeclaration(self):

        localctx = ObjectiveCParser.FunctionDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_functionDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 850
            self.functionSignature()
            self.state = 851
            self.match(ObjectiveCParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionSignature(self):
            return self.getTypedRuleContext(ObjectiveCParser.FunctionSignatureContext,0)


        def compoundStatement(self):
            return self.getTypedRuleContext(ObjectiveCParser.CompoundStatementContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_functionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDefinition" ):
                listener.enterFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDefinition" ):
                listener.exitFunctionDefinition(self)




    def functionDefinition(self):

        localctx = ObjectiveCParser.FunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_functionDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 853
            self.functionSignature()
            self.state = 854
            self.compoundStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionSignatureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.IdentifierContext,0)


        def LP(self):
            return self.getToken(ObjectiveCParser.LP, 0)

        def RP(self):
            return self.getToken(ObjectiveCParser.RP, 0)

        def declarationSpecifiers(self):
            return self.getTypedRuleContext(ObjectiveCParser.DeclarationSpecifiersContext,0)


        def attributeSpecifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.AttributeSpecifierContext,0)


        def parameterList(self):
            return self.getTypedRuleContext(ObjectiveCParser.ParameterListContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_functionSignature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionSignature" ):
                listener.enterFunctionSignature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionSignature" ):
                listener.exitFunctionSignature(self)




    def functionSignature(self):

        localctx = ObjectiveCParser.FunctionSignatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_functionSignature)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 857
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                self.state = 856
                self.declarationSpecifiers()


            self.state = 859
            self.identifier()

            self.state = 860
            self.match(ObjectiveCParser.LP)
            self.state = 862
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 142143780063951410) != 0) or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & 17867063951359) != 0):
                self.state = 861
                self.parameterList()


            self.state = 864
            self.match(ObjectiveCParser.RP)
            self.state = 867
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==84:
                self.state = 866
                self.attributeSpecifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributeName(self):
            return self.getTypedRuleContext(ObjectiveCParser.AttributeNameContext,0)


        def attributeParameters(self):
            return self.getTypedRuleContext(ObjectiveCParser.AttributeParametersContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute" ):
                listener.enterAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute" ):
                listener.exitAttribute(self)




    def attribute(self):

        localctx = ObjectiveCParser.AttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_attribute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 869
            self.attributeName()
            self.state = 871
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==126:
                self.state = 870
                self.attributeParameters()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONST(self):
            return self.getToken(ObjectiveCParser.CONST, 0)

        def identifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.IdentifierContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_attributeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributeName" ):
                listener.enterAttributeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributeName" ):
                listener.exitAttributeName(self)




    def attributeName(self):

        localctx = ObjectiveCParser.AttributeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_attributeName)
        try:
            self.state = 875
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5]:
                self.enterOuterAlt(localctx, 1)
                self.state = 873
                self.match(ObjectiveCParser.CONST)
                pass
            elif token in [40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 81, 82, 83, 85, 86, 88, 89, 90, 91, 92, 93, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 125]:
                self.enterOuterAlt(localctx, 2)
                self.state = 874
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LP(self):
            return self.getToken(ObjectiveCParser.LP, 0)

        def RP(self):
            return self.getToken(ObjectiveCParser.RP, 0)

        def attributeParameterList(self):
            return self.getTypedRuleContext(ObjectiveCParser.AttributeParameterListContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_attributeParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributeParameters" ):
                listener.enterAttributeParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributeParameters" ):
                listener.exitAttributeParameters(self)




    def attributeParameters(self):

        localctx = ObjectiveCParser.AttributeParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_attributeParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 877
            self.match(ObjectiveCParser.LP)
            self.state = 879
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 288230101273804832) != 0) or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & 17867063762871) != 0) or ((((_la - 152)) & ~0x3f) == 0 and ((1 << (_la - 152)) & 66584579) != 0):
                self.state = 878
                self.attributeParameterList()


            self.state = 881
            self.match(ObjectiveCParser.RP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributeParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.AttributeParameterContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.AttributeParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ObjectiveCParser.COMMA)
            else:
                return self.getToken(ObjectiveCParser.COMMA, i)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_attributeParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributeParameterList" ):
                listener.enterAttributeParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributeParameterList" ):
                listener.exitAttributeParameterList(self)




    def attributeParameterList(self):

        localctx = ObjectiveCParser.AttributeParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_attributeParameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 883
            self.attributeParameter()
            self.state = 888
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==133:
                self.state = 884
                self.match(ObjectiveCParser.COMMA)
                self.state = 885
                self.attributeParameter()
                self.state = 890
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attribute(self):
            return self.getTypedRuleContext(ObjectiveCParser.AttributeContext,0)


        def constant(self):
            return self.getTypedRuleContext(ObjectiveCParser.ConstantContext,0)


        def stringLiteral(self):
            return self.getTypedRuleContext(ObjectiveCParser.StringLiteralContext,0)


        def attributeParameterAssignment(self):
            return self.getTypedRuleContext(ObjectiveCParser.AttributeParameterAssignmentContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_attributeParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributeParameter" ):
                listener.enterAttributeParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributeParameter" ):
                listener.exitAttributeParameter(self)




    def attributeParameter(self):

        localctx = ObjectiveCParser.AttributeParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_attributeParameter)
        try:
            self.state = 895
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 891
                self.attribute()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 892
                self.constant()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 893
                self.stringLiteral()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 894
                self.attributeParameterAssignment()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeParameterAssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributeName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.AttributeNameContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.AttributeNameContext,i)


        def ASSIGNMENT(self):
            return self.getToken(ObjectiveCParser.ASSIGNMENT, 0)

        def constant(self):
            return self.getTypedRuleContext(ObjectiveCParser.ConstantContext,0)


        def stringLiteral(self):
            return self.getTypedRuleContext(ObjectiveCParser.StringLiteralContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_attributeParameterAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributeParameterAssignment" ):
                listener.enterAttributeParameterAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributeParameterAssignment" ):
                listener.exitAttributeParameterAssignment(self)




    def attributeParameterAssignment(self):

        localctx = ObjectiveCParser.AttributeParameterAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_attributeParameterAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 897
            self.attributeName()
            self.state = 898
            self.match(ObjectiveCParser.ASSIGNMENT)
            self.state = 902
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [38, 39, 48, 49, 50, 57, 152, 153, 171, 173, 174, 175, 176, 177]:
                self.state = 899
                self.constant()
                pass
            elif token in [5, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 81, 82, 83, 85, 86, 88, 89, 90, 91, 92, 93, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 125]:
                self.state = 900
                self.attributeName()
                pass
            elif token in [172]:
                self.state = 901
                self.stringLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionCallExpression(self):
            return self.getTypedRuleContext(ObjectiveCParser.FunctionCallExpressionContext,0)


        def enumDeclaration(self):
            return self.getTypedRuleContext(ObjectiveCParser.EnumDeclarationContext,0)


        def varDeclaration(self):
            return self.getTypedRuleContext(ObjectiveCParser.VarDeclarationContext,0)


        def typedefDeclaration(self):
            return self.getTypedRuleContext(ObjectiveCParser.TypedefDeclarationContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration" ):
                listener.enterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration" ):
                listener.exitDeclaration(self)




    def declaration(self):

        localctx = ObjectiveCParser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_declaration)
        try:
            self.state = 908
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 904
                self.functionCallExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 905
                self.enumDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 906
                self.varDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 907
                self.typedefDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.IdentifierContext,0)


        def LP(self):
            return self.getToken(ObjectiveCParser.LP, 0)

        def directDeclarator(self):
            return self.getTypedRuleContext(ObjectiveCParser.DirectDeclaratorContext,0)


        def RP(self):
            return self.getToken(ObjectiveCParser.RP, 0)

        def SEMI(self):
            return self.getToken(ObjectiveCParser.SEMI, 0)

        def attributeSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.AttributeSpecifierContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.AttributeSpecifierContext,i)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_functionCallExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCallExpression" ):
                listener.enterFunctionCallExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCallExpression" ):
                listener.exitFunctionCallExpression(self)




    def functionCallExpression(self):

        localctx = ObjectiveCParser.FunctionCallExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_functionCallExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 911
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==84:
                self.state = 910
                self.attributeSpecifier()


            self.state = 913
            self.identifier()
            self.state = 915
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==84:
                self.state = 914
                self.attributeSpecifier()


            self.state = 917
            self.match(ObjectiveCParser.LP)
            self.state = 918
            self.directDeclarator()
            self.state = 919
            self.match(ObjectiveCParser.RP)
            self.state = 920
            self.match(ObjectiveCParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumSpecifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.EnumSpecifierContext,0)


        def SEMI(self):
            return self.getToken(ObjectiveCParser.SEMI, 0)

        def attributeSpecifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.AttributeSpecifierContext,0)


        def TYPEDEF(self):
            return self.getToken(ObjectiveCParser.TYPEDEF, 0)

        def identifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.IdentifierContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_enumDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumDeclaration" ):
                listener.enterEnumDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumDeclaration" ):
                listener.exitEnumDeclaration(self)




    def enumDeclaration(self):

        localctx = ObjectiveCParser.EnumDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_enumDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 923
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==84:
                self.state = 922
                self.attributeSpecifier()


            self.state = 926
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==29:
                self.state = 925
                self.match(ObjectiveCParser.TYPEDEF)


            self.state = 928
            self.enumSpecifier()
            self.state = 930
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 142143763727253504) != 0) or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & 17867063762871) != 0):
                self.state = 929
                self.identifier()


            self.state = 932
            self.match(ObjectiveCParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMI(self):
            return self.getToken(ObjectiveCParser.SEMI, 0)

        def declarationSpecifiers(self):
            return self.getTypedRuleContext(ObjectiveCParser.DeclarationSpecifiersContext,0)


        def initDeclaratorList(self):
            return self.getTypedRuleContext(ObjectiveCParser.InitDeclaratorListContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_varDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarDeclaration" ):
                listener.enterVarDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarDeclaration" ):
                listener.exitVarDeclaration(self)




    def varDeclaration(self):

        localctx = ObjectiveCParser.VarDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_varDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 938
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                self.state = 934
                self.declarationSpecifiers()
                self.state = 935
                self.initDeclaratorList()
                pass

            elif la_ == 2:
                self.state = 937
                self.declarationSpecifiers()
                pass


            self.state = 940
            self.match(ObjectiveCParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypedefDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPEDEF(self):
            return self.getToken(ObjectiveCParser.TYPEDEF, 0)

        def SEMI(self):
            return self.getToken(ObjectiveCParser.SEMI, 0)

        def declarationSpecifiers(self):
            return self.getTypedRuleContext(ObjectiveCParser.DeclarationSpecifiersContext,0)


        def typeDeclaratorList(self):
            return self.getTypedRuleContext(ObjectiveCParser.TypeDeclaratorListContext,0)


        def attributeSpecifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.AttributeSpecifierContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_typedefDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedefDeclaration" ):
                listener.enterTypedefDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedefDeclaration" ):
                listener.exitTypedefDeclaration(self)




    def typedefDeclaration(self):

        localctx = ObjectiveCParser.TypedefDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_typedefDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 943
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==84:
                self.state = 942
                self.attributeSpecifier()


            self.state = 945
            self.match(ObjectiveCParser.TYPEDEF)
            self.state = 950
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
            if la_ == 1:
                self.state = 946
                self.declarationSpecifiers()
                self.state = 947
                self.typeDeclaratorList()
                pass

            elif la_ == 2:
                self.state = 949
                self.declarationSpecifiers()
                pass


            self.state = 952
            self.match(ObjectiveCParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeDeclaratorListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeDeclarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.TypeDeclaratorContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.TypeDeclaratorContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ObjectiveCParser.COMMA)
            else:
                return self.getToken(ObjectiveCParser.COMMA, i)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_typeDeclaratorList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeDeclaratorList" ):
                listener.enterTypeDeclaratorList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeDeclaratorList" ):
                listener.exitTypeDeclaratorList(self)




    def typeDeclaratorList(self):

        localctx = ObjectiveCParser.TypeDeclaratorListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_typeDeclaratorList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 954
            self.typeDeclarator()
            self.state = 959
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==133:
                self.state = 955
                self.match(ObjectiveCParser.COMMA)
                self.state = 956
                self.typeDeclarator()
                self.state = 961
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def directDeclarator(self):
            return self.getTypedRuleContext(ObjectiveCParser.DirectDeclaratorContext,0)


        def pointer(self):
            return self.getTypedRuleContext(ObjectiveCParser.PointerContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_typeDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeDeclarator" ):
                listener.enterTypeDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeDeclarator" ):
                listener.exitTypeDeclarator(self)




    def typeDeclarator(self):

        localctx = ObjectiveCParser.TypeDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_typeDeclarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 963
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==154:
                self.state = 962
                self.pointer()


            self.state = 965
            self.directDeclarator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationSpecifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def storageClassSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.StorageClassSpecifierContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.StorageClassSpecifierContext,i)


        def attributeSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.AttributeSpecifierContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.AttributeSpecifierContext,i)


        def arcBehaviourSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.ArcBehaviourSpecifierContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.ArcBehaviourSpecifierContext,i)


        def nullabilitySpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.NullabilitySpecifierContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.NullabilitySpecifierContext,i)


        def ibOutletQualifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.IbOutletQualifierContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.IbOutletQualifierContext,i)


        def typePrefix(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.TypePrefixContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.TypePrefixContext,i)


        def typeQualifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.TypeQualifierContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.TypeQualifierContext,i)


        def typeSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.TypeSpecifierContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.TypeSpecifierContext,i)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_declarationSpecifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationSpecifiers" ):
                listener.enterDeclarationSpecifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationSpecifiers" ):
                listener.exitDeclarationSpecifiers(self)




    def declarationSpecifiers(self):

        localctx = ObjectiveCParser.DeclarationSpecifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_declarationSpecifiers)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 975 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 975
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
                    if la_ == 1:
                        self.state = 967
                        self.storageClassSpecifier()
                        pass

                    elif la_ == 2:
                        self.state = 968
                        self.attributeSpecifier()
                        pass

                    elif la_ == 3:
                        self.state = 969
                        self.arcBehaviourSpecifier()
                        pass

                    elif la_ == 4:
                        self.state = 970
                        self.nullabilitySpecifier()
                        pass

                    elif la_ == 5:
                        self.state = 971
                        self.ibOutletQualifier()
                        pass

                    elif la_ == 6:
                        self.state = 972
                        self.typePrefix()
                        pass

                    elif la_ == 7:
                        self.state = 973
                        self.typeQualifier()
                        pass

                    elif la_ == 8:
                        self.state = 974
                        self.typeSpecifier()
                        pass



                else:
                    raise NoViableAltException(self)
                self.state = 977 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,109,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ATTRIBUTE(self):
            return self.getToken(ObjectiveCParser.ATTRIBUTE, 0)

        def LP(self, i:int=None):
            if i is None:
                return self.getTokens(ObjectiveCParser.LP)
            else:
                return self.getToken(ObjectiveCParser.LP, i)

        def attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.AttributeContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.AttributeContext,i)


        def RP(self, i:int=None):
            if i is None:
                return self.getTokens(ObjectiveCParser.RP)
            else:
                return self.getToken(ObjectiveCParser.RP, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ObjectiveCParser.COMMA)
            else:
                return self.getToken(ObjectiveCParser.COMMA, i)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_attributeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributeSpecifier" ):
                listener.enterAttributeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributeSpecifier" ):
                listener.exitAttributeSpecifier(self)




    def attributeSpecifier(self):

        localctx = ObjectiveCParser.AttributeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_attributeSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 979
            self.match(ObjectiveCParser.ATTRIBUTE)
            self.state = 980
            self.match(ObjectiveCParser.LP)
            self.state = 981
            self.match(ObjectiveCParser.LP)
            self.state = 982
            self.attribute()
            self.state = 987
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==133:
                self.state = 983
                self.match(ObjectiveCParser.COMMA)
                self.state = 984
                self.attribute()
                self.state = 989
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 990
            self.match(ObjectiveCParser.RP)
            self.state = 991
            self.match(ObjectiveCParser.RP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitDeclaratorListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initDeclarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.InitDeclaratorContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.InitDeclaratorContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ObjectiveCParser.COMMA)
            else:
                return self.getToken(ObjectiveCParser.COMMA, i)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_initDeclaratorList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitDeclaratorList" ):
                listener.enterInitDeclaratorList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitDeclaratorList" ):
                listener.exitInitDeclaratorList(self)




    def initDeclaratorList(self):

        localctx = ObjectiveCParser.InitDeclaratorListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_initDeclaratorList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 993
            self.initDeclarator()
            self.state = 998
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==133:
                self.state = 994
                self.match(ObjectiveCParser.COMMA)
                self.state = 995
                self.initDeclarator()
                self.state = 1000
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(ObjectiveCParser.DeclaratorContext,0)


        def ASSIGNMENT(self):
            return self.getToken(ObjectiveCParser.ASSIGNMENT, 0)

        def initializer(self):
            return self.getTypedRuleContext(ObjectiveCParser.InitializerContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_initDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitDeclarator" ):
                listener.enterInitDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitDeclarator" ):
                listener.exitInitDeclarator(self)




    def initDeclarator(self):

        localctx = ObjectiveCParser.InitDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_initDeclarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1001
            self.declarator()
            self.state = 1004
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==137:
                self.state = 1002
                self.match(ObjectiveCParser.ASSIGNMENT)
                self.state = 1003
                self.initializer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructOrUnionSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRUCT(self):
            return self.getToken(ObjectiveCParser.STRUCT, 0)

        def UNION(self):
            return self.getToken(ObjectiveCParser.UNION, 0)

        def identifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.IdentifierContext,0)


        def LBRACE(self):
            return self.getToken(ObjectiveCParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(ObjectiveCParser.RBRACE, 0)

        def fieldDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.FieldDeclarationContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.FieldDeclarationContext,i)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_structOrUnionSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructOrUnionSpecifier" ):
                listener.enterStructOrUnionSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructOrUnionSpecifier" ):
                listener.exitStructOrUnionSpecifier(self)




    def structOrUnionSpecifier(self):

        localctx = ObjectiveCParser.StructOrUnionSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_structOrUnionSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1006
            _la = self._input.LA(1)
            if not(_la==27 or _la==30):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1019
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
            if la_ == 1:
                self.state = 1007
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 1009
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 142143763727253504) != 0) or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & 17867063762871) != 0):
                    self.state = 1008
                    self.identifier()


                self.state = 1011
                self.match(ObjectiveCParser.LBRACE)
                self.state = 1013 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1012
                    self.fieldDeclaration()
                    self.state = 1015 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 142143779995789872) != 0) or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & 17867063951351) != 0)):
                        break

                self.state = 1017
                self.match(ObjectiveCParser.RBRACE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def specifierQualifierList(self):
            return self.getTypedRuleContext(ObjectiveCParser.SpecifierQualifierListContext,0)


        def fieldDeclaratorList(self):
            return self.getTypedRuleContext(ObjectiveCParser.FieldDeclaratorListContext,0)


        def SEMI(self):
            return self.getToken(ObjectiveCParser.SEMI, 0)

        def macro(self):
            return self.getTypedRuleContext(ObjectiveCParser.MacroContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_fieldDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldDeclaration" ):
                listener.enterFieldDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldDeclaration" ):
                listener.exitFieldDeclaration(self)




    def fieldDeclaration(self):

        localctx = ObjectiveCParser.FieldDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_fieldDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1021
            self.specifierQualifierList()
            self.state = 1022
            self.fieldDeclaratorList()
            self.state = 1024
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 142143763727253504) != 0) or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & 17867063762871) != 0):
                self.state = 1023
                self.macro()


            self.state = 1026
            self.match(ObjectiveCParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpecifierQualifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arcBehaviourSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.ArcBehaviourSpecifierContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.ArcBehaviourSpecifierContext,i)


        def nullabilitySpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.NullabilitySpecifierContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.NullabilitySpecifierContext,i)


        def ibOutletQualifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.IbOutletQualifierContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.IbOutletQualifierContext,i)


        def typePrefix(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.TypePrefixContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.TypePrefixContext,i)


        def typeQualifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.TypeQualifierContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.TypeQualifierContext,i)


        def typeSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.TypeSpecifierContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.TypeSpecifierContext,i)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_specifierQualifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecifierQualifierList" ):
                listener.enterSpecifierQualifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecifierQualifierList" ):
                listener.exitSpecifierQualifierList(self)




    def specifierQualifierList(self):

        localctx = ObjectiveCParser.SpecifierQualifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_specifierQualifierList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1034 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1034
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
                    if la_ == 1:
                        self.state = 1028
                        self.arcBehaviourSpecifier()
                        pass

                    elif la_ == 2:
                        self.state = 1029
                        self.nullabilitySpecifier()
                        pass

                    elif la_ == 3:
                        self.state = 1030
                        self.ibOutletQualifier()
                        pass

                    elif la_ == 4:
                        self.state = 1031
                        self.typePrefix()
                        pass

                    elif la_ == 5:
                        self.state = 1032
                        self.typeQualifier()
                        pass

                    elif la_ == 6:
                        self.state = 1033
                        self.typeSpecifier()
                        pass



                else:
                    raise NoViableAltException(self)
                self.state = 1036 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,118,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IbOutletQualifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IB_OUTLET_COLLECTION(self):
            return self.getToken(ObjectiveCParser.IB_OUTLET_COLLECTION, 0)

        def LP(self):
            return self.getToken(ObjectiveCParser.LP, 0)

        def identifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.IdentifierContext,0)


        def RP(self):
            return self.getToken(ObjectiveCParser.RP, 0)

        def IB_OUTLET(self):
            return self.getToken(ObjectiveCParser.IB_OUTLET, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_ibOutletQualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIbOutletQualifier" ):
                listener.enterIbOutletQualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIbOutletQualifier" ):
                listener.exitIbOutletQualifier(self)




    def ibOutletQualifier(self):

        localctx = ObjectiveCParser.IbOutletQualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_ibOutletQualifier)
        try:
            self.state = 1044
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [116]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1038
                self.match(ObjectiveCParser.IB_OUTLET_COLLECTION)
                self.state = 1039
                self.match(ObjectiveCParser.LP)
                self.state = 1040
                self.identifier()
                self.state = 1041
                self.match(ObjectiveCParser.RP)
                pass
            elif token in [115]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1043
                self.match(ObjectiveCParser.IB_OUTLET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArcBehaviourSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WEAK_QUALIFIER(self):
            return self.getToken(ObjectiveCParser.WEAK_QUALIFIER, 0)

        def STRONG_QUALIFIER(self):
            return self.getToken(ObjectiveCParser.STRONG_QUALIFIER, 0)

        def AUTORELEASING_QUALIFIER(self):
            return self.getToken(ObjectiveCParser.AUTORELEASING_QUALIFIER, 0)

        def UNSAFE_UNRETAINED_QUALIFIER(self):
            return self.getToken(ObjectiveCParser.UNSAFE_UNRETAINED_QUALIFIER, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_arcBehaviourSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArcBehaviourSpecifier" ):
                listener.enterArcBehaviourSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArcBehaviourSpecifier" ):
                listener.exitArcBehaviourSpecifier(self)




    def arcBehaviourSpecifier(self):

        localctx = ObjectiveCParser.ArcBehaviourSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_arcBehaviourSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1046
            _la = self._input.LA(1)
            if not(((((_la - 85)) & ~0x3f) == 0 and ((1 << (_la - 85)) & 10753) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NullabilitySpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL_UNSPECIFIED(self):
            return self.getToken(ObjectiveCParser.NULL_UNSPECIFIED, 0)

        def NULLABLE(self):
            return self.getToken(ObjectiveCParser.NULLABLE, 0)

        def NONNULL(self):
            return self.getToken(ObjectiveCParser.NONNULL, 0)

        def NULL_RESETTABLE(self):
            return self.getToken(ObjectiveCParser.NULL_RESETTABLE, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_nullabilitySpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullabilitySpecifier" ):
                listener.enterNullabilitySpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullabilitySpecifier" ):
                listener.exitNullabilitySpecifier(self)




    def nullabilitySpecifier(self):

        localctx = ObjectiveCParser.NullabilitySpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_nullabilitySpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1048
            _la = self._input.LA(1)
            if not(((((_la - 99)) & ~0x3f) == 0 and ((1 << (_la - 99)) & 15) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StorageClassSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTO(self):
            return self.getToken(ObjectiveCParser.AUTO, 0)

        def REGISTER(self):
            return self.getToken(ObjectiveCParser.REGISTER, 0)

        def STATIC(self):
            return self.getToken(ObjectiveCParser.STATIC, 0)

        def EXTERN(self):
            return self.getToken(ObjectiveCParser.EXTERN, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_storageClassSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStorageClassSpecifier" ):
                listener.enterStorageClassSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStorageClassSpecifier" ):
                listener.exitStorageClassSpecifier(self)




    def storageClassSpecifier(self):

        localctx = ObjectiveCParser.StorageClassSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_storageClassSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1050
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 68161538) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypePrefixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BRIDGE(self):
            return self.getToken(ObjectiveCParser.BRIDGE, 0)

        def BRIDGE_TRANSFER(self):
            return self.getToken(ObjectiveCParser.BRIDGE_TRANSFER, 0)

        def BRIDGE_RETAINED(self):
            return self.getToken(ObjectiveCParser.BRIDGE_RETAINED, 0)

        def BLOCK(self):
            return self.getToken(ObjectiveCParser.BLOCK, 0)

        def INLINE(self):
            return self.getToken(ObjectiveCParser.INLINE, 0)

        def NS_INLINE(self):
            return self.getToken(ObjectiveCParser.NS_INLINE, 0)

        def KINDOF(self):
            return self.getToken(ObjectiveCParser.KINDOF, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_typePrefix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypePrefix" ):
                listener.enterTypePrefix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypePrefix" ):
                listener.exitTypePrefix(self)




    def typePrefix(self):

        localctx = ObjectiveCParser.TypePrefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_typePrefix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1052
            _la = self._input.LA(1)
            if not(_la==17 or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 131215) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeQualifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONST(self):
            return self.getToken(ObjectiveCParser.CONST, 0)

        def VOLATILE(self):
            return self.getToken(ObjectiveCParser.VOLATILE, 0)

        def RESTRICT(self):
            return self.getToken(ObjectiveCParser.RESTRICT, 0)

        def protocolQualifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.ProtocolQualifierContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_typeQualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeQualifier" ):
                listener.enterTypeQualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeQualifier" ):
                listener.exitTypeQualifier(self)




    def typeQualifier(self):

        localctx = ObjectiveCParser.TypeQualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_typeQualifier)
        try:
            self.state = 1058
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1054
                self.match(ObjectiveCParser.CONST)
                pass
            elif token in [33]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1055
                self.match(ObjectiveCParser.VOLATILE)
                pass
            elif token in [21]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1056
                self.match(ObjectiveCParser.RESTRICT)
                pass
            elif token in [42, 43, 46, 47, 51, 52]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1057
                self.protocolQualifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProtocolQualifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IN(self):
            return self.getToken(ObjectiveCParser.IN, 0)

        def OUT(self):
            return self.getToken(ObjectiveCParser.OUT, 0)

        def INOUT(self):
            return self.getToken(ObjectiveCParser.INOUT, 0)

        def BYCOPY(self):
            return self.getToken(ObjectiveCParser.BYCOPY, 0)

        def BYREF(self):
            return self.getToken(ObjectiveCParser.BYREF, 0)

        def ONEWAY(self):
            return self.getToken(ObjectiveCParser.ONEWAY, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_protocolQualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProtocolQualifier" ):
                listener.enterProtocolQualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProtocolQualifier" ):
                listener.exitProtocolQualifier(self)




    def protocolQualifier(self):

        localctx = ObjectiveCParser.ProtocolQualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_protocolQualifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1060
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 6979699813122048) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VOID(self):
            return self.getToken(ObjectiveCParser.VOID, 0)

        def CHAR(self):
            return self.getToken(ObjectiveCParser.CHAR, 0)

        def SHORT(self):
            return self.getToken(ObjectiveCParser.SHORT, 0)

        def INT(self):
            return self.getToken(ObjectiveCParser.INT, 0)

        def LONG(self):
            return self.getToken(ObjectiveCParser.LONG, 0)

        def FLOAT(self):
            return self.getToken(ObjectiveCParser.FLOAT, 0)

        def DOUBLE(self):
            return self.getToken(ObjectiveCParser.DOUBLE, 0)

        def SIGNED(self):
            return self.getToken(ObjectiveCParser.SIGNED, 0)

        def UNSIGNED(self):
            return self.getToken(ObjectiveCParser.UNSIGNED, 0)

        def typeofExpression(self):
            return self.getTypedRuleContext(ObjectiveCParser.TypeofExpressionContext,0)


        def genericTypeSpecifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.GenericTypeSpecifierContext,0)


        def structOrUnionSpecifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.StructOrUnionSpecifierContext,0)


        def enumSpecifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.EnumSpecifierContext,0)


        def identifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.IdentifierContext,0)


        def pointer(self):
            return self.getTypedRuleContext(ObjectiveCParser.PointerContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_typeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeSpecifier" ):
                listener.enterTypeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeSpecifier" ):
                listener.exitTypeSpecifier(self)




    def typeSpecifier(self):

        localctx = ObjectiveCParser.TypeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_typeSpecifier)
        try:
            self.state = 1079
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1062
                self.match(ObjectiveCParser.VOID)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1063
                self.match(ObjectiveCParser.CHAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1064
                self.match(ObjectiveCParser.SHORT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1065
                self.match(ObjectiveCParser.INT)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1066
                self.match(ObjectiveCParser.LONG)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1067
                self.match(ObjectiveCParser.FLOAT)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1068
                self.match(ObjectiveCParser.DOUBLE)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1069
                self.match(ObjectiveCParser.SIGNED)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1070
                self.match(ObjectiveCParser.UNSIGNED)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1071
                self.typeofExpression()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1072
                self.genericTypeSpecifier()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1073
                self.structOrUnionSpecifier()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1074
                self.enumSpecifier()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1075
                self.identifier()
                self.state = 1077
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
                if la_ == 1:
                    self.state = 1076
                    self.pointer()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeofExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPEOF(self):
            return self.getToken(ObjectiveCParser.TYPEOF, 0)

        def LP(self):
            return self.getToken(ObjectiveCParser.LP, 0)

        def expression(self):
            return self.getTypedRuleContext(ObjectiveCParser.ExpressionContext,0)


        def RP(self):
            return self.getToken(ObjectiveCParser.RP, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_typeofExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeofExpression" ):
                listener.enterTypeofExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeofExpression" ):
                listener.exitTypeofExpression(self)




    def typeofExpression(self):

        localctx = ObjectiveCParser.TypeofExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_typeofExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1081
            self.match(ObjectiveCParser.TYPEOF)

            self.state = 1082
            self.match(ObjectiveCParser.LP)
            self.state = 1083
            self.expression(0)
            self.state = 1084
            self.match(ObjectiveCParser.RP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldDeclaratorListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fieldDeclarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.FieldDeclaratorContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.FieldDeclaratorContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ObjectiveCParser.COMMA)
            else:
                return self.getToken(ObjectiveCParser.COMMA, i)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_fieldDeclaratorList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldDeclaratorList" ):
                listener.enterFieldDeclaratorList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldDeclaratorList" ):
                listener.exitFieldDeclaratorList(self)




    def fieldDeclaratorList(self):

        localctx = ObjectiveCParser.FieldDeclaratorListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_fieldDeclaratorList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1086
            self.fieldDeclarator()
            self.state = 1091
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==133:
                self.state = 1087
                self.match(ObjectiveCParser.COMMA)
                self.state = 1088
                self.fieldDeclarator()
                self.state = 1093
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(ObjectiveCParser.DeclaratorContext,0)


        def COLON(self):
            return self.getToken(ObjectiveCParser.COLON, 0)

        def constant(self):
            return self.getTypedRuleContext(ObjectiveCParser.ConstantContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_fieldDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldDeclarator" ):
                listener.enterFieldDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldDeclarator" ):
                listener.exitFieldDeclarator(self)




    def fieldDeclarator(self):

        localctx = ObjectiveCParser.FieldDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_fieldDeclarator)
        self._la = 0 # Token type
        try:
            self.state = 1100
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1094
                self.declarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1096
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 40)) & ~0x3f) == 0 and ((1 << (_la - 40)) & -414491694415611649) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & 1125899913166847) != 0):
                    self.state = 1095
                    self.declarator()


                self.state = 1098
                self.match(ObjectiveCParser.COLON)
                self.state = 1099
                self.constant()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENUM(self):
            return self.getToken(ObjectiveCParser.ENUM, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.IdentifierContext,i)


        def LBRACE(self):
            return self.getToken(ObjectiveCParser.LBRACE, 0)

        def enumeratorList(self):
            return self.getTypedRuleContext(ObjectiveCParser.EnumeratorListContext,0)


        def RBRACE(self):
            return self.getToken(ObjectiveCParser.RBRACE, 0)

        def COLON(self):
            return self.getToken(ObjectiveCParser.COLON, 0)

        def typeName(self):
            return self.getTypedRuleContext(ObjectiveCParser.TypeNameContext,0)


        def LP(self):
            return self.getToken(ObjectiveCParser.LP, 0)

        def COMMA(self):
            return self.getToken(ObjectiveCParser.COMMA, 0)

        def RP(self):
            return self.getToken(ObjectiveCParser.RP, 0)

        def NS_OPTIONS(self):
            return self.getToken(ObjectiveCParser.NS_OPTIONS, 0)

        def NS_ENUM(self):
            return self.getToken(ObjectiveCParser.NS_ENUM, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_enumSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumSpecifier" ):
                listener.enterEnumSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumSpecifier" ):
                listener.exitEnumSpecifier(self)




    def enumSpecifier(self):

        localctx = ObjectiveCParser.EnumSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_enumSpecifier)
        self._la = 0 # Token type
        try:
            self.state = 1133
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [11]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1102
                self.match(ObjectiveCParser.ENUM)
                self.state = 1108
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
                if la_ == 1:
                    self.state = 1104
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 142143763727253504) != 0) or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & 17867063762871) != 0):
                        self.state = 1103
                        self.identifier()


                    self.state = 1106
                    self.match(ObjectiveCParser.COLON)
                    self.state = 1107
                    self.typeName()


                self.state = 1121
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 81, 82, 83, 85, 86, 88, 89, 90, 91, 92, 93, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 125]:
                    self.state = 1110
                    self.identifier()
                    self.state = 1115
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
                    if la_ == 1:
                        self.state = 1111
                        self.match(ObjectiveCParser.LBRACE)
                        self.state = 1112
                        self.enumeratorList()
                        self.state = 1113
                        self.match(ObjectiveCParser.RBRACE)


                    pass
                elif token in [128]:
                    self.state = 1117
                    self.match(ObjectiveCParser.LBRACE)
                    self.state = 1118
                    self.enumeratorList()
                    self.state = 1119
                    self.match(ObjectiveCParser.RBRACE)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [104, 105]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1123
                _la = self._input.LA(1)
                if not(_la==104 or _la==105):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1124
                self.match(ObjectiveCParser.LP)
                self.state = 1125
                self.typeName()
                self.state = 1126
                self.match(ObjectiveCParser.COMMA)
                self.state = 1127
                self.identifier()
                self.state = 1128
                self.match(ObjectiveCParser.RP)
                self.state = 1129
                self.match(ObjectiveCParser.LBRACE)
                self.state = 1130
                self.enumeratorList()
                self.state = 1131
                self.match(ObjectiveCParser.RBRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumeratorListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumerator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.EnumeratorContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.EnumeratorContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ObjectiveCParser.COMMA)
            else:
                return self.getToken(ObjectiveCParser.COMMA, i)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_enumeratorList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumeratorList" ):
                listener.enterEnumeratorList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumeratorList" ):
                listener.exitEnumeratorList(self)




    def enumeratorList(self):

        localctx = ObjectiveCParser.EnumeratorListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_enumeratorList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1135
            self.enumerator()
            self.state = 1140
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,131,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1136
                    self.match(ObjectiveCParser.COMMA)
                    self.state = 1137
                    self.enumerator() 
                self.state = 1142
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,131,self._ctx)

            self.state = 1144
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==133:
                self.state = 1143
                self.match(ObjectiveCParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumeratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumeratorIdentifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.EnumeratorIdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(ObjectiveCParser.ASSIGNMENT, 0)

        def expression(self):
            return self.getTypedRuleContext(ObjectiveCParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_enumerator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumerator" ):
                listener.enterEnumerator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumerator" ):
                listener.exitEnumerator(self)




    def enumerator(self):

        localctx = ObjectiveCParser.EnumeratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_enumerator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1146
            self.enumeratorIdentifier()
            self.state = 1149
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==137:
                self.state = 1147
                self.match(ObjectiveCParser.ASSIGNMENT)
                self.state = 1148
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumeratorIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.IdentifierContext,0)


        def DEFAULT(self):
            return self.getToken(ObjectiveCParser.DEFAULT, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_enumeratorIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumeratorIdentifier" ):
                listener.enterEnumeratorIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumeratorIdentifier" ):
                listener.exitEnumeratorIdentifier(self)




    def enumeratorIdentifier(self):

        localctx = ObjectiveCParser.EnumeratorIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_enumeratorIdentifier)
        try:
            self.state = 1153
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 81, 82, 83, 85, 86, 88, 89, 90, 91, 92, 93, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 125]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1151
                self.identifier()
                pass
            elif token in [7]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1152
                self.match(ObjectiveCParser.DEFAULT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DirectDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.IdentifierContext,0)


        def LP(self):
            return self.getToken(ObjectiveCParser.LP, 0)

        def declarator(self):
            return self.getTypedRuleContext(ObjectiveCParser.DeclaratorContext,0)


        def RP(self):
            return self.getToken(ObjectiveCParser.RP, 0)

        def declaratorSuffix(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.DeclaratorSuffixContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.DeclaratorSuffixContext,i)


        def BITXOR(self):
            return self.getToken(ObjectiveCParser.BITXOR, 0)

        def blockParameters(self):
            return self.getTypedRuleContext(ObjectiveCParser.BlockParametersContext,0)


        def nullabilitySpecifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.NullabilitySpecifierContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_directDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDirectDeclarator" ):
                listener.enterDirectDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDirectDeclarator" ):
                listener.exitDirectDeclarator(self)




    def directDeclarator(self):

        localctx = ObjectiveCParser.DirectDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_directDeclarator)
        self._la = 0 # Token type
        try:
            self.state = 1178
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1160
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 81, 82, 83, 85, 86, 88, 89, 90, 91, 92, 93, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 125]:
                    self.state = 1155
                    self.identifier()
                    pass
                elif token in [126]:
                    self.state = 1156
                    self.match(ObjectiveCParser.LP)
                    self.state = 1157
                    self.declarator()
                    self.state = 1158
                    self.match(ObjectiveCParser.RP)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1165
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==130:
                    self.state = 1162
                    self.declaratorSuffix()
                    self.state = 1167
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1168
                self.match(ObjectiveCParser.LP)
                self.state = 1169
                self.match(ObjectiveCParser.BITXOR)
                self.state = 1171
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
                if la_ == 1:
                    self.state = 1170
                    self.nullabilitySpecifier()


                self.state = 1174
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 142143763727253504) != 0) or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & 17867063762871) != 0):
                    self.state = 1173
                    self.identifier()


                self.state = 1176
                self.match(ObjectiveCParser.RP)
                self.state = 1177
                self.blockParameters()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclaratorSuffixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(ObjectiveCParser.LBRACK, 0)

        def RBRACK(self):
            return self.getToken(ObjectiveCParser.RBRACK, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(ObjectiveCParser.ConstantExpressionContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_declaratorSuffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaratorSuffix" ):
                listener.enterDeclaratorSuffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaratorSuffix" ):
                listener.exitDeclaratorSuffix(self)




    def declaratorSuffix(self):

        localctx = ObjectiveCParser.DeclaratorSuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_declaratorSuffix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1180
            self.match(ObjectiveCParser.LBRACK)
            self.state = 1182
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 288230101273804800) != 0) or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & 17867063762871) != 0) or ((((_la - 152)) & ~0x3f) == 0 and ((1 << (_la - 152)) & 65536003) != 0):
                self.state = 1181
                self.constantExpression()


            self.state = 1184
            self.match(ObjectiveCParser.RBRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterDeclarationList(self):
            return self.getTypedRuleContext(ObjectiveCParser.ParameterDeclarationListContext,0)


        def COMMA(self):
            return self.getToken(ObjectiveCParser.COMMA, 0)

        def ELIPSIS(self):
            return self.getToken(ObjectiveCParser.ELIPSIS, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_parameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterList" ):
                listener.enterParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterList" ):
                listener.exitParameterList(self)




    def parameterList(self):

        localctx = ObjectiveCParser.ParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_parameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1186
            self.parameterDeclarationList()
            self.state = 1189
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==133:
                self.state = 1187
                self.match(ObjectiveCParser.COMMA)
                self.state = 1188
                self.match(ObjectiveCParser.ELIPSIS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PointerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MUL(self):
            return self.getToken(ObjectiveCParser.MUL, 0)

        def declarationSpecifiers(self):
            return self.getTypedRuleContext(ObjectiveCParser.DeclarationSpecifiersContext,0)


        def pointer(self):
            return self.getTypedRuleContext(ObjectiveCParser.PointerContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_pointer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPointer" ):
                listener.enterPointer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPointer" ):
                listener.exitPointer(self)




    def pointer(self):

        localctx = ObjectiveCParser.PointerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_pointer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1191
            self.match(ObjectiveCParser.MUL)
            self.state = 1193
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
            if la_ == 1:
                self.state = 1192
                self.declarationSpecifiers()


            self.state = 1196
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,143,self._ctx)
            if la_ == 1:
                self.state = 1195
                self.pointer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.IdentifierContext,0)


        def LP(self):
            return self.getToken(ObjectiveCParser.LP, 0)

        def primaryExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.PrimaryExpressionContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.PrimaryExpressionContext,i)


        def RP(self):
            return self.getToken(ObjectiveCParser.RP, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ObjectiveCParser.COMMA)
            else:
                return self.getToken(ObjectiveCParser.COMMA, i)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_macro

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacro" ):
                listener.enterMacro(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacro" ):
                listener.exitMacro(self)




    def macro(self):

        localctx = ObjectiveCParser.MacroContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_macro)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1198
            self.identifier()
            self.state = 1210
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==126:
                self.state = 1199
                self.match(ObjectiveCParser.LP)
                self.state = 1200
                self.primaryExpression()
                self.state = 1205
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==133:
                    self.state = 1201
                    self.match(ObjectiveCParser.COMMA)
                    self.state = 1202
                    self.primaryExpression()
                    self.state = 1207
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1208
                self.match(ObjectiveCParser.RP)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayInitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(ObjectiveCParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(ObjectiveCParser.RBRACE, 0)

        def expressions(self):
            return self.getTypedRuleContext(ObjectiveCParser.ExpressionsContext,0)


        def COMMA(self):
            return self.getToken(ObjectiveCParser.COMMA, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_arrayInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayInitializer" ):
                listener.enterArrayInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayInitializer" ):
                listener.exitArrayInitializer(self)




    def arrayInitializer(self):

        localctx = ObjectiveCParser.ArrayInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_arrayInitializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1212
            self.match(ObjectiveCParser.LBRACE)
            self.state = 1217
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4899916119734747136) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 2523141690462269569) != 0) or ((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & 4363692523569) != 0):
                self.state = 1213
                self.expressions()
                self.state = 1215
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==133:
                    self.state = 1214
                    self.match(ObjectiveCParser.COMMA)




            self.state = 1219
            self.match(ObjectiveCParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructInitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(ObjectiveCParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(ObjectiveCParser.RBRACE, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(ObjectiveCParser.DOT)
            else:
                return self.getToken(ObjectiveCParser.DOT, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ObjectiveCParser.COMMA)
            else:
                return self.getToken(ObjectiveCParser.COMMA, i)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_structInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructInitializer" ):
                listener.enterStructInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructInitializer" ):
                listener.exitStructInitializer(self)




    def structInitializer(self):

        localctx = ObjectiveCParser.StructInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_structInitializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1221
            self.match(ObjectiveCParser.LBRACE)
            self.state = 1235
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==134:
                self.state = 1222
                self.match(ObjectiveCParser.DOT)
                self.state = 1223
                self.expression(0)
                self.state = 1229
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,148,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1224
                        self.match(ObjectiveCParser.COMMA)
                        self.state = 1225
                        self.match(ObjectiveCParser.DOT)
                        self.state = 1226
                        self.expression(0) 
                    self.state = 1231
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,148,self._ctx)

                self.state = 1233
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==133:
                    self.state = 1232
                    self.match(ObjectiveCParser.COMMA)




            self.state = 1237
            self.match(ObjectiveCParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.InitializerContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.InitializerContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ObjectiveCParser.COMMA)
            else:
                return self.getToken(ObjectiveCParser.COMMA, i)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_initializerList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializerList" ):
                listener.enterInitializerList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializerList" ):
                listener.exitInitializerList(self)




    def initializerList(self):

        localctx = ObjectiveCParser.InitializerListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_initializerList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1239
            self.initializer()
            self.state = 1244
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,151,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1240
                    self.match(ObjectiveCParser.COMMA)
                    self.state = 1241
                    self.initializer() 
                self.state = 1246
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,151,self._ctx)

            self.state = 1248
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==133:
                self.state = 1247
                self.match(ObjectiveCParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def specifierQualifierList(self):
            return self.getTypedRuleContext(ObjectiveCParser.SpecifierQualifierListContext,0)


        def abstractDeclarator(self):
            return self.getTypedRuleContext(ObjectiveCParser.AbstractDeclaratorContext,0)


        def blockType(self):
            return self.getTypedRuleContext(ObjectiveCParser.BlockTypeContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_typeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeName" ):
                listener.enterTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeName" ):
                listener.exitTypeName(self)




    def typeName(self):

        localctx = ObjectiveCParser.TypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_typeName)
        self._la = 0 # Token type
        try:
            self.state = 1255
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,154,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1250
                self.specifierQualifierList()
                self.state = 1252
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 126)) & ~0x3f) == 0 and ((1 << (_la - 126)) & 268435473) != 0):
                    self.state = 1251
                    self.abstractDeclarator()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1254
                self.blockType()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AbstractDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pointer(self):
            return self.getTypedRuleContext(ObjectiveCParser.PointerContext,0)


        def abstractDeclarator(self):
            return self.getTypedRuleContext(ObjectiveCParser.AbstractDeclaratorContext,0)


        def LP(self):
            return self.getToken(ObjectiveCParser.LP, 0)

        def RP(self):
            return self.getToken(ObjectiveCParser.RP, 0)

        def abstractDeclaratorSuffix(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.AbstractDeclaratorSuffixContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.AbstractDeclaratorSuffixContext,i)


        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(ObjectiveCParser.LBRACK)
            else:
                return self.getToken(ObjectiveCParser.LBRACK, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(ObjectiveCParser.RBRACK)
            else:
                return self.getToken(ObjectiveCParser.RBRACK, i)

        def constantExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.ConstantExpressionContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.ConstantExpressionContext,i)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_abstractDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbstractDeclarator" ):
                listener.enterAbstractDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbstractDeclarator" ):
                listener.exitAbstractDeclarator(self)




    def abstractDeclarator(self):

        localctx = ObjectiveCParser.AbstractDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_abstractDeclarator)
        self._la = 0 # Token type
        try:
            self.state = 1280
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [154]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1257
                self.pointer()
                self.state = 1259
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 126)) & ~0x3f) == 0 and ((1 << (_la - 126)) & 268435473) != 0):
                    self.state = 1258
                    self.abstractDeclarator()


                pass
            elif token in [126]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1261
                self.match(ObjectiveCParser.LP)
                self.state = 1263
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 126)) & ~0x3f) == 0 and ((1 << (_la - 126)) & 268435473) != 0):
                    self.state = 1262
                    self.abstractDeclarator()


                self.state = 1265
                self.match(ObjectiveCParser.RP)
                self.state = 1267 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1266
                    self.abstractDeclaratorSuffix()
                    self.state = 1269 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==126 or _la==130):
                        break

                pass
            elif token in [130]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1276 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1271
                    self.match(ObjectiveCParser.LBRACK)
                    self.state = 1273
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 288230101273804800) != 0) or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & 17867063762871) != 0) or ((((_la - 152)) & ~0x3f) == 0 and ((1 << (_la - 152)) & 65536003) != 0):
                        self.state = 1272
                        self.constantExpression()


                    self.state = 1275
                    self.match(ObjectiveCParser.RBRACK)
                    self.state = 1278 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==130):
                        break

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AbstractDeclaratorSuffixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(ObjectiveCParser.LBRACK, 0)

        def RBRACK(self):
            return self.getToken(ObjectiveCParser.RBRACK, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(ObjectiveCParser.ConstantExpressionContext,0)


        def LP(self):
            return self.getToken(ObjectiveCParser.LP, 0)

        def RP(self):
            return self.getToken(ObjectiveCParser.RP, 0)

        def parameterDeclarationList(self):
            return self.getTypedRuleContext(ObjectiveCParser.ParameterDeclarationListContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_abstractDeclaratorSuffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbstractDeclaratorSuffix" ):
                listener.enterAbstractDeclaratorSuffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbstractDeclaratorSuffix" ):
                listener.exitAbstractDeclaratorSuffix(self)




    def abstractDeclaratorSuffix(self):

        localctx = ObjectiveCParser.AbstractDeclaratorSuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_abstractDeclaratorSuffix)
        self._la = 0 # Token type
        try:
            self.state = 1292
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [130]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1282
                self.match(ObjectiveCParser.LBRACK)
                self.state = 1284
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 288230101273804800) != 0) or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & 17867063762871) != 0) or ((((_la - 152)) & ~0x3f) == 0 and ((1 << (_la - 152)) & 65536003) != 0):
                    self.state = 1283
                    self.constantExpression()


                self.state = 1286
                self.match(ObjectiveCParser.RBRACK)
                pass
            elif token in [126]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1287
                self.match(ObjectiveCParser.LP)
                self.state = 1289
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 142143780063951410) != 0) or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & 17867063951359) != 0):
                    self.state = 1288
                    self.parameterDeclarationList()


                self.state = 1291
                self.match(ObjectiveCParser.RP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterDeclarationListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.ParameterDeclarationContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.ParameterDeclarationContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ObjectiveCParser.COMMA)
            else:
                return self.getToken(ObjectiveCParser.COMMA, i)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_parameterDeclarationList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterDeclarationList" ):
                listener.enterParameterDeclarationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterDeclarationList" ):
                listener.exitParameterDeclarationList(self)




    def parameterDeclarationList(self):

        localctx = ObjectiveCParser.ParameterDeclarationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_parameterDeclarationList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1294
            self.parameterDeclaration()
            self.state = 1299
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,164,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1295
                    self.match(ObjectiveCParser.COMMA)
                    self.state = 1296
                    self.parameterDeclaration() 
                self.state = 1301
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,164,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifiers(self):
            return self.getTypedRuleContext(ObjectiveCParser.DeclarationSpecifiersContext,0)


        def declarator(self):
            return self.getTypedRuleContext(ObjectiveCParser.DeclaratorContext,0)


        def VOID(self):
            return self.getToken(ObjectiveCParser.VOID, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_parameterDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterDeclaration" ):
                listener.enterParameterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterDeclaration" ):
                listener.exitParameterDeclaration(self)




    def parameterDeclaration(self):

        localctx = ObjectiveCParser.ParameterDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_parameterDeclaration)
        try:
            self.state = 1306
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,165,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1302
                self.declarationSpecifiers()
                self.state = 1303
                self.declarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1305
                self.match(ObjectiveCParser.VOID)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def directDeclarator(self):
            return self.getTypedRuleContext(ObjectiveCParser.DirectDeclaratorContext,0)


        def pointer(self):
            return self.getTypedRuleContext(ObjectiveCParser.PointerContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarator" ):
                listener.enterDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarator" ):
                listener.exitDeclarator(self)




    def declarator(self):

        localctx = ObjectiveCParser.DeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_declarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1309
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==154:
                self.state = 1308
                self.pointer()


            self.state = 1311
            self.directDeclarator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labeledStatement(self):
            return self.getTypedRuleContext(ObjectiveCParser.LabeledStatementContext,0)


        def SEMI(self):
            return self.getToken(ObjectiveCParser.SEMI, 0)

        def compoundStatement(self):
            return self.getTypedRuleContext(ObjectiveCParser.CompoundStatementContext,0)


        def selectionStatement(self):
            return self.getTypedRuleContext(ObjectiveCParser.SelectionStatementContext,0)


        def iterationStatement(self):
            return self.getTypedRuleContext(ObjectiveCParser.IterationStatementContext,0)


        def jumpStatement(self):
            return self.getTypedRuleContext(ObjectiveCParser.JumpStatementContext,0)


        def synchronizedStatement(self):
            return self.getTypedRuleContext(ObjectiveCParser.SynchronizedStatementContext,0)


        def autoreleaseStatement(self):
            return self.getTypedRuleContext(ObjectiveCParser.AutoreleaseStatementContext,0)


        def throwStatement(self):
            return self.getTypedRuleContext(ObjectiveCParser.ThrowStatementContext,0)


        def tryBlock(self):
            return self.getTypedRuleContext(ObjectiveCParser.TryBlockContext,0)


        def expressions(self):
            return self.getTypedRuleContext(ObjectiveCParser.ExpressionsContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = ObjectiveCParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_statement)
        try:
            self.state = 1354
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,177,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1313
                self.labeledStatement()
                self.state = 1315
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,167,self._ctx)
                if la_ == 1:
                    self.state = 1314
                    self.match(ObjectiveCParser.SEMI)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1317
                self.compoundStatement()
                self.state = 1319
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,168,self._ctx)
                if la_ == 1:
                    self.state = 1318
                    self.match(ObjectiveCParser.SEMI)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1321
                self.selectionStatement()
                self.state = 1323
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,169,self._ctx)
                if la_ == 1:
                    self.state = 1322
                    self.match(ObjectiveCParser.SEMI)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1325
                self.iterationStatement()
                self.state = 1327
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
                if la_ == 1:
                    self.state = 1326
                    self.match(ObjectiveCParser.SEMI)


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1329
                self.jumpStatement()
                self.state = 1331
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,171,self._ctx)
                if la_ == 1:
                    self.state = 1330
                    self.match(ObjectiveCParser.SEMI)


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1333
                self.synchronizedStatement()
                self.state = 1335
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,172,self._ctx)
                if la_ == 1:
                    self.state = 1334
                    self.match(ObjectiveCParser.SEMI)


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1337
                self.autoreleaseStatement()
                self.state = 1339
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,173,self._ctx)
                if la_ == 1:
                    self.state = 1338
                    self.match(ObjectiveCParser.SEMI)


                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1341
                self.throwStatement()
                self.state = 1343
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,174,self._ctx)
                if la_ == 1:
                    self.state = 1342
                    self.match(ObjectiveCParser.SEMI)


                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1345
                self.tryBlock()
                self.state = 1347
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,175,self._ctx)
                if la_ == 1:
                    self.state = 1346
                    self.match(ObjectiveCParser.SEMI)


                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1349
                self.expressions()
                self.state = 1351
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,176,self._ctx)
                if la_ == 1:
                    self.state = 1350
                    self.match(ObjectiveCParser.SEMI)


                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1353
                self.match(ObjectiveCParser.SEMI)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabeledStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.IdentifierContext,0)


        def COLON(self):
            return self.getToken(ObjectiveCParser.COLON, 0)

        def statement(self):
            return self.getTypedRuleContext(ObjectiveCParser.StatementContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_labeledStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabeledStatement" ):
                listener.enterLabeledStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabeledStatement" ):
                listener.exitLabeledStatement(self)




    def labeledStatement(self):

        localctx = ObjectiveCParser.LabeledStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_labeledStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1356
            self.identifier()
            self.state = 1357
            self.match(ObjectiveCParser.COLON)
            self.state = 1358
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RangeExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constantExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.ConstantExpressionContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.ConstantExpressionContext,i)


        def ELIPSIS(self):
            return self.getToken(ObjectiveCParser.ELIPSIS, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_rangeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRangeExpression" ):
                listener.enterRangeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRangeExpression" ):
                listener.exitRangeExpression(self)




    def rangeExpression(self):

        localctx = ObjectiveCParser.RangeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_rangeExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1360
            self.constantExpression()
            self.state = 1363
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==170:
                self.state = 1361
                self.match(ObjectiveCParser.ELIPSIS)
                self.state = 1362
                self.constantExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(ObjectiveCParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(ObjectiveCParser.RBRACE, 0)

        def declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.DeclarationContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.DeclarationContext,i)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.StatementContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.StatementContext,i)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_compoundStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundStatement" ):
                listener.enterCompoundStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundStatement" ):
                listener.exitCompoundStatement(self)




    def compoundStatement(self):

        localctx = ObjectiveCParser.CompoundStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_compoundStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1365
            self.match(ObjectiveCParser.LBRACE)
            self.state = 1370
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 5188146530212641654) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & -6123769593317032575) != 0) or ((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & 4363692523569) != 0):
                self.state = 1368
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,179,self._ctx)
                if la_ == 1:
                    self.state = 1366
                    self.declaration()
                    pass

                elif la_ == 2:
                    self.state = 1367
                    self.statement()
                    pass


                self.state = 1372
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1373
            self.match(ObjectiveCParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ifBody = None # StatementContext
            self.elseBody = None # StatementContext

        def IF(self):
            return self.getToken(ObjectiveCParser.IF, 0)

        def LP(self):
            return self.getToken(ObjectiveCParser.LP, 0)

        def expression(self):
            return self.getTypedRuleContext(ObjectiveCParser.ExpressionContext,0)


        def RP(self):
            return self.getToken(ObjectiveCParser.RP, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.StatementContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.StatementContext,i)


        def ELSE(self):
            return self.getToken(ObjectiveCParser.ELSE, 0)

        def switchStatement(self):
            return self.getTypedRuleContext(ObjectiveCParser.SwitchStatementContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_selectionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectionStatement" ):
                listener.enterSelectionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectionStatement" ):
                listener.exitSelectionStatement(self)




    def selectionStatement(self):

        localctx = ObjectiveCParser.SelectionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_selectionStatement)
        try:
            self.state = 1385
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [16]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1375
                self.match(ObjectiveCParser.IF)
                self.state = 1376
                self.match(ObjectiveCParser.LP)
                self.state = 1377
                self.expression(0)
                self.state = 1378
                self.match(ObjectiveCParser.RP)
                self.state = 1379
                localctx.ifBody = self.statement()
                self.state = 1382
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,181,self._ctx)
                if la_ == 1:
                    self.state = 1380
                    self.match(ObjectiveCParser.ELSE)
                    self.state = 1381
                    localctx.elseBody = self.statement()


                pass
            elif token in [28]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1384
                self.switchStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SWITCH(self):
            return self.getToken(ObjectiveCParser.SWITCH, 0)

        def LP(self):
            return self.getToken(ObjectiveCParser.LP, 0)

        def expression(self):
            return self.getTypedRuleContext(ObjectiveCParser.ExpressionContext,0)


        def RP(self):
            return self.getToken(ObjectiveCParser.RP, 0)

        def switchBlock(self):
            return self.getTypedRuleContext(ObjectiveCParser.SwitchBlockContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_switchStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchStatement" ):
                listener.enterSwitchStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchStatement" ):
                listener.exitSwitchStatement(self)




    def switchStatement(self):

        localctx = ObjectiveCParser.SwitchStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_switchStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1387
            self.match(ObjectiveCParser.SWITCH)
            self.state = 1388
            self.match(ObjectiveCParser.LP)
            self.state = 1389
            self.expression(0)
            self.state = 1390
            self.match(ObjectiveCParser.RP)
            self.state = 1391
            self.switchBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(ObjectiveCParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(ObjectiveCParser.RBRACE, 0)

        def switchSection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.SwitchSectionContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.SwitchSectionContext,i)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_switchBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchBlock" ):
                listener.enterSwitchBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchBlock" ):
                listener.exitSwitchBlock(self)




    def switchBlock(self):

        localctx = ObjectiveCParser.SwitchBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_switchBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1393
            self.match(ObjectiveCParser.LBRACE)
            self.state = 1397
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==3 or _la==7:
                self.state = 1394
                self.switchSection()
                self.state = 1399
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1400
            self.match(ObjectiveCParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchSectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def switchLabel(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.SwitchLabelContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.SwitchLabelContext,i)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.StatementContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.StatementContext,i)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_switchSection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchSection" ):
                listener.enterSwitchSection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchSection" ):
                listener.exitSwitchSection(self)




    def switchSection(self):

        localctx = ObjectiveCParser.SwitchSectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_switchSection)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1403 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1402
                self.switchLabel()
                self.state = 1405 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==3 or _la==7):
                    break

            self.state = 1408 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1407
                self.statement()
                self.state = 1410 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 5188146513339072836) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & -6123769594089079423) != 0) or ((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & 4363692523569) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchLabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(ObjectiveCParser.CASE, 0)

        def COLON(self):
            return self.getToken(ObjectiveCParser.COLON, 0)

        def rangeExpression(self):
            return self.getTypedRuleContext(ObjectiveCParser.RangeExpressionContext,0)


        def LP(self):
            return self.getToken(ObjectiveCParser.LP, 0)

        def RP(self):
            return self.getToken(ObjectiveCParser.RP, 0)

        def DEFAULT(self):
            return self.getToken(ObjectiveCParser.DEFAULT, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_switchLabel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchLabel" ):
                listener.enterSwitchLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchLabel" ):
                listener.exitSwitchLabel(self)




    def switchLabel(self):

        localctx = ObjectiveCParser.SwitchLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_switchLabel)
        try:
            self.state = 1424
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1412
                self.match(ObjectiveCParser.CASE)
                self.state = 1418
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 81, 82, 83, 85, 86, 88, 89, 90, 91, 92, 93, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 125, 152, 153, 171, 173, 174, 175, 176, 177]:
                    self.state = 1413
                    self.rangeExpression()
                    pass
                elif token in [126]:
                    self.state = 1414
                    self.match(ObjectiveCParser.LP)
                    self.state = 1415
                    self.rangeExpression()
                    self.state = 1416
                    self.match(ObjectiveCParser.RP)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1420
                self.match(ObjectiveCParser.COLON)
                pass
            elif token in [7]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1422
                self.match(ObjectiveCParser.DEFAULT)
                self.state = 1423
                self.match(ObjectiveCParser.COLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IterationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def whileStatement(self):
            return self.getTypedRuleContext(ObjectiveCParser.WhileStatementContext,0)


        def doStatement(self):
            return self.getTypedRuleContext(ObjectiveCParser.DoStatementContext,0)


        def forStatement(self):
            return self.getTypedRuleContext(ObjectiveCParser.ForStatementContext,0)


        def forInStatement(self):
            return self.getTypedRuleContext(ObjectiveCParser.ForInStatementContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_iterationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIterationStatement" ):
                listener.enterIterationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIterationStatement" ):
                listener.exitIterationStatement(self)




    def iterationStatement(self):

        localctx = ObjectiveCParser.IterationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_iterationStatement)
        try:
            self.state = 1430
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,188,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1426
                self.whileStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1427
                self.doStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1428
                self.forStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1429
                self.forInStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(ObjectiveCParser.WHILE, 0)

        def LP(self):
            return self.getToken(ObjectiveCParser.LP, 0)

        def expression(self):
            return self.getTypedRuleContext(ObjectiveCParser.ExpressionContext,0)


        def RP(self):
            return self.getToken(ObjectiveCParser.RP, 0)

        def statement(self):
            return self.getTypedRuleContext(ObjectiveCParser.StatementContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_whileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStatement" ):
                listener.enterWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStatement" ):
                listener.exitWhileStatement(self)




    def whileStatement(self):

        localctx = ObjectiveCParser.WhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_whileStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1432
            self.match(ObjectiveCParser.WHILE)
            self.state = 1433
            self.match(ObjectiveCParser.LP)
            self.state = 1434
            self.expression(0)
            self.state = 1435
            self.match(ObjectiveCParser.RP)
            self.state = 1436
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DoStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DO(self):
            return self.getToken(ObjectiveCParser.DO, 0)

        def statement(self):
            return self.getTypedRuleContext(ObjectiveCParser.StatementContext,0)


        def WHILE(self):
            return self.getToken(ObjectiveCParser.WHILE, 0)

        def LP(self):
            return self.getToken(ObjectiveCParser.LP, 0)

        def expression(self):
            return self.getTypedRuleContext(ObjectiveCParser.ExpressionContext,0)


        def RP(self):
            return self.getToken(ObjectiveCParser.RP, 0)

        def SEMI(self):
            return self.getToken(ObjectiveCParser.SEMI, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_doStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoStatement" ):
                listener.enterDoStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoStatement" ):
                listener.exitDoStatement(self)




    def doStatement(self):

        localctx = ObjectiveCParser.DoStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_doStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1438
            self.match(ObjectiveCParser.DO)
            self.state = 1439
            self.statement()
            self.state = 1440
            self.match(ObjectiveCParser.WHILE)
            self.state = 1441
            self.match(ObjectiveCParser.LP)
            self.state = 1442
            self.expression(0)
            self.state = 1443
            self.match(ObjectiveCParser.RP)
            self.state = 1444
            self.match(ObjectiveCParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(ObjectiveCParser.FOR, 0)

        def LP(self):
            return self.getToken(ObjectiveCParser.LP, 0)

        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(ObjectiveCParser.SEMI)
            else:
                return self.getToken(ObjectiveCParser.SEMI, i)

        def RP(self):
            return self.getToken(ObjectiveCParser.RP, 0)

        def statement(self):
            return self.getTypedRuleContext(ObjectiveCParser.StatementContext,0)


        def forLoopInitializer(self):
            return self.getTypedRuleContext(ObjectiveCParser.ForLoopInitializerContext,0)


        def expression(self):
            return self.getTypedRuleContext(ObjectiveCParser.ExpressionContext,0)


        def expressions(self):
            return self.getTypedRuleContext(ObjectiveCParser.ExpressionsContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_forStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStatement" ):
                listener.enterForStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStatement" ):
                listener.exitForStatement(self)




    def forStatement(self):

        localctx = ObjectiveCParser.ForStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_forStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1446
            self.match(ObjectiveCParser.FOR)
            self.state = 1447
            self.match(ObjectiveCParser.LP)
            self.state = 1449
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4899916136071445042) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 2523141691234316417) != 0) or ((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & 4363692523569) != 0):
                self.state = 1448
                self.forLoopInitializer()


            self.state = 1451
            self.match(ObjectiveCParser.SEMI)
            self.state = 1453
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4899916119734747136) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 2523141690462269569) != 0) or ((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & 4363692523569) != 0):
                self.state = 1452
                self.expression(0)


            self.state = 1455
            self.match(ObjectiveCParser.SEMI)
            self.state = 1457
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4899916119734747136) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 2523141690462269569) != 0) or ((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & 4363692523569) != 0):
                self.state = 1456
                self.expressions()


            self.state = 1459
            self.match(ObjectiveCParser.RP)
            self.state = 1460
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForLoopInitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifiers(self):
            return self.getTypedRuleContext(ObjectiveCParser.DeclarationSpecifiersContext,0)


        def initDeclaratorList(self):
            return self.getTypedRuleContext(ObjectiveCParser.InitDeclaratorListContext,0)


        def expressions(self):
            return self.getTypedRuleContext(ObjectiveCParser.ExpressionsContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_forLoopInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForLoopInitializer" ):
                listener.enterForLoopInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForLoopInitializer" ):
                listener.exitForLoopInitializer(self)




    def forLoopInitializer(self):

        localctx = ObjectiveCParser.ForLoopInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_forLoopInitializer)
        try:
            self.state = 1466
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,192,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1462
                self.declarationSpecifiers()
                self.state = 1463
                self.initDeclaratorList()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1465
                self.expressions()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForInStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(ObjectiveCParser.FOR, 0)

        def LP(self):
            return self.getToken(ObjectiveCParser.LP, 0)

        def typeVariableDeclarator(self):
            return self.getTypedRuleContext(ObjectiveCParser.TypeVariableDeclaratorContext,0)


        def IN(self):
            return self.getToken(ObjectiveCParser.IN, 0)

        def RP(self):
            return self.getToken(ObjectiveCParser.RP, 0)

        def statement(self):
            return self.getTypedRuleContext(ObjectiveCParser.StatementContext,0)


        def expression(self):
            return self.getTypedRuleContext(ObjectiveCParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_forInStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForInStatement" ):
                listener.enterForInStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForInStatement" ):
                listener.exitForInStatement(self)




    def forInStatement(self):

        localctx = ObjectiveCParser.ForInStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_forInStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1468
            self.match(ObjectiveCParser.FOR)
            self.state = 1469
            self.match(ObjectiveCParser.LP)
            self.state = 1470
            self.typeVariableDeclarator()
            self.state = 1471
            self.match(ObjectiveCParser.IN)
            self.state = 1473
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4899916119734747136) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 2523141690462269569) != 0) or ((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & 4363692523569) != 0):
                self.state = 1472
                self.expression(0)


            self.state = 1475
            self.match(ObjectiveCParser.RP)
            self.state = 1476
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JumpStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GOTO(self):
            return self.getToken(ObjectiveCParser.GOTO, 0)

        def identifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.IdentifierContext,0)


        def CONTINUE(self):
            return self.getToken(ObjectiveCParser.CONTINUE, 0)

        def BREAK(self):
            return self.getToken(ObjectiveCParser.BREAK, 0)

        def RETURN(self):
            return self.getToken(ObjectiveCParser.RETURN, 0)

        def expression(self):
            return self.getTypedRuleContext(ObjectiveCParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_jumpStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJumpStatement" ):
                listener.enterJumpStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJumpStatement" ):
                listener.exitJumpStatement(self)




    def jumpStatement(self):

        localctx = ObjectiveCParser.JumpStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_jumpStatement)
        try:
            self.state = 1486
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [15]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1478
                self.match(ObjectiveCParser.GOTO)
                self.state = 1479
                self.identifier()
                pass
            elif token in [6]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1480
                self.match(ObjectiveCParser.CONTINUE)
                pass
            elif token in [2]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1481
                self.match(ObjectiveCParser.BREAK)
                pass
            elif token in [22]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1482
                self.match(ObjectiveCParser.RETURN)
                self.state = 1484
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,194,self._ctx)
                if la_ == 1:
                    self.state = 1483
                    self.expression(0)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ObjectiveCParser.COMMA)
            else:
                return self.getToken(ObjectiveCParser.COMMA, i)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_expressions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressions" ):
                listener.enterExpressions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressions" ):
                listener.exitExpressions(self)




    def expressions(self):

        localctx = ObjectiveCParser.ExpressionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_expressions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1488
            self.expression(0)
            self.state = 1493
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,196,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1489
                    self.match(ObjectiveCParser.COMMA)
                    self.state = 1490
                    self.expression(0) 
                self.state = 1495
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,196,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.assignmentExpression = None # ExpressionContext
            self.op = None # Token
            self.trueExpression = None # ExpressionContext
            self.falseExpression = None # ExpressionContext

        def castExpression(self):
            return self.getTypedRuleContext(ObjectiveCParser.CastExpressionContext,0)


        def LP(self):
            return self.getToken(ObjectiveCParser.LP, 0)

        def compoundStatement(self):
            return self.getTypedRuleContext(ObjectiveCParser.CompoundStatementContext,0)


        def RP(self):
            return self.getToken(ObjectiveCParser.RP, 0)

        def unaryExpression(self):
            return self.getTypedRuleContext(ObjectiveCParser.UnaryExpressionContext,0)


        def assignmentOperator(self):
            return self.getTypedRuleContext(ObjectiveCParser.AssignmentOperatorContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.ExpressionContext,i)


        def MUL(self):
            return self.getToken(ObjectiveCParser.MUL, 0)

        def DIV(self):
            return self.getToken(ObjectiveCParser.DIV, 0)

        def MOD(self):
            return self.getToken(ObjectiveCParser.MOD, 0)

        def ADD(self):
            return self.getToken(ObjectiveCParser.ADD, 0)

        def SUB(self):
            return self.getToken(ObjectiveCParser.SUB, 0)

        def LT(self, i:int=None):
            if i is None:
                return self.getTokens(ObjectiveCParser.LT)
            else:
                return self.getToken(ObjectiveCParser.LT, i)

        def GT(self, i:int=None):
            if i is None:
                return self.getTokens(ObjectiveCParser.GT)
            else:
                return self.getToken(ObjectiveCParser.GT, i)

        def LE(self):
            return self.getToken(ObjectiveCParser.LE, 0)

        def GE(self):
            return self.getToken(ObjectiveCParser.GE, 0)

        def NOTEQUAL(self):
            return self.getToken(ObjectiveCParser.NOTEQUAL, 0)

        def EQUAL(self):
            return self.getToken(ObjectiveCParser.EQUAL, 0)

        def BITAND(self):
            return self.getToken(ObjectiveCParser.BITAND, 0)

        def BITXOR(self):
            return self.getToken(ObjectiveCParser.BITXOR, 0)

        def BITOR(self):
            return self.getToken(ObjectiveCParser.BITOR, 0)

        def AND(self):
            return self.getToken(ObjectiveCParser.AND, 0)

        def OR(self):
            return self.getToken(ObjectiveCParser.OR, 0)

        def QUESTION(self):
            return self.getToken(ObjectiveCParser.QUESTION, 0)

        def COLON(self):
            return self.getToken(ObjectiveCParser.COLON, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ObjectiveCParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 258
        self.enterRecursionRule(localctx, 258, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1506
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,197,self._ctx)
            if la_ == 1:
                self.state = 1497
                self.castExpression()
                pass

            elif la_ == 2:
                self.state = 1498
                self.match(ObjectiveCParser.LP)
                self.state = 1499
                self.compoundStatement()
                self.state = 1500
                self.match(ObjectiveCParser.RP)
                pass

            elif la_ == 3:
                self.state = 1502
                self.unaryExpression()
                self.state = 1503
                self.assignmentOperator()
                self.state = 1504
                localctx.assignmentExpression = self.expression(1)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1552
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,201,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1550
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,200,self._ctx)
                    if la_ == 1:
                        localctx = ObjectiveCParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1508
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 1509
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 154)) & ~0x3f) == 0 and ((1 << (_la - 154)) & 35) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1510
                        self.expression(14)
                        pass

                    elif la_ == 2:
                        localctx = ObjectiveCParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1511
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 1512
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==152 or _la==153):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1513
                        self.expression(13)
                        pass

                    elif la_ == 3:
                        localctx = ObjectiveCParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1514
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 1519
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [139]:
                            self.state = 1515
                            self.match(ObjectiveCParser.LT)
                            self.state = 1516
                            self.match(ObjectiveCParser.LT)
                            pass
                        elif token in [138]:
                            self.state = 1517
                            self.match(ObjectiveCParser.GT)
                            self.state = 1518
                            self.match(ObjectiveCParser.GT)
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 1521
                        self.expression(12)
                        pass

                    elif la_ == 4:
                        localctx = ObjectiveCParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1522
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 1523
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 138)) & ~0x3f) == 0 and ((1 << (_la - 138)) & 387) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1524
                        self.expression(11)
                        pass

                    elif la_ == 5:
                        localctx = ObjectiveCParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1525
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 1526
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==144 or _la==147):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1527
                        self.expression(10)
                        pass

                    elif la_ == 6:
                        localctx = ObjectiveCParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1528
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 1529
                        localctx.op = self.match(ObjectiveCParser.BITAND)
                        self.state = 1530
                        self.expression(9)
                        pass

                    elif la_ == 7:
                        localctx = ObjectiveCParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1531
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 1532
                        localctx.op = self.match(ObjectiveCParser.BITXOR)
                        self.state = 1533
                        self.expression(8)
                        pass

                    elif la_ == 8:
                        localctx = ObjectiveCParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1534
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 1535
                        localctx.op = self.match(ObjectiveCParser.BITOR)
                        self.state = 1536
                        self.expression(7)
                        pass

                    elif la_ == 9:
                        localctx = ObjectiveCParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1537
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1538
                        localctx.op = self.match(ObjectiveCParser.AND)
                        self.state = 1539
                        self.expression(6)
                        pass

                    elif la_ == 10:
                        localctx = ObjectiveCParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1540
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 1541
                        localctx.op = self.match(ObjectiveCParser.OR)
                        self.state = 1542
                        self.expression(5)
                        pass

                    elif la_ == 11:
                        localctx = ObjectiveCParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1543
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1544
                        self.match(ObjectiveCParser.QUESTION)
                        self.state = 1546
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4899916119734747136) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 2523141690462269569) != 0) or ((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & 4363692523569) != 0):
                            self.state = 1545
                            localctx.trueExpression = self.expression(0)


                        self.state = 1548
                        self.match(ObjectiveCParser.COLON)
                        self.state = 1549
                        localctx.falseExpression = self.expression(4)
                        pass

             
                self.state = 1554
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,201,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AssignmentOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSIGNMENT(self):
            return self.getToken(ObjectiveCParser.ASSIGNMENT, 0)

        def MUL_ASSIGN(self):
            return self.getToken(ObjectiveCParser.MUL_ASSIGN, 0)

        def DIV_ASSIGN(self):
            return self.getToken(ObjectiveCParser.DIV_ASSIGN, 0)

        def MOD_ASSIGN(self):
            return self.getToken(ObjectiveCParser.MOD_ASSIGN, 0)

        def ADD_ASSIGN(self):
            return self.getToken(ObjectiveCParser.ADD_ASSIGN, 0)

        def SUB_ASSIGN(self):
            return self.getToken(ObjectiveCParser.SUB_ASSIGN, 0)

        def LSHIFT_ASSIGN(self):
            return self.getToken(ObjectiveCParser.LSHIFT_ASSIGN, 0)

        def RSHIFT_ASSIGN(self):
            return self.getToken(ObjectiveCParser.RSHIFT_ASSIGN, 0)

        def AND_ASSIGN(self):
            return self.getToken(ObjectiveCParser.AND_ASSIGN, 0)

        def XOR_ASSIGN(self):
            return self.getToken(ObjectiveCParser.XOR_ASSIGN, 0)

        def OR_ASSIGN(self):
            return self.getToken(ObjectiveCParser.OR_ASSIGN, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_assignmentOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentOperator" ):
                listener.enterAssignmentOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentOperator" ):
                listener.exitAssignmentOperator(self)




    def assignmentOperator(self):

        localctx = ObjectiveCParser.AssignmentOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_assignmentOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1555
            _la = self._input.LA(1)
            if not(((((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & 8581545985) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CastExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unaryExpression(self):
            return self.getTypedRuleContext(ObjectiveCParser.UnaryExpressionContext,0)


        def LP(self):
            return self.getToken(ObjectiveCParser.LP, 0)

        def typeName(self):
            return self.getTypedRuleContext(ObjectiveCParser.TypeNameContext,0)


        def RP(self):
            return self.getToken(ObjectiveCParser.RP, 0)

        def castExpression(self):
            return self.getTypedRuleContext(ObjectiveCParser.CastExpressionContext,0)


        def initializer(self):
            return self.getTypedRuleContext(ObjectiveCParser.InitializerContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_castExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastExpression" ):
                listener.enterCastExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastExpression" ):
                listener.exitCastExpression(self)




    def castExpression(self):

        localctx = ObjectiveCParser.CastExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_castExpression)
        try:
            self.state = 1566
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,203,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1557
                self.unaryExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1558
                self.match(ObjectiveCParser.LP)
                self.state = 1559
                self.typeName()
                self.state = 1560
                self.match(ObjectiveCParser.RP)
                self.state = 1564
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,202,self._ctx)
                if la_ == 1:
                    self.state = 1562
                    self.castExpression()
                    pass

                elif la_ == 2:
                    self.state = 1563
                    self.initializer()
                    pass


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(ObjectiveCParser.ExpressionContext,0)


        def arrayInitializer(self):
            return self.getTypedRuleContext(ObjectiveCParser.ArrayInitializerContext,0)


        def structInitializer(self):
            return self.getTypedRuleContext(ObjectiveCParser.StructInitializerContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializer" ):
                listener.enterInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializer" ):
                listener.exitInitializer(self)




    def initializer(self):

        localctx = ObjectiveCParser.InitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_initializer)
        try:
            self.state = 1571
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,204,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1568
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1569
                self.arrayInitializer()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1570
                self.structInitializer()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.IdentifierContext,0)


        def constant(self):
            return self.getTypedRuleContext(ObjectiveCParser.ConstantContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_constantExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantExpression" ):
                listener.enterConstantExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantExpression" ):
                listener.exitConstantExpression(self)




    def constantExpression(self):

        localctx = ObjectiveCParser.ConstantExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_constantExpression)
        try:
            self.state = 1575
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 81, 82, 83, 85, 86, 88, 89, 90, 91, 92, 93, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 125]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1573
                self.identifier()
                pass
            elif token in [38, 39, 48, 49, 50, 57, 152, 153, 171, 173, 174, 175, 176, 177]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1574
                self.constant()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.op = None # Token

        def postfixExpression(self):
            return self.getTypedRuleContext(ObjectiveCParser.PostfixExpressionContext,0)


        def SIZEOF(self):
            return self.getToken(ObjectiveCParser.SIZEOF, 0)

        def unaryExpression(self):
            return self.getTypedRuleContext(ObjectiveCParser.UnaryExpressionContext,0)


        def LP(self):
            return self.getToken(ObjectiveCParser.LP, 0)

        def typeSpecifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.TypeSpecifierContext,0)


        def RP(self):
            return self.getToken(ObjectiveCParser.RP, 0)

        def INC(self):
            return self.getToken(ObjectiveCParser.INC, 0)

        def DEC(self):
            return self.getToken(ObjectiveCParser.DEC, 0)

        def unaryOperator(self):
            return self.getTypedRuleContext(ObjectiveCParser.UnaryOperatorContext,0)


        def castExpression(self):
            return self.getTypedRuleContext(ObjectiveCParser.CastExpressionContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_unaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryExpression" ):
                listener.enterUnaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryExpression" ):
                listener.exitUnaryExpression(self)




    def unaryExpression(self):

        localctx = ObjectiveCParser.UnaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_unaryExpression)
        self._la = 0 # Token type
        try:
            self.state = 1591
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,207,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1577
                self.postfixExpression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1578
                self.match(ObjectiveCParser.SIZEOF)
                self.state = 1584
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,206,self._ctx)
                if la_ == 1:
                    self.state = 1579
                    self.unaryExpression()
                    pass

                elif la_ == 2:
                    self.state = 1580
                    self.match(ObjectiveCParser.LP)
                    self.state = 1581
                    self.typeSpecifier()
                    self.state = 1582
                    self.match(ObjectiveCParser.RP)
                    pass


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1586
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==150 or _la==151):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1587
                self.unaryExpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1588
                self.unaryOperator()
                self.state = 1589
                self.castExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BITAND(self):
            return self.getToken(ObjectiveCParser.BITAND, 0)

        def MUL(self):
            return self.getToken(ObjectiveCParser.MUL, 0)

        def ADD(self):
            return self.getToken(ObjectiveCParser.ADD, 0)

        def SUB(self):
            return self.getToken(ObjectiveCParser.SUB, 0)

        def TILDE(self):
            return self.getToken(ObjectiveCParser.TILDE, 0)

        def BANG(self):
            return self.getToken(ObjectiveCParser.BANG, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_unaryOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryOperator" ):
                listener.enterUnaryOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryOperator" ):
                listener.exitUnaryOperator(self)




    def unaryOperator(self):

        localctx = ObjectiveCParser.UnaryOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_unaryOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1593
            _la = self._input.LA(1)
            if not(((((_la - 140)) & ~0x3f) == 0 and ((1 << (_la - 140)) & 94211) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PostfixExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primaryExpression(self):
            return self.getTypedRuleContext(ObjectiveCParser.PrimaryExpressionContext,0)


        def postfix(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.PostfixContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.PostfixContext,i)


        def postfixExpression(self):
            return self.getTypedRuleContext(ObjectiveCParser.PostfixExpressionContext,0)


        def identifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.IdentifierContext,0)


        def DOT(self):
            return self.getToken(ObjectiveCParser.DOT, 0)

        def STRUCTACCESS(self):
            return self.getToken(ObjectiveCParser.STRUCTACCESS, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_postfixExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixExpression" ):
                listener.enterPostfixExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixExpression" ):
                listener.exitPostfixExpression(self)



    def postfixExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ObjectiveCParser.PostfixExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 272
        self.enterRecursionRule(localctx, 272, self.RULE_postfixExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1596
            self.primaryExpression()
            self.state = 1600
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,208,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1597
                    self.postfix() 
                self.state = 1602
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,208,self._ctx)

            self._ctx.stop = self._input.LT(-1)
            self.state = 1614
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,210,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = ObjectiveCParser.PostfixExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixExpression)
                    self.state = 1603
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1604
                    _la = self._input.LA(1)
                    if not(_la==134 or _la==135):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1605
                    self.identifier()
                    self.state = 1609
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,209,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1606
                            self.postfix() 
                        self.state = 1611
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,209,self._ctx)
             
                self.state = 1616
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,210,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PostfixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._RP = None # Token
            self.macroArguments = list() # of Tokens
            self._tset3190 = None # Token
            self.op = None # Token

        def LBRACK(self):
            return self.getToken(ObjectiveCParser.LBRACK, 0)

        def expression(self):
            return self.getTypedRuleContext(ObjectiveCParser.ExpressionContext,0)


        def RBRACK(self):
            return self.getToken(ObjectiveCParser.RBRACK, 0)

        def LP(self):
            return self.getToken(ObjectiveCParser.LP, 0)

        def RP(self, i:int=None):
            if i is None:
                return self.getTokens(ObjectiveCParser.RP)
            else:
                return self.getToken(ObjectiveCParser.RP, i)

        def argumentExpressionList(self):
            return self.getTypedRuleContext(ObjectiveCParser.ArgumentExpressionListContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ObjectiveCParser.COMMA)
            else:
                return self.getToken(ObjectiveCParser.COMMA, i)

        def INC(self):
            return self.getToken(ObjectiveCParser.INC, 0)

        def DEC(self):
            return self.getToken(ObjectiveCParser.DEC, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_postfix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfix" ):
                listener.enterPostfix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfix" ):
                listener.exitPostfix(self)




    def postfix(self):

        localctx = ObjectiveCParser.PostfixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_postfix)
        self._la = 0 # Token type
        try:
            self.state = 1635
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,214,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1617
                self.match(ObjectiveCParser.LBRACK)
                self.state = 1618
                self.expression(0)
                self.state = 1619
                self.match(ObjectiveCParser.RBRACK)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1621
                self.match(ObjectiveCParser.LP)
                self.state = 1623
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4899916127411120656) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 2523141690529378433) != 0) or ((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & 4363692523569) != 0):
                    self.state = 1622
                    self.argumentExpressionList()


                self.state = 1625
                self.match(ObjectiveCParser.RP)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1626
                self.match(ObjectiveCParser.LP)
                self.state = 1629 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1629
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,212,self._ctx)
                    if la_ == 1:
                        self.state = 1627
                        self.match(ObjectiveCParser.COMMA)
                        pass

                    elif la_ == 2:
                        self.state = 1628
                        localctx._tset3190 = self._input.LT(1)
                        _la = self._input.LA(1)
                        if _la <= 0 or _la==127:
                            localctx._tset3190 = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        localctx.macroArguments.append(localctx._tset3190)
                        pass


                    self.state = 1631 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -2) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 9223372036854775807) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -1) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 2147483647) != 0)):
                        break

                self.state = 1633
                self.match(ObjectiveCParser.RP)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1634
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==150 or _la==151):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentExpressionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argumentExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ObjectiveCParser.ArgumentExpressionContext)
            else:
                return self.getTypedRuleContext(ObjectiveCParser.ArgumentExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ObjectiveCParser.COMMA)
            else:
                return self.getToken(ObjectiveCParser.COMMA, i)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_argumentExpressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgumentExpressionList" ):
                listener.enterArgumentExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgumentExpressionList" ):
                listener.exitArgumentExpressionList(self)




    def argumentExpressionList(self):

        localctx = ObjectiveCParser.ArgumentExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_argumentExpressionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1637
            self.argumentExpression()
            self.state = 1642
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==133:
                self.state = 1638
                self.match(ObjectiveCParser.COMMA)
                self.state = 1639
                self.argumentExpression()
                self.state = 1644
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(ObjectiveCParser.ExpressionContext,0)


        def typeSpecifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.TypeSpecifierContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_argumentExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgumentExpression" ):
                listener.enterArgumentExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgumentExpression" ):
                listener.exitArgumentExpression(self)




    def argumentExpression(self):

        localctx = ObjectiveCParser.ArgumentExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_argumentExpression)
        try:
            self.state = 1647
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,216,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1645
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1646
                self.typeSpecifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ObjectiveCParser.IdentifierContext,0)


        def constant(self):
            return self.getTypedRuleContext(ObjectiveCParser.ConstantContext,0)


        def stringLiteral(self):
            return self.getTypedRuleContext(ObjectiveCParser.StringLiteralContext,0)


        def LP(self):
            return self.getToken(ObjectiveCParser.LP, 0)

        def expression(self):
            return self.getTypedRuleContext(ObjectiveCParser.ExpressionContext,0)


        def RP(self):
            return self.getToken(ObjectiveCParser.RP, 0)

        def messageExpression(self):
            return self.getTypedRuleContext(ObjectiveCParser.MessageExpressionContext,0)


        def selectorExpression(self):
            return self.getTypedRuleContext(ObjectiveCParser.SelectorExpressionContext,0)


        def protocolExpression(self):
            return self.getTypedRuleContext(ObjectiveCParser.ProtocolExpressionContext,0)


        def encodeExpression(self):
            return self.getTypedRuleContext(ObjectiveCParser.EncodeExpressionContext,0)


        def dictionaryExpression(self):
            return self.getTypedRuleContext(ObjectiveCParser.DictionaryExpressionContext,0)


        def arrayExpression(self):
            return self.getTypedRuleContext(ObjectiveCParser.ArrayExpressionContext,0)


        def boxExpression(self):
            return self.getTypedRuleContext(ObjectiveCParser.BoxExpressionContext,0)


        def blockExpression(self):
            return self.getTypedRuleContext(ObjectiveCParser.BlockExpressionContext,0)


        def getRuleIndex(self):
            return ObjectiveCParser.RULE_primaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExpression" ):
                listener.enterPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExpression" ):
                listener.exitPrimaryExpression(self)




    def primaryExpression(self):

        localctx = ObjectiveCParser.PrimaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_primaryExpression)
        try:
            self.state = 1664
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,217,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1649
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1650
                self.constant()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1651
                self.stringLiteral()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1652
                self.match(ObjectiveCParser.LP)
                self.state = 1653
                self.expression(0)
                self.state = 1654
                self.match(ObjectiveCParser.RP)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1656
                self.messageExpression()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1657
                self.selectorExpression()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1658
                self.protocolExpression()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1659
                self.encodeExpression()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1660
                self.dictionaryExpression()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1661
                self.arrayExpression()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1662
                self.boxExpression()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1663
                self.blockExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HEX_LITERAL(self):
            return self.getToken(ObjectiveCParser.HEX_LITERAL, 0)

        def OCTAL_LITERAL(self):
            return self.getToken(ObjectiveCParser.OCTAL_LITERAL, 0)

        def BINARY_LITERAL(self):
            return self.getToken(ObjectiveCParser.BINARY_LITERAL, 0)

        def DECIMAL_LITERAL(self):
            return self.getToken(ObjectiveCParser.DECIMAL_LITERAL, 0)

        def ADD(self):
            return self.getToken(ObjectiveCParser.ADD, 0)

        def SUB(self):
            return self.getToken(ObjectiveCParser.SUB, 0)

        def FLOATING_POINT_LITERAL(self):
            return self.getToken(ObjectiveCParser.FLOATING_POINT_LITERAL, 0)

        def CHARACTER_LITERAL(self):
            return self.getToken(ObjectiveCParser.CHARACTER_LITERAL, 0)

        def NIL(self):
            return self.getToken(ObjectiveCParser.NIL, 0)

        def NULL_(self):
            return self.getToken(ObjectiveCParser.NULL_, 0)

        def YES(self):
            return self.getToken(ObjectiveCParser.YES, 0)

        def NO(self):
            return self.getToken(ObjectiveCParser.NO, 0)

        def TRUE(self):
            return self.getToken(ObjectiveCParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(ObjectiveCParser.FALSE, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_constant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant" ):
                listener.enterConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant" ):
                listener.exitConstant(self)




    def constant(self):

        localctx = ObjectiveCParser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_constant)
        self._la = 0 # Token type
        try:
            self.state = 1684
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,220,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1666
                self.match(ObjectiveCParser.HEX_LITERAL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1667
                self.match(ObjectiveCParser.OCTAL_LITERAL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1668
                self.match(ObjectiveCParser.BINARY_LITERAL)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1670
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==152 or _la==153:
                    self.state = 1669
                    _la = self._input.LA(1)
                    if not(_la==152 or _la==153):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1672
                self.match(ObjectiveCParser.DECIMAL_LITERAL)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1674
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==152 or _la==153:
                    self.state = 1673
                    _la = self._input.LA(1)
                    if not(_la==152 or _la==153):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1676
                self.match(ObjectiveCParser.FLOATING_POINT_LITERAL)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1677
                self.match(ObjectiveCParser.CHARACTER_LITERAL)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1678
                self.match(ObjectiveCParser.NIL)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1679
                self.match(ObjectiveCParser.NULL_)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1680
                self.match(ObjectiveCParser.YES)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1681
                self.match(ObjectiveCParser.NO)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1682
                self.match(ObjectiveCParser.TRUE)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1683
                self.match(ObjectiveCParser.FALSE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_START(self, i:int=None):
            if i is None:
                return self.getTokens(ObjectiveCParser.STRING_START)
            else:
                return self.getToken(ObjectiveCParser.STRING_START, i)

        def STRING_END(self, i:int=None):
            if i is None:
                return self.getTokens(ObjectiveCParser.STRING_END)
            else:
                return self.getToken(ObjectiveCParser.STRING_END, i)

        def STRING_VALUE(self, i:int=None):
            if i is None:
                return self.getTokens(ObjectiveCParser.STRING_VALUE)
            else:
                return self.getToken(ObjectiveCParser.STRING_VALUE, i)

        def STRING_NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(ObjectiveCParser.STRING_NEWLINE)
            else:
                return self.getToken(ObjectiveCParser.STRING_NEWLINE, i)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_stringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)




    def stringLiteral(self):

        localctx = ObjectiveCParser.StringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_stringLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1694 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1686
                    self.match(ObjectiveCParser.STRING_START)
                    self.state = 1690
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==183 or _la==185:
                        self.state = 1687
                        _la = self._input.LA(1)
                        if not(_la==183 or _la==185):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1692
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1693
                    self.match(ObjectiveCParser.STRING_END)

                else:
                    raise NoViableAltException(self)
                self.state = 1696 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,222,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(ObjectiveCParser.IDENTIFIER, 0)

        def BOOL(self):
            return self.getToken(ObjectiveCParser.BOOL, 0)

        def Class(self):
            return self.getToken(ObjectiveCParser.Class, 0)

        def BYCOPY(self):
            return self.getToken(ObjectiveCParser.BYCOPY, 0)

        def BYREF(self):
            return self.getToken(ObjectiveCParser.BYREF, 0)

        def ID(self):
            return self.getToken(ObjectiveCParser.ID, 0)

        def IMP(self):
            return self.getToken(ObjectiveCParser.IMP, 0)

        def IN(self):
            return self.getToken(ObjectiveCParser.IN, 0)

        def INOUT(self):
            return self.getToken(ObjectiveCParser.INOUT, 0)

        def ONEWAY(self):
            return self.getToken(ObjectiveCParser.ONEWAY, 0)

        def OUT(self):
            return self.getToken(ObjectiveCParser.OUT, 0)

        def PROTOCOL_(self):
            return self.getToken(ObjectiveCParser.PROTOCOL_, 0)

        def SEL(self):
            return self.getToken(ObjectiveCParser.SEL, 0)

        def SELF(self):
            return self.getToken(ObjectiveCParser.SELF, 0)

        def SUPER(self):
            return self.getToken(ObjectiveCParser.SUPER, 0)

        def ATOMIC(self):
            return self.getToken(ObjectiveCParser.ATOMIC, 0)

        def NONATOMIC(self):
            return self.getToken(ObjectiveCParser.NONATOMIC, 0)

        def RETAIN(self):
            return self.getToken(ObjectiveCParser.RETAIN, 0)

        def AUTORELEASING_QUALIFIER(self):
            return self.getToken(ObjectiveCParser.AUTORELEASING_QUALIFIER, 0)

        def BLOCK(self):
            return self.getToken(ObjectiveCParser.BLOCK, 0)

        def BRIDGE_RETAINED(self):
            return self.getToken(ObjectiveCParser.BRIDGE_RETAINED, 0)

        def BRIDGE_TRANSFER(self):
            return self.getToken(ObjectiveCParser.BRIDGE_TRANSFER, 0)

        def COVARIANT(self):
            return self.getToken(ObjectiveCParser.COVARIANT, 0)

        def CONTRAVARIANT(self):
            return self.getToken(ObjectiveCParser.CONTRAVARIANT, 0)

        def DEPRECATED(self):
            return self.getToken(ObjectiveCParser.DEPRECATED, 0)

        def KINDOF(self):
            return self.getToken(ObjectiveCParser.KINDOF, 0)

        def UNUSED(self):
            return self.getToken(ObjectiveCParser.UNUSED, 0)

        def NS_INLINE(self):
            return self.getToken(ObjectiveCParser.NS_INLINE, 0)

        def NS_ENUM(self):
            return self.getToken(ObjectiveCParser.NS_ENUM, 0)

        def NS_OPTIONS(self):
            return self.getToken(ObjectiveCParser.NS_OPTIONS, 0)

        def NULL_UNSPECIFIED(self):
            return self.getToken(ObjectiveCParser.NULL_UNSPECIFIED, 0)

        def NULLABLE(self):
            return self.getToken(ObjectiveCParser.NULLABLE, 0)

        def NONNULL(self):
            return self.getToken(ObjectiveCParser.NONNULL, 0)

        def NULL_RESETTABLE(self):
            return self.getToken(ObjectiveCParser.NULL_RESETTABLE, 0)

        def ASSIGN(self):
            return self.getToken(ObjectiveCParser.ASSIGN, 0)

        def COPY(self):
            return self.getToken(ObjectiveCParser.COPY, 0)

        def GETTER(self):
            return self.getToken(ObjectiveCParser.GETTER, 0)

        def SETTER(self):
            return self.getToken(ObjectiveCParser.SETTER, 0)

        def STRONG(self):
            return self.getToken(ObjectiveCParser.STRONG, 0)

        def READONLY(self):
            return self.getToken(ObjectiveCParser.READONLY, 0)

        def READWRITE(self):
            return self.getToken(ObjectiveCParser.READWRITE, 0)

        def WEAK(self):
            return self.getToken(ObjectiveCParser.WEAK, 0)

        def UNSAFE_UNRETAINED(self):
            return self.getToken(ObjectiveCParser.UNSAFE_UNRETAINED, 0)

        def IB_OUTLET(self):
            return self.getToken(ObjectiveCParser.IB_OUTLET, 0)

        def IB_OUTLET_COLLECTION(self):
            return self.getToken(ObjectiveCParser.IB_OUTLET_COLLECTION, 0)

        def IB_INSPECTABLE(self):
            return self.getToken(ObjectiveCParser.IB_INSPECTABLE, 0)

        def IB_DESIGNABLE(self):
            return self.getToken(ObjectiveCParser.IB_DESIGNABLE, 0)

        def getRuleIndex(self):
            return ObjectiveCParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)




    def identifier(self):

        localctx = ObjectiveCParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1698
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 142143763727253504) != 0) or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & 17867063762871) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[129] = self.expression_sempred
        self._predicates[136] = self.postfixExpression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 3)
         

    def postfixExpression_sempred(self, localctx:PostfixExpressionContext, predIndex:int):
            if predIndex == 11:
                return self.precpred(self._ctx, 1)
         




