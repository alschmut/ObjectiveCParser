# Generated from Swift5Parser.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

if "." in __name__:
    from .SwiftSupport import SwiftSupport
else:
    from SwiftSupport import SwiftSupport

def serializedATN():
    return [
        4,1,193,2872,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
        2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,
        7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,
        2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,
        7,186,2,187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,7,191,
        2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,2,196,7,196,2,197,
        7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,2,202,7,202,
        2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,2,208,
        7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,7,213,
        2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,2,219,
        7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,
        2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,
        7,230,2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,
        2,236,7,236,2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,2,241,
        7,241,2,242,7,242,2,243,7,243,2,244,7,244,2,245,7,245,2,246,7,246,
        2,247,7,247,2,248,7,248,2,249,7,249,2,250,7,250,2,251,7,251,2,252,
        7,252,2,253,7,253,2,254,7,254,2,255,7,255,2,256,7,256,2,257,7,257,
        2,258,7,258,2,259,7,259,2,260,7,260,2,261,7,261,2,262,7,262,2,263,
        7,263,2,264,7,264,2,265,7,265,2,266,7,266,2,267,7,267,2,268,7,268,
        2,269,7,269,2,270,7,270,2,271,7,271,2,272,7,272,2,273,7,273,2,274,
        7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,7,278,2,279,7,279,
        2,280,7,280,2,281,7,281,2,282,7,282,2,283,7,283,2,284,7,284,2,285,
        7,285,2,286,7,286,2,287,7,287,2,288,7,288,2,289,7,289,2,290,7,290,
        2,291,7,291,2,292,7,292,2,293,7,293,2,294,7,294,2,295,7,295,2,296,
        7,296,2,297,7,297,2,298,7,298,2,299,7,299,2,300,7,300,2,301,7,301,
        2,302,7,302,2,303,7,303,2,304,7,304,2,305,7,305,2,306,7,306,2,307,
        7,307,2,308,7,308,2,309,7,309,2,310,7,310,2,311,7,311,2,312,7,312,
        2,313,7,313,1,0,3,0,630,8,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,3,1,642,8,1,1,1,3,1,645,8,1,1,1,3,1,648,8,1,1,2,1,2,1,2,1,2,
        4,2,654,8,2,11,2,12,2,655,1,3,1,3,1,3,3,3,661,8,3,1,4,1,4,3,4,665,
        8,4,1,4,1,4,1,4,1,4,3,4,671,8,4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,
        1,6,5,6,682,8,6,10,6,12,6,685,9,6,1,7,1,7,1,7,1,7,3,7,691,8,7,1,
        8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,
        1,11,3,11,709,8,11,1,12,1,12,1,12,1,12,3,12,715,8,12,1,13,1,13,1,
        13,1,13,3,13,721,8,13,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,
        15,3,15,732,8,15,1,15,1,15,1,16,1,16,3,16,738,8,16,1,17,1,17,3,17,
        742,8,17,1,17,1,17,1,17,3,17,747,8,17,1,18,3,18,750,8,18,1,18,1,
        18,1,18,1,18,1,19,1,19,3,19,758,8,19,1,19,1,19,1,19,3,19,763,8,19,
        5,19,765,8,19,10,19,12,19,768,9,19,1,20,3,20,771,8,20,1,20,1,20,
        1,20,1,21,1,21,1,21,1,22,1,22,1,23,1,23,3,23,783,8,23,1,23,3,23,
        786,8,23,1,23,1,23,1,24,1,24,1,24,3,24,793,8,24,1,25,1,25,3,25,797,
        8,25,1,26,1,26,1,26,3,26,802,8,26,1,27,1,27,3,27,806,8,27,1,28,1,
        28,1,28,1,28,1,28,3,28,813,8,28,1,29,1,29,1,29,1,30,1,30,1,31,1,
        31,1,31,1,31,1,31,3,31,825,8,31,1,32,1,32,3,32,829,8,32,1,33,1,33,
        3,33,833,8,33,1,34,1,34,1,35,1,35,3,35,839,8,35,1,36,1,36,1,36,1,
        37,1,37,1,37,1,38,1,38,1,38,3,38,850,8,38,1,39,4,39,853,8,39,11,
        39,12,39,854,1,40,1,40,3,40,859,8,40,1,40,1,40,1,41,1,41,1,41,1,
        41,1,41,5,41,868,8,41,10,41,12,41,871,9,41,1,42,1,42,3,42,875,8,
        42,1,43,1,43,1,43,3,43,880,8,43,1,44,1,44,3,44,884,8,44,1,44,3,44,
        887,8,44,1,44,1,44,1,45,1,45,1,45,3,45,894,8,45,1,46,4,46,897,8,
        46,11,46,12,46,898,1,47,1,47,1,47,3,47,904,8,47,1,48,1,48,3,48,908,
        8,48,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,3,49,920,
        8,49,1,49,1,49,1,49,3,49,925,8,49,1,49,1,49,5,49,929,8,49,10,49,
        12,49,932,9,49,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,
        1,50,1,50,1,50,1,50,3,50,948,8,50,1,50,1,50,1,50,1,50,1,50,1,50,
        1,50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,963,8,50,1,51,1,51,3,51,
        967,8,51,1,52,1,52,1,52,3,52,972,8,52,1,53,1,53,1,54,1,54,1,55,1,
        55,1,55,5,55,981,8,55,10,55,12,55,984,9,55,1,56,1,56,1,57,1,57,1,
        57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,3,57,998,8,57,1,57,1,57,1,
        58,1,58,1,59,1,59,1,60,1,60,1,60,1,60,1,60,1,61,1,61,1,62,1,62,1,
        62,1,62,1,62,1,63,1,63,1,63,5,63,1021,8,63,10,63,12,63,1024,9,63,
        1,64,1,64,1,64,1,64,3,64,1030,8,64,1,65,1,65,1,66,1,66,1,66,1,66,
        1,66,3,66,1039,8,66,3,66,1041,8,66,1,67,1,67,1,67,1,67,1,68,1,68,
        1,68,5,68,1050,8,68,10,68,12,68,1053,9,68,1,69,1,69,1,69,1,69,3,
        69,1059,8,69,3,69,1061,8,69,1,70,1,70,1,70,1,71,1,71,1,71,5,71,1069,
        8,71,10,71,12,71,1072,9,71,1,72,1,72,3,72,1076,8,72,1,73,1,73,1,
        73,1,73,3,73,1082,8,73,1,74,1,74,1,74,1,74,3,74,1088,8,74,1,75,1,
        75,1,75,1,75,1,76,1,76,1,76,5,76,1097,8,76,10,76,12,76,1100,9,76,
        1,77,1,77,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,
        1,78,1,78,1,78,1,78,3,78,1119,8,78,1,78,3,78,1122,8,78,1,79,4,79,
        1125,8,79,11,79,12,79,1126,1,80,3,80,1130,8,80,1,81,1,81,3,81,1134,
        8,81,1,81,1,81,1,82,3,82,1139,8,82,1,82,1,82,3,82,1143,8,82,1,82,
        1,82,1,83,1,83,1,84,1,84,1,84,5,84,1152,8,84,10,84,12,84,1155,9,
        84,1,85,1,85,3,85,1159,8,85,1,86,3,86,1162,8,86,1,86,3,86,1165,8,
        86,1,86,1,86,1,86,1,87,1,87,1,87,5,87,1173,8,87,10,87,12,87,1176,
        9,87,1,88,1,88,3,88,1180,8,88,1,89,1,89,1,89,1,90,1,90,1,90,1,90,
        1,90,1,90,1,90,3,90,1192,8,90,1,90,1,90,1,90,3,90,1197,8,90,3,90,
        1199,8,90,1,90,3,90,1202,8,90,1,91,3,91,1205,8,91,1,91,3,91,1208,
        8,91,1,91,1,91,1,92,1,92,1,93,1,93,1,93,3,93,1217,8,93,1,93,1,93,
        1,93,3,93,1222,8,93,1,93,1,93,1,93,3,93,1227,8,93,1,94,3,94,1230,
        8,94,1,94,3,94,1233,8,94,1,94,1,94,3,94,1237,8,94,1,95,3,95,1240,
        8,95,1,95,3,95,1243,8,95,1,95,1,95,3,95,1247,8,95,1,95,3,95,1250,
        8,95,1,96,1,96,1,96,1,96,1,97,1,97,1,97,3,97,1259,8,97,1,97,1,97,
        1,97,3,97,1264,8,97,1,97,1,97,1,98,3,98,1269,8,98,1,98,3,98,1272,
        8,98,1,98,1,98,1,99,3,99,1277,8,99,1,99,3,99,1280,8,99,1,99,1,99,
        1,100,1,100,1,100,3,100,1287,8,100,1,100,1,100,3,100,1291,8,100,
        3,100,1293,8,100,1,100,1,100,1,101,3,101,1298,8,101,1,101,1,101,
        3,101,1302,8,101,1,101,1,101,1,102,3,102,1307,8,102,1,102,1,102,
        3,102,1311,8,102,1,102,1,102,1,103,3,103,1316,8,103,1,103,3,103,
        1319,8,103,1,103,1,103,1,103,3,103,1324,8,103,1,103,1,103,1,104,
        1,104,1,105,1,105,1,105,1,106,1,106,1,106,3,106,1336,8,106,1,106,
        1,106,3,106,1340,8,106,1,106,3,106,1343,8,106,1,107,3,107,1346,8,
        107,1,107,3,107,1349,8,107,1,107,1,107,1,108,1,108,3,108,1355,8,
        108,1,109,1,109,3,109,1359,8,109,1,109,3,109,1362,8,109,1,109,3,
        109,1365,8,109,1,110,1,110,3,110,1369,8,110,1,110,1,110,1,111,1,
        111,1,112,1,112,3,112,1377,8,112,1,112,1,112,1,113,1,113,1,113,5,
        113,1384,8,113,10,113,12,113,1387,9,113,1,114,3,114,1390,8,114,1,
        114,3,114,1393,8,114,1,114,1,114,1,114,3,114,1398,8,114,1,114,3,
        114,1401,8,114,1,115,1,115,1,116,1,116,1,117,1,117,1,117,1,118,3,
        118,1411,8,118,1,118,3,118,1414,8,118,1,118,1,118,3,118,1418,8,118,
        1,119,3,119,1421,8,119,1,119,1,119,1,119,3,119,1426,8,119,1,119,
        3,119,1429,8,119,1,119,3,119,1432,8,119,1,119,1,119,3,119,1436,8,
        119,1,119,1,119,1,120,4,120,1441,8,120,11,120,12,120,1442,1,121,
        1,121,1,121,3,121,1448,8,121,1,122,3,122,1451,8,122,1,122,3,122,
        1454,8,122,1,122,1,122,1,122,1,123,1,123,1,123,5,123,1462,8,123,
        10,123,12,123,1465,9,123,1,124,1,124,1,124,1,124,1,124,1,124,1,124,
        3,124,1474,8,124,3,124,1476,8,124,1,125,1,125,1,126,1,126,1,127,
        1,127,1,127,3,127,1485,8,127,1,127,1,127,3,127,1489,8,127,1,127,
        1,127,1,127,1,127,1,128,4,128,1496,8,128,11,128,12,128,1497,1,129,
        1,129,1,129,3,129,1503,8,129,1,130,3,130,1506,8,130,1,130,1,130,
        1,130,1,131,1,131,1,131,5,131,1514,8,131,10,131,12,131,1517,9,131,
        1,132,1,132,3,132,1521,8,132,1,133,1,133,1,133,1,134,1,134,1,134,
        3,134,1529,8,134,1,135,3,135,1532,8,135,1,135,3,135,1535,8,135,1,
        135,1,135,1,135,3,135,1540,8,135,1,135,3,135,1543,8,135,1,135,3,
        135,1546,8,135,1,135,1,135,1,136,1,136,1,137,1,137,1,137,1,137,1,
        138,5,138,1557,8,138,10,138,12,138,1560,9,138,1,139,1,139,3,139,
        1564,8,139,1,140,3,140,1567,8,140,1,140,3,140,1570,8,140,1,140,3,
        140,1573,8,140,1,140,1,140,3,140,1577,8,140,3,140,1579,8,140,1,140,
        1,140,1,140,3,140,1584,8,140,1,140,3,140,1587,8,140,1,140,3,140,
        1590,8,140,1,140,1,140,1,141,1,141,1,142,1,142,1,142,1,142,1,143,
        5,143,1601,8,143,10,143,12,143,1604,9,143,1,144,1,144,3,144,1608,
        8,144,1,145,3,145,1611,8,145,1,145,3,145,1614,8,145,1,145,1,145,
        1,145,1,145,1,145,3,145,1621,8,145,1,145,3,145,1624,8,145,1,145,
        1,145,1,146,1,146,1,147,1,147,1,147,1,147,1,148,5,148,1635,8,148,
        10,148,12,148,1638,9,148,1,149,1,149,3,149,1642,8,149,1,150,1,150,
        1,150,1,150,1,150,1,150,3,150,1650,8,150,1,151,1,151,1,151,1,151,
        1,151,1,152,1,152,1,152,3,152,1660,8,152,1,152,1,152,3,152,1664,
        8,152,1,153,1,153,3,153,1668,8,153,1,153,1,153,3,153,1672,8,153,
        1,153,3,153,1675,8,153,1,153,3,153,1678,8,153,1,154,1,154,1,154,
        3,154,1683,8,154,1,154,1,154,1,155,3,155,1688,8,155,1,155,3,155,
        1691,8,155,1,155,1,155,1,155,3,155,1696,8,155,1,155,3,155,1699,8,
        155,1,155,3,155,1702,8,155,1,156,1,156,3,156,1706,8,156,1,156,1,
        156,3,156,1710,8,156,1,156,3,156,1713,8,156,1,156,1,156,1,157,3,
        157,1718,8,157,1,157,3,157,1721,8,157,1,157,1,157,3,157,1725,8,157,
        1,158,1,158,1,159,3,159,1730,8,159,1,159,1,159,1,159,1,160,3,160,
        1736,8,160,1,160,3,160,1739,8,160,1,160,1,160,1,160,3,160,1744,8,
        160,1,160,3,160,1747,8,160,1,160,1,160,1,161,1,161,1,161,1,161,1,
        162,5,162,1756,8,162,10,162,12,162,1759,9,162,1,163,1,163,3,163,
        1763,8,163,1,164,1,164,1,164,3,164,1768,8,164,1,164,1,164,1,164,
        3,164,1773,8,164,1,165,3,165,1776,8,165,1,165,3,165,1779,8,165,1,
        165,1,165,3,165,1783,8,165,1,165,1,165,1,166,1,166,3,166,1789,8,
        166,1,166,1,166,1,167,1,167,1,167,3,167,1796,8,167,1,168,1,168,1,
        168,1,168,1,169,1,169,1,169,1,169,1,170,1,170,1,170,1,170,3,170,
        1810,8,170,1,171,1,171,1,171,1,172,1,172,1,172,1,172,3,172,1819,
        8,172,1,172,1,172,1,173,4,173,1824,8,173,11,173,12,173,1825,1,174,
        1,174,1,174,3,174,1831,8,174,1,175,1,175,1,175,1,175,1,176,1,176,
        1,176,1,176,1,177,1,177,1,177,1,177,1,178,1,178,1,178,5,178,1848,
        8,178,10,178,12,178,1851,9,178,1,179,1,179,1,179,5,179,1856,8,179,
        10,179,12,179,1859,9,179,1,180,1,180,1,180,1,180,1,180,1,180,1,180,
        1,180,1,180,1,180,1,180,1,180,1,180,1,180,1,180,1,180,3,180,1877,
        8,180,1,180,1,180,1,180,3,180,1882,8,180,1,181,4,181,1885,8,181,
        11,181,12,181,1886,1,182,1,182,1,182,1,182,3,182,1893,8,182,1,183,
        1,183,1,184,1,184,1,184,1,184,3,184,1901,8,184,1,184,3,184,1904,
        8,184,1,184,1,184,1,184,1,184,1,184,1,184,3,184,1912,8,184,1,184,
        1,184,1,184,5,184,1917,8,184,10,184,12,184,1920,9,184,1,185,1,185,
        1,186,1,186,1,187,1,187,1,187,1,187,3,187,1930,8,187,1,188,1,188,
        3,188,1934,8,188,1,188,1,188,1,189,1,189,1,189,5,189,1941,8,189,
        10,189,12,189,1944,9,189,1,190,1,190,1,190,3,190,1949,8,190,1,190,
        1,190,1,191,3,191,1954,8,191,1,191,1,191,1,191,3,191,1959,8,191,
        1,192,1,192,1,192,1,193,1,193,1,194,1,194,1,194,3,194,1969,8,194,
        1,195,1,195,1,195,5,195,1974,8,195,10,195,12,195,1977,9,195,1,196,
        1,196,3,196,1981,8,196,1,196,1,196,1,197,4,197,1986,8,197,11,197,
        12,197,1987,1,198,4,198,1991,8,198,11,198,12,198,1992,1,199,1,199,
        3,199,1997,8,199,1,199,1,199,1,199,3,199,2002,8,199,1,199,1,199,
        1,199,3,199,2007,8,199,1,199,1,199,1,199,1,199,1,199,1,199,3,199,
        2015,8,199,1,200,1,200,1,200,1,200,1,200,1,200,3,200,2023,8,200,
        1,201,3,201,2026,8,201,1,201,1,201,3,201,2030,8,201,1,202,1,202,
        1,202,5,202,2035,8,202,10,202,12,202,2038,9,202,1,203,3,203,2041,
        8,203,1,203,1,203,3,203,2045,8,203,1,204,1,204,1,204,1,205,1,205,
        3,205,2052,8,205,1,206,1,206,1,206,1,206,1,206,3,206,2059,8,206,
        1,206,3,206,2062,8,206,1,206,1,206,1,206,3,206,2067,8,206,1,207,
        4,207,2070,8,207,11,207,12,207,2071,1,208,1,208,1,208,1,208,1,209,
        1,209,1,209,3,209,2081,8,209,3,209,2083,8,209,1,209,1,209,1,210,
        1,210,3,210,2089,8,210,1,210,1,210,1,210,1,210,1,210,1,210,1,210,
        1,210,1,210,1,210,1,210,1,210,1,210,1,210,3,210,2105,8,210,1,211,
        1,211,1,211,1,211,1,211,3,211,2112,8,211,1,212,1,212,1,212,1,212,
        1,212,1,212,1,212,1,212,1,212,1,212,1,212,3,212,2125,8,212,1,213,
        1,213,3,213,2129,8,213,1,213,1,213,1,214,1,214,1,214,5,214,2136,
        8,214,10,214,12,214,2139,9,214,1,214,3,214,2142,8,214,1,215,1,215,
        1,216,1,216,1,216,3,216,2149,8,216,1,216,1,216,1,217,1,217,1,217,
        5,217,2156,8,217,10,217,12,217,2159,9,217,1,217,3,217,2162,8,217,
        1,218,1,218,1,218,1,218,1,219,1,219,1,219,1,219,1,219,1,219,1,219,
        1,219,1,219,1,219,1,219,1,219,1,219,1,219,1,219,1,219,1,219,1,219,
        1,219,1,219,1,219,1,219,1,219,1,219,1,219,1,219,1,219,1,219,1,219,
        1,219,1,219,1,219,1,219,3,219,2201,8,219,1,220,1,220,1,220,1,220,
        1,220,1,220,1,220,1,220,1,220,1,220,1,220,1,220,3,220,2215,8,220,
        1,221,1,221,1,221,1,221,1,221,1,221,1,221,1,221,1,221,1,221,1,221,
        3,221,2228,8,221,1,222,1,222,3,222,2232,8,222,1,222,3,222,2235,8,
        222,1,222,1,222,1,223,3,223,2240,8,223,1,223,1,223,3,223,2244,8,
        223,1,223,3,223,2247,8,223,1,223,1,223,1,223,1,223,1,223,3,223,2254,
        8,223,1,224,1,224,3,224,2258,8,224,1,224,1,224,3,224,2262,8,224,
        1,225,1,225,1,225,5,225,2267,8,225,10,225,12,225,2270,9,225,1,226,
        1,226,1,226,3,226,2275,8,226,3,226,2277,8,226,1,227,1,227,1,227,
        1,227,1,228,1,228,1,228,5,228,2286,8,228,10,228,12,228,2289,9,228,
        1,229,3,229,2292,8,229,1,229,1,229,3,229,2296,8,229,1,229,1,229,
        1,229,3,229,2301,8,229,1,230,1,230,1,230,1,230,1,230,3,230,2308,
        8,230,3,230,2310,8,230,1,231,1,231,1,231,3,231,2315,8,231,1,231,
        1,231,3,231,2319,8,231,1,232,1,232,1,232,1,232,1,233,1,233,1,233,
        1,233,1,234,1,234,1,234,1,234,1,234,1,234,1,234,1,234,3,234,2337,
        8,234,1,235,1,235,1,235,5,235,2342,8,235,10,235,12,235,2345,9,235,
        1,236,1,236,1,236,3,236,2350,8,236,1,236,1,236,1,237,1,237,1,238,
        1,238,3,238,2358,8,238,1,238,1,238,1,238,1,239,1,239,1,239,5,239,
        2366,8,239,10,239,12,239,2369,9,239,1,240,1,240,3,240,2373,8,240,
        1,240,3,240,2376,8,240,1,241,4,241,2379,8,241,11,241,12,241,2380,
        1,242,1,242,1,242,1,242,1,242,1,242,1,242,3,242,2390,8,242,1,243,
        1,243,1,243,1,243,3,243,2396,8,243,1,243,1,243,1,243,1,244,1,244,
        1,244,1,244,1,244,1,245,1,245,1,245,1,245,1,245,1,245,1,245,1,245,
        5,245,2414,8,245,10,245,12,245,2417,9,245,1,245,5,245,2420,8,245,
        10,245,12,245,2423,9,245,1,246,3,246,2426,8,246,1,246,1,246,3,246,
        2430,8,246,1,247,1,247,1,247,1,247,1,247,1,247,3,247,2438,8,247,
        1,248,1,248,1,248,1,248,1,248,1,248,1,248,1,248,3,248,2448,8,248,
        3,248,2450,8,248,1,249,1,249,1,249,1,250,1,250,1,250,1,250,1,251,
        1,251,1,251,1,252,1,252,1,252,1,253,1,253,3,253,2467,8,253,1,253,
        1,253,1,254,1,254,1,254,5,254,2474,8,254,10,254,12,254,2477,9,254,
        1,255,3,255,2480,8,255,1,255,1,255,1,255,3,255,2485,8,255,1,256,
        1,256,3,256,2489,8,256,1,257,4,257,2492,8,257,11,257,12,257,2493,
        1,258,1,258,1,258,1,258,1,259,4,259,2501,8,259,11,259,12,259,2502,
        1,260,1,260,1,260,1,261,1,261,1,261,1,261,1,261,1,261,1,261,1,261,
        1,261,1,261,1,261,1,261,1,261,1,261,3,261,2522,8,261,1,261,1,261,
        1,261,1,261,1,261,1,261,1,261,1,261,1,261,3,261,2533,8,261,5,261,
        2535,8,261,10,261,12,261,2538,9,261,1,262,1,262,3,262,2542,8,262,
        1,262,3,262,2545,8,262,1,262,1,262,1,263,1,263,3,263,2551,8,263,
        1,263,1,263,3,263,2555,8,263,1,264,1,264,1,265,1,265,3,265,2561,
        8,265,1,265,1,265,1,266,1,266,1,266,5,266,2568,8,266,10,266,12,266,
        2571,9,266,1,267,1,267,1,267,1,267,3,267,2577,8,267,1,267,1,267,
        3,267,2581,8,267,1,268,4,268,2584,8,268,11,268,12,268,2585,1,269,
        3,269,2589,8,269,1,269,1,269,3,269,2593,8,269,1,269,1,269,1,269,
        1,270,1,270,1,270,3,270,2601,8,270,3,270,2603,8,270,1,270,1,270,
        1,271,1,271,1,271,5,271,2610,8,271,10,271,12,271,2613,9,271,1,272,
        3,272,2616,8,272,1,272,3,272,2619,8,272,1,272,1,272,1,272,1,272,
        3,272,2625,8,272,1,273,4,273,2628,8,273,11,273,12,273,2629,1,274,
        1,274,1,274,1,274,1,275,1,275,1,275,1,275,1,275,1,275,1,276,1,276,
        1,276,5,276,2645,8,276,10,276,12,276,2648,9,276,1,276,3,276,2651,
        8,276,1,277,1,277,1,277,1,278,1,278,1,278,1,279,1,279,1,280,1,280,
        1,281,1,281,1,281,1,282,1,282,1,282,5,282,2669,8,282,10,282,12,282,
        2672,9,282,1,283,1,283,1,283,1,283,1,283,1,283,3,283,2680,8,283,
        1,283,3,283,2683,8,283,1,284,1,284,1,284,5,284,2688,8,284,10,284,
        12,284,2691,9,284,1,285,1,285,1,286,1,286,1,286,1,287,1,287,1,287,
        1,288,1,288,1,288,1,288,1,289,1,289,1,289,1,289,1,290,1,290,1,290,
        1,290,1,291,1,291,1,291,1,292,1,292,1,292,1,292,1,293,1,293,1,293,
        1,293,1,293,1,294,1,294,1,294,1,294,1,295,1,295,1,295,1,296,1,296,
        1,296,1,297,1,297,1,297,1,298,1,298,3,298,2740,8,298,1,298,1,298,
        1,298,3,298,2745,8,298,1,299,1,299,3,299,2749,8,299,1,300,1,300,
        3,300,2753,8,300,1,301,1,301,4,301,2757,8,301,11,301,12,301,2758,
        1,302,1,302,1,303,1,303,3,303,2765,8,303,1,304,1,304,4,304,2769,
        8,304,11,304,12,304,2770,1,305,1,305,1,305,1,305,3,305,2777,8,305,
        1,306,3,306,2780,8,306,1,306,1,306,3,306,2784,8,306,1,306,3,306,
        2787,8,306,1,307,1,307,1,308,1,308,1,309,1,309,1,310,1,310,1,310,
        3,310,2798,8,310,1,311,1,311,4,311,2802,8,311,11,311,12,311,2803,
        1,311,1,311,1,311,4,311,2809,8,311,11,311,12,311,2810,1,311,3,311,
        2814,8,311,1,312,1,312,5,312,2818,8,312,10,312,12,312,2821,9,312,
        1,312,1,312,1,312,5,312,2826,8,312,10,312,12,312,2829,9,312,1,312,
        3,312,2832,8,312,1,313,1,313,1,313,1,313,1,313,1,313,1,313,1,313,
        3,313,2842,8,313,1,313,1,313,5,313,2846,8,313,10,313,12,313,2849,
        9,313,1,313,1,313,1,313,1,313,1,313,1,313,1,313,1,313,1,313,3,313,
        2860,8,313,1,313,1,313,5,313,2864,8,313,10,313,12,313,2867,9,313,
        1,313,3,313,2870,8,313,1,313,1,2421,3,98,368,522,314,0,2,4,6,8,10,
        12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,
        56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,
        100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,
        132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,
        164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,
        196,198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,
        228,230,232,234,236,238,240,242,244,246,248,250,252,254,256,258,
        260,262,264,266,268,270,272,274,276,278,280,282,284,286,288,290,
        292,294,296,298,300,302,304,306,308,310,312,314,316,318,320,322,
        324,326,328,330,332,334,336,338,340,342,344,346,348,350,352,354,
        356,358,360,362,364,366,368,370,372,374,376,378,380,382,384,386,
        388,390,392,394,396,398,400,402,404,406,408,410,412,414,416,418,
        420,422,424,426,428,430,432,434,436,438,440,442,444,446,448,450,
        452,454,456,458,460,462,464,466,468,470,472,474,476,478,480,482,
        484,486,488,490,492,494,496,498,500,502,504,506,508,510,512,514,
        516,518,520,522,524,526,528,530,532,534,536,538,540,542,544,546,
        548,550,552,554,556,558,560,562,564,566,568,570,572,574,576,578,
        580,582,584,586,588,590,592,594,596,598,600,602,604,606,608,610,
        612,614,616,618,620,622,624,626,0,22,1,0,27,28,1,0,62,63,1,0,97,
        103,1,0,104,107,1,0,108,109,1,0,116,117,2,0,97,101,109,112,6,0,6,
        6,13,13,16,16,27,29,36,36,59,59,1,0,39,40,1,0,151,152,1,0,53,54,
        1,0,49,51,1,0,75,76,3,0,20,20,22,24,79,79,1,0,77,78,5,0,138,138,
        145,147,152,153,156,156,164,165,1,0,135,136,16,0,1,2,5,6,8,8,10,
        11,14,14,17,17,20,26,29,33,41,41,47,58,60,71,73,78,85,88,92,112,
        114,115,135,136,15,0,1,1,3,20,22,29,34,40,42,46,58,59,72,72,79,84,
        89,91,95,96,113,113,116,128,130,130,132,134,150,150,3,0,148,149,
        151,152,154,163,2,0,84,84,89,89,1,0,170,174,3041,0,629,1,0,0,0,2,
        647,1,0,0,0,4,653,1,0,0,0,6,660,1,0,0,0,8,662,1,0,0,0,10,674,1,0,
        0,0,12,678,1,0,0,0,14,690,1,0,0,0,16,692,1,0,0,0,18,696,1,0,0,0,
        20,700,1,0,0,0,22,708,1,0,0,0,24,710,1,0,0,0,26,720,1,0,0,0,28,722,
        1,0,0,0,30,727,1,0,0,0,32,735,1,0,0,0,34,746,1,0,0,0,36,749,1,0,
        0,0,38,755,1,0,0,0,40,770,1,0,0,0,42,775,1,0,0,0,44,778,1,0,0,0,
        46,780,1,0,0,0,48,789,1,0,0,0,50,794,1,0,0,0,52,798,1,0,0,0,54,803,
        1,0,0,0,56,807,1,0,0,0,58,814,1,0,0,0,60,817,1,0,0,0,62,824,1,0,
        0,0,64,826,1,0,0,0,66,830,1,0,0,0,68,834,1,0,0,0,70,836,1,0,0,0,
        72,840,1,0,0,0,74,843,1,0,0,0,76,846,1,0,0,0,78,852,1,0,0,0,80,856,
        1,0,0,0,82,862,1,0,0,0,84,872,1,0,0,0,86,879,1,0,0,0,88,881,1,0,
        0,0,90,890,1,0,0,0,92,896,1,0,0,0,94,900,1,0,0,0,96,905,1,0,0,0,
        98,919,1,0,0,0,100,962,1,0,0,0,102,964,1,0,0,0,104,968,1,0,0,0,106,
        973,1,0,0,0,108,975,1,0,0,0,110,977,1,0,0,0,112,985,1,0,0,0,114,
        987,1,0,0,0,116,1001,1,0,0,0,118,1003,1,0,0,0,120,1005,1,0,0,0,122,
        1010,1,0,0,0,124,1012,1,0,0,0,126,1017,1,0,0,0,128,1029,1,0,0,0,
        130,1031,1,0,0,0,132,1040,1,0,0,0,134,1042,1,0,0,0,136,1046,1,0,
        0,0,138,1054,1,0,0,0,140,1062,1,0,0,0,142,1065,1,0,0,0,144,1075,
        1,0,0,0,146,1077,1,0,0,0,148,1083,1,0,0,0,150,1089,1,0,0,0,152,1093,
        1,0,0,0,154,1101,1,0,0,0,156,1118,1,0,0,0,158,1124,1,0,0,0,160,1129,
        1,0,0,0,162,1131,1,0,0,0,164,1138,1,0,0,0,166,1146,1,0,0,0,168,1148,
        1,0,0,0,170,1158,1,0,0,0,172,1161,1,0,0,0,174,1169,1,0,0,0,176,1177,
        1,0,0,0,178,1181,1,0,0,0,180,1184,1,0,0,0,182,1204,1,0,0,0,184,1211,
        1,0,0,0,186,1226,1,0,0,0,188,1229,1,0,0,0,190,1239,1,0,0,0,192,1251,
        1,0,0,0,194,1255,1,0,0,0,196,1268,1,0,0,0,198,1276,1,0,0,0,200,1283,
        1,0,0,0,202,1297,1,0,0,0,204,1306,1,0,0,0,206,1315,1,0,0,0,208,1327,
        1,0,0,0,210,1329,1,0,0,0,212,1332,1,0,0,0,214,1345,1,0,0,0,216,1354,
        1,0,0,0,218,1356,1,0,0,0,220,1366,1,0,0,0,222,1372,1,0,0,0,224,1374,
        1,0,0,0,226,1380,1,0,0,0,228,1389,1,0,0,0,230,1402,1,0,0,0,232,1404,
        1,0,0,0,234,1406,1,0,0,0,236,1410,1,0,0,0,238,1420,1,0,0,0,240,1440,
        1,0,0,0,242,1447,1,0,0,0,244,1450,1,0,0,0,246,1458,1,0,0,0,248,1475,
        1,0,0,0,250,1477,1,0,0,0,252,1479,1,0,0,0,254,1481,1,0,0,0,256,1495,
        1,0,0,0,258,1502,1,0,0,0,260,1505,1,0,0,0,262,1510,1,0,0,0,264,1518,
        1,0,0,0,266,1522,1,0,0,0,268,1528,1,0,0,0,270,1531,1,0,0,0,272,1549,
        1,0,0,0,274,1551,1,0,0,0,276,1558,1,0,0,0,278,1563,1,0,0,0,280,1566,
        1,0,0,0,282,1593,1,0,0,0,284,1595,1,0,0,0,286,1602,1,0,0,0,288,1607,
        1,0,0,0,290,1610,1,0,0,0,292,1627,1,0,0,0,294,1629,1,0,0,0,296,1636,
        1,0,0,0,298,1641,1,0,0,0,300,1649,1,0,0,0,302,1651,1,0,0,0,304,1656,
        1,0,0,0,306,1665,1,0,0,0,308,1679,1,0,0,0,310,1687,1,0,0,0,312,1703,
        1,0,0,0,314,1717,1,0,0,0,316,1726,1,0,0,0,318,1729,1,0,0,0,320,1735,
        1,0,0,0,322,1750,1,0,0,0,324,1757,1,0,0,0,326,1762,1,0,0,0,328,1764,
        1,0,0,0,330,1775,1,0,0,0,332,1786,1,0,0,0,334,1795,1,0,0,0,336,1797,
        1,0,0,0,338,1801,1,0,0,0,340,1805,1,0,0,0,342,1811,1,0,0,0,344,1814,
        1,0,0,0,346,1823,1,0,0,0,348,1830,1,0,0,0,350,1832,1,0,0,0,352,1836,
        1,0,0,0,354,1840,1,0,0,0,356,1844,1,0,0,0,358,1852,1,0,0,0,360,1881,
        1,0,0,0,362,1884,1,0,0,0,364,1888,1,0,0,0,366,1894,1,0,0,0,368,1911,
        1,0,0,0,370,1921,1,0,0,0,372,1923,1,0,0,0,374,1929,1,0,0,0,376,1931,
        1,0,0,0,378,1937,1,0,0,0,380,1948,1,0,0,0,382,1953,1,0,0,0,384,1960,
        1,0,0,0,386,1963,1,0,0,0,388,1965,1,0,0,0,390,1970,1,0,0,0,392,1978,
        1,0,0,0,394,1985,1,0,0,0,396,1990,1,0,0,0,398,2014,1,0,0,0,400,2022,
        1,0,0,0,402,2025,1,0,0,0,404,2031,1,0,0,0,406,2044,1,0,0,0,408,2046,
        1,0,0,0,410,2049,1,0,0,0,412,2066,1,0,0,0,414,2069,1,0,0,0,416,2073,
        1,0,0,0,418,2082,1,0,0,0,420,2104,1,0,0,0,422,2106,1,0,0,0,424,2124,
        1,0,0,0,426,2126,1,0,0,0,428,2132,1,0,0,0,430,2143,1,0,0,0,432,2145,
        1,0,0,0,434,2152,1,0,0,0,436,2163,1,0,0,0,438,2200,1,0,0,0,440,2214,
        1,0,0,0,442,2227,1,0,0,0,444,2229,1,0,0,0,446,2253,1,0,0,0,448,2261,
        1,0,0,0,450,2263,1,0,0,0,452,2271,1,0,0,0,454,2278,1,0,0,0,456,2282,
        1,0,0,0,458,2291,1,0,0,0,460,2309,1,0,0,0,462,2311,1,0,0,0,464,2320,
        1,0,0,0,466,2324,1,0,0,0,468,2336,1,0,0,0,470,2338,1,0,0,0,472,2349,
        1,0,0,0,474,2353,1,0,0,0,476,2355,1,0,0,0,478,2362,1,0,0,0,480,2375,
        1,0,0,0,482,2378,1,0,0,0,484,2389,1,0,0,0,486,2391,1,0,0,0,488,2400,
        1,0,0,0,490,2405,1,0,0,0,492,2429,1,0,0,0,494,2431,1,0,0,0,496,2439,
        1,0,0,0,498,2451,1,0,0,0,500,2454,1,0,0,0,502,2458,1,0,0,0,504,2461,
        1,0,0,0,506,2464,1,0,0,0,508,2470,1,0,0,0,510,2479,1,0,0,0,512,2486,
        1,0,0,0,514,2491,1,0,0,0,516,2495,1,0,0,0,518,2500,1,0,0,0,520,2504,
        1,0,0,0,522,2521,1,0,0,0,524,2539,1,0,0,0,526,2548,1,0,0,0,528,2556,
        1,0,0,0,530,2558,1,0,0,0,532,2564,1,0,0,0,534,2576,1,0,0,0,536,2583,
        1,0,0,0,538,2588,1,0,0,0,540,2597,1,0,0,0,542,2606,1,0,0,0,544,2624,
        1,0,0,0,546,2627,1,0,0,0,548,2631,1,0,0,0,550,2635,1,0,0,0,552,2641,
        1,0,0,0,554,2652,1,0,0,0,556,2655,1,0,0,0,558,2658,1,0,0,0,560,2660,
        1,0,0,0,562,2662,1,0,0,0,564,2665,1,0,0,0,566,2682,1,0,0,0,568,2684,
        1,0,0,0,570,2692,1,0,0,0,572,2694,1,0,0,0,574,2697,1,0,0,0,576,2700,
        1,0,0,0,578,2704,1,0,0,0,580,2708,1,0,0,0,582,2712,1,0,0,0,584,2715,
        1,0,0,0,586,2719,1,0,0,0,588,2724,1,0,0,0,590,2728,1,0,0,0,592,2731,
        1,0,0,0,594,2734,1,0,0,0,596,2744,1,0,0,0,598,2748,1,0,0,0,600,2752,
        1,0,0,0,602,2756,1,0,0,0,604,2760,1,0,0,0,606,2764,1,0,0,0,608,2768,
        1,0,0,0,610,2776,1,0,0,0,612,2786,1,0,0,0,614,2788,1,0,0,0,616,2790,
        1,0,0,0,618,2792,1,0,0,0,620,2797,1,0,0,0,622,2813,1,0,0,0,624,2831,
        1,0,0,0,626,2869,1,0,0,0,628,630,3,4,2,0,629,628,1,0,0,0,629,630,
        1,0,0,0,630,631,1,0,0,0,631,632,5,0,0,1,632,1,1,0,0,0,633,642,3,
        6,3,0,634,642,3,156,78,0,635,642,3,22,11,0,636,642,3,56,28,0,637,
        642,3,62,31,0,638,642,3,74,37,0,639,642,3,76,38,0,640,642,3,402,
        201,0,641,633,1,0,0,0,641,634,1,0,0,0,641,635,1,0,0,0,641,636,1,
        0,0,0,641,637,1,0,0,0,641,638,1,0,0,0,641,639,1,0,0,0,641,640,1,
        0,0,0,642,644,1,0,0,0,643,645,5,147,0,0,644,643,1,0,0,0,644,645,
        1,0,0,0,645,648,1,0,0,0,646,648,3,86,43,0,647,641,1,0,0,0,647,646,
        1,0,0,0,648,3,1,0,0,0,649,650,4,2,0,1,650,651,3,2,1,0,651,652,6,
        2,-1,0,652,654,1,0,0,0,653,649,1,0,0,0,654,655,1,0,0,0,655,653,1,
        0,0,0,655,656,1,0,0,0,656,5,1,0,0,0,657,661,3,8,4,0,658,661,3,10,
        5,0,659,661,3,20,10,0,660,657,1,0,0,0,660,658,1,0,0,0,660,659,1,
        0,0,0,661,7,1,0,0,0,662,664,5,14,0,0,663,665,5,4,0,0,664,663,1,0,
        0,0,664,665,1,0,0,0,665,666,1,0,0,0,666,667,3,368,184,0,667,668,
        5,17,0,0,668,670,3,402,201,0,669,671,3,42,21,0,670,669,1,0,0,0,670,
        671,1,0,0,0,671,672,1,0,0,0,672,673,3,162,81,0,673,9,1,0,0,0,674,
        675,5,26,0,0,675,676,3,12,6,0,676,677,3,162,81,0,677,11,1,0,0,0,
        678,683,3,14,7,0,679,680,5,145,0,0,680,682,3,14,7,0,681,679,1,0,
        0,0,682,685,1,0,0,0,683,681,1,0,0,0,683,684,1,0,0,0,684,13,1,0,0,
        0,685,683,1,0,0,0,686,691,3,124,62,0,687,691,3,402,201,0,688,691,
        3,16,8,0,689,691,3,18,9,0,690,686,1,0,0,0,690,687,1,0,0,0,690,688,
        1,0,0,0,690,689,1,0,0,0,691,15,1,0,0,0,692,693,5,4,0,0,693,694,3,
        368,184,0,694,695,3,178,89,0,695,17,1,0,0,0,696,697,7,0,0,0,697,
        698,3,368,184,0,698,699,3,178,89,0,699,19,1,0,0,0,700,701,5,34,0,
        0,701,702,3,162,81,0,702,703,5,26,0,0,703,704,3,402,201,0,704,21,
        1,0,0,0,705,709,3,24,12,0,706,709,3,28,14,0,707,709,3,30,15,0,708,
        705,1,0,0,0,708,706,1,0,0,0,708,707,1,0,0,0,709,23,1,0,0,0,710,711,
        5,18,0,0,711,712,3,12,6,0,712,714,3,162,81,0,713,715,3,26,13,0,714,
        713,1,0,0,0,714,715,1,0,0,0,715,25,1,0,0,0,716,717,5,12,0,0,717,
        721,3,162,81,0,718,719,5,12,0,0,719,721,3,24,12,0,720,716,1,0,0,
        0,720,718,1,0,0,0,721,27,1,0,0,0,722,723,5,11,0,0,723,724,3,12,6,
        0,724,725,5,12,0,0,725,726,3,162,81,0,726,29,1,0,0,0,727,728,5,35,
        0,0,728,729,3,402,201,0,729,731,5,139,0,0,730,732,3,32,16,0,731,
        730,1,0,0,0,731,732,1,0,0,0,732,733,1,0,0,0,733,734,5,142,0,0,734,
        31,1,0,0,0,735,737,3,34,17,0,736,738,3,32,16,0,737,736,1,0,0,0,737,
        738,1,0,0,0,738,33,1,0,0,0,739,742,3,36,18,0,740,742,3,40,20,0,741,
        739,1,0,0,0,741,740,1,0,0,0,742,743,1,0,0,0,743,744,3,4,2,0,744,
        747,1,0,0,0,745,747,3,46,23,0,746,741,1,0,0,0,746,745,1,0,0,0,747,
        35,1,0,0,0,748,750,3,394,197,0,749,748,1,0,0,0,749,750,1,0,0,0,750,
        751,1,0,0,0,751,752,5,4,0,0,752,753,3,38,19,0,753,754,5,146,0,0,
        754,37,1,0,0,0,755,757,3,368,184,0,756,758,3,42,21,0,757,756,1,0,
        0,0,757,758,1,0,0,0,758,766,1,0,0,0,759,760,5,145,0,0,760,762,3,
        368,184,0,761,763,3,42,21,0,762,761,1,0,0,0,762,763,1,0,0,0,763,
        765,1,0,0,0,764,759,1,0,0,0,765,768,1,0,0,0,766,764,1,0,0,0,766,
        767,1,0,0,0,767,39,1,0,0,0,768,766,1,0,0,0,769,771,3,394,197,0,770,
        769,1,0,0,0,770,771,1,0,0,0,771,772,1,0,0,0,772,773,5,8,0,0,773,
        774,5,146,0,0,774,41,1,0,0,0,775,776,5,25,0,0,776,777,3,44,22,0,
        777,43,1,0,0,0,778,779,3,402,201,0,779,45,1,0,0,0,780,782,3,48,24,
        0,781,783,3,50,25,0,782,781,1,0,0,0,782,783,1,0,0,0,783,785,1,0,
        0,0,784,786,3,54,27,0,785,784,1,0,0,0,785,786,1,0,0,0,786,787,1,
        0,0,0,787,788,5,122,0,0,788,47,1,0,0,0,789,790,5,119,0,0,790,792,
        3,98,49,0,791,793,3,32,16,0,792,791,1,0,0,0,792,793,1,0,0,0,793,
        49,1,0,0,0,794,796,3,94,47,0,795,797,3,50,25,0,796,795,1,0,0,0,796,
        797,1,0,0,0,797,51,1,0,0,0,798,799,5,120,0,0,799,801,3,98,49,0,800,
        802,3,32,16,0,801,800,1,0,0,0,801,802,1,0,0,0,802,53,1,0,0,0,803,
        805,5,121,0,0,804,806,3,32,16,0,805,804,1,0,0,0,805,806,1,0,0,0,
        806,55,1,0,0,0,807,812,3,58,29,0,808,813,3,6,3,0,809,813,3,24,12,
        0,810,813,3,30,15,0,811,813,3,76,38,0,812,808,1,0,0,0,812,809,1,
        0,0,0,812,810,1,0,0,0,812,811,1,0,0,0,813,57,1,0,0,0,814,815,3,60,
        30,0,815,816,5,146,0,0,816,59,1,0,0,0,817,818,3,566,283,0,818,61,
        1,0,0,0,819,825,3,64,32,0,820,825,3,66,33,0,821,825,3,68,34,0,822,
        825,3,70,35,0,823,825,3,72,36,0,824,819,1,0,0,0,824,820,1,0,0,0,
        824,821,1,0,0,0,824,822,1,0,0,0,824,823,1,0,0,0,825,63,1,0,0,0,826,
        828,5,3,0,0,827,829,3,60,30,0,828,827,1,0,0,0,828,829,1,0,0,0,829,
        65,1,0,0,0,830,832,5,7,0,0,831,833,3,60,30,0,832,831,1,0,0,0,832,
        833,1,0,0,0,833,67,1,0,0,0,834,835,5,15,0,0,835,69,1,0,0,0,836,838,
        5,37,0,0,837,839,3,402,201,0,838,837,1,0,0,0,838,839,1,0,0,0,839,
        71,1,0,0,0,840,841,5,38,0,0,841,842,3,402,201,0,842,73,1,0,0,0,843,
        844,5,9,0,0,844,845,3,162,81,0,845,75,1,0,0,0,846,847,5,10,0,0,847,
        849,3,162,81,0,848,850,3,78,39,0,849,848,1,0,0,0,849,850,1,0,0,0,
        850,77,1,0,0,0,851,853,3,80,40,0,852,851,1,0,0,0,853,854,1,0,0,0,
        854,852,1,0,0,0,854,855,1,0,0,0,855,79,1,0,0,0,856,858,5,5,0,0,857,
        859,3,82,41,0,858,857,1,0,0,0,858,859,1,0,0,0,859,860,1,0,0,0,860,
        861,3,162,81,0,861,81,1,0,0,0,862,869,3,84,42,0,863,864,3,84,42,
        0,864,865,5,145,0,0,865,866,3,84,42,0,866,868,1,0,0,0,867,863,1,
        0,0,0,868,871,1,0,0,0,869,867,1,0,0,0,869,870,1,0,0,0,870,83,1,0,
        0,0,871,869,1,0,0,0,872,874,3,368,184,0,873,875,3,42,21,0,874,873,
        1,0,0,0,874,875,1,0,0,0,875,85,1,0,0,0,876,880,3,88,44,0,877,880,
        3,114,57,0,878,880,3,120,60,0,879,876,1,0,0,0,879,877,1,0,0,0,879,
        878,1,0,0,0,880,87,1,0,0,0,881,883,3,90,45,0,882,884,3,92,46,0,883,
        882,1,0,0,0,883,884,1,0,0,0,884,886,1,0,0,0,885,887,3,96,48,0,886,
        885,1,0,0,0,886,887,1,0,0,0,887,888,1,0,0,0,888,889,5,122,0,0,889,
        89,1,0,0,0,890,891,5,119,0,0,891,893,3,98,49,0,892,894,3,4,2,0,893,
        892,1,0,0,0,893,894,1,0,0,0,894,91,1,0,0,0,895,897,3,94,47,0,896,
        895,1,0,0,0,897,898,1,0,0,0,898,896,1,0,0,0,898,899,1,0,0,0,899,
        93,1,0,0,0,900,901,5,120,0,0,901,903,3,98,49,0,902,904,3,4,2,0,903,
        902,1,0,0,0,903,904,1,0,0,0,904,95,1,0,0,0,905,907,5,121,0,0,906,
        908,3,4,2,0,907,906,1,0,0,0,907,908,1,0,0,0,908,97,1,0,0,0,909,910,
        6,49,-1,0,910,920,3,100,50,0,911,920,3,566,283,0,912,920,3,614,307,
        0,913,914,5,140,0,0,914,915,3,98,49,0,915,916,5,143,0,0,916,920,
        1,0,0,0,917,918,5,151,0,0,918,920,3,98,49,2,919,909,1,0,0,0,919,
        911,1,0,0,0,919,912,1,0,0,0,919,913,1,0,0,0,919,917,1,0,0,0,920,
        930,1,0,0,0,921,924,10,1,0,0,922,925,3,576,288,0,923,925,3,578,289,
        0,924,922,1,0,0,0,924,923,1,0,0,0,925,926,1,0,0,0,926,927,3,98,49,
        2,927,929,1,0,0,0,928,921,1,0,0,0,929,932,1,0,0,0,930,928,1,0,0,
        0,930,931,1,0,0,0,931,99,1,0,0,0,932,930,1,0,0,0,933,934,5,60,0,
        0,934,935,5,140,0,0,935,936,3,106,53,0,936,937,5,143,0,0,937,963,
        1,0,0,0,938,939,5,61,0,0,939,940,5,140,0,0,940,941,3,108,54,0,941,
        942,5,143,0,0,942,963,1,0,0,0,943,944,7,1,0,0,944,947,5,140,0,0,
        945,948,3,580,290,0,946,948,3,582,291,0,947,945,1,0,0,0,947,946,
        1,0,0,0,948,949,1,0,0,0,949,950,3,102,51,0,950,951,5,143,0,0,951,
        963,1,0,0,0,952,953,5,64,0,0,953,954,5,140,0,0,954,955,3,110,55,
        0,955,956,5,143,0,0,956,963,1,0,0,0,957,958,5,65,0,0,958,959,5,140,
        0,0,959,960,3,112,56,0,960,961,5,143,0,0,961,963,1,0,0,0,962,933,
        1,0,0,0,962,938,1,0,0,0,962,943,1,0,0,0,962,952,1,0,0,0,962,957,
        1,0,0,0,963,101,1,0,0,0,964,966,5,172,0,0,965,967,3,104,52,0,966,
        965,1,0,0,0,966,967,1,0,0,0,967,103,1,0,0,0,968,969,5,138,0,0,969,
        971,5,172,0,0,970,972,3,104,52,0,971,970,1,0,0,0,971,972,1,0,0,0,
        972,105,1,0,0,0,973,974,7,2,0,0,974,107,1,0,0,0,975,976,7,3,0,0,
        976,109,1,0,0,0,977,982,3,566,283,0,978,979,5,138,0,0,979,981,3,
        566,283,0,980,978,1,0,0,0,981,984,1,0,0,0,982,980,1,0,0,0,982,983,
        1,0,0,0,983,111,1,0,0,0,984,982,1,0,0,0,985,986,7,4,0,0,986,113,
        1,0,0,0,987,988,5,113,0,0,988,997,5,140,0,0,989,990,5,114,0,0,990,
        991,5,146,0,0,991,992,3,118,59,0,992,993,5,145,0,0,993,994,5,115,
        0,0,994,995,5,146,0,0,995,996,3,116,58,0,996,998,1,0,0,0,997,989,
        1,0,0,0,997,998,1,0,0,0,998,999,1,0,0,0,999,1000,5,143,0,0,1000,
        115,1,0,0,0,1001,1002,5,173,0,0,1002,117,1,0,0,0,1003,1004,3,624,
        312,0,1004,119,1,0,0,0,1005,1006,7,5,0,0,1006,1007,5,140,0,0,1007,
        1008,3,122,61,0,1008,1009,5,143,0,0,1009,121,1,0,0,0,1010,1011,3,
        624,312,0,1011,123,1,0,0,0,1012,1013,5,118,0,0,1013,1014,5,140,0,
        0,1014,1015,3,126,63,0,1015,1016,5,143,0,0,1016,125,1,0,0,0,1017,
        1022,3,128,64,0,1018,1019,5,145,0,0,1019,1021,3,128,64,0,1020,1018,
        1,0,0,0,1021,1024,1,0,0,0,1022,1020,1,0,0,0,1022,1023,1,0,0,0,1023,
        127,1,0,0,0,1024,1022,1,0,0,0,1025,1026,3,130,65,0,1026,1027,3,132,
        66,0,1027,1030,1,0,0,0,1028,1030,5,160,0,0,1029,1025,1,0,0,0,1029,
        1028,1,0,0,0,1030,129,1,0,0,0,1031,1032,7,6,0,0,1032,131,1,0,0,0,
        1033,1041,5,173,0,0,1034,1041,5,172,0,0,1035,1038,5,175,0,0,1036,
        1037,5,138,0,0,1037,1039,5,172,0,0,1038,1036,1,0,0,0,1038,1039,1,
        0,0,0,1039,1041,1,0,0,0,1040,1033,1,0,0,0,1040,1034,1,0,0,0,1040,
        1035,1,0,0,0,1041,133,1,0,0,0,1042,1043,5,148,0,0,1043,1044,3,136,
        68,0,1044,1045,5,149,0,0,1045,135,1,0,0,0,1046,1051,3,138,69,0,1047,
        1048,5,145,0,0,1048,1050,3,138,69,0,1049,1047,1,0,0,0,1050,1053,
        1,0,0,0,1051,1049,1,0,0,0,1051,1052,1,0,0,0,1052,137,1,0,0,0,1053,
        1051,1,0,0,0,1054,1060,3,528,264,0,1055,1058,5,146,0,0,1056,1059,
        3,526,263,0,1057,1059,3,552,276,0,1058,1056,1,0,0,0,1058,1057,1,
        0,0,0,1059,1061,1,0,0,0,1060,1055,1,0,0,0,1060,1061,1,0,0,0,1061,
        139,1,0,0,0,1062,1063,5,25,0,0,1063,1064,3,142,71,0,1064,141,1,0,
        0,0,1065,1070,3,144,72,0,1066,1067,5,145,0,0,1067,1069,3,144,72,
        0,1068,1066,1,0,0,0,1069,1072,1,0,0,0,1070,1068,1,0,0,0,1070,1071,
        1,0,0,0,1071,143,1,0,0,0,1072,1070,1,0,0,0,1073,1076,3,146,73,0,
        1074,1076,3,148,74,0,1075,1073,1,0,0,0,1075,1074,1,0,0,0,1076,145,
        1,0,0,0,1077,1078,3,526,263,0,1078,1081,5,146,0,0,1079,1082,3,526,
        263,0,1080,1082,3,552,276,0,1081,1079,1,0,0,0,1081,1080,1,0,0,0,
        1082,147,1,0,0,0,1083,1084,3,526,263,0,1084,1087,3,588,294,0,1085,
        1088,3,526,263,0,1086,1088,3,522,261,0,1087,1085,1,0,0,0,1087,1086,
        1,0,0,0,1088,149,1,0,0,0,1089,1090,5,148,0,0,1090,1091,3,152,76,
        0,1091,1092,5,149,0,0,1092,151,1,0,0,0,1093,1098,3,154,77,0,1094,
        1095,5,145,0,0,1095,1097,3,154,77,0,1096,1094,1,0,0,0,1097,1100,
        1,0,0,0,1098,1096,1,0,0,0,1098,1099,1,0,0,0,1099,153,1,0,0,0,1100,
        1098,1,0,0,0,1101,1102,3,522,261,0,1102,155,1,0,0,0,1103,1119,3,
        164,82,0,1104,1119,3,172,86,0,1105,1119,3,180,90,0,1106,1119,3,206,
        103,0,1107,1119,3,212,106,0,1108,1119,3,236,118,0,1109,1119,3,270,
        135,0,1110,1119,3,280,140,0,1111,1119,3,290,145,0,1112,1119,3,312,
        156,0,1113,1119,3,318,159,0,1114,1119,3,320,160,0,1115,1119,3,328,
        164,0,1116,1119,3,334,167,0,1117,1119,3,344,172,0,1118,1103,1,0,
        0,0,1118,1104,1,0,0,0,1118,1105,1,0,0,0,1118,1106,1,0,0,0,1118,1107,
        1,0,0,0,1118,1108,1,0,0,0,1118,1109,1,0,0,0,1118,1110,1,0,0,0,1118,
        1111,1,0,0,0,1118,1112,1,0,0,0,1118,1113,1,0,0,0,1118,1114,1,0,0,
        0,1118,1115,1,0,0,0,1118,1116,1,0,0,0,1118,1117,1,0,0,0,1119,1121,
        1,0,0,0,1120,1122,5,147,0,0,1121,1120,1,0,0,0,1121,1122,1,0,0,0,
        1122,157,1,0,0,0,1123,1125,3,156,78,0,1124,1123,1,0,0,0,1125,1126,
        1,0,0,0,1126,1124,1,0,0,0,1126,1127,1,0,0,0,1127,159,1,0,0,0,1128,
        1130,3,4,2,0,1129,1128,1,0,0,0,1129,1130,1,0,0,0,1130,161,1,0,0,
        0,1131,1133,5,139,0,0,1132,1134,3,4,2,0,1133,1132,1,0,0,0,1133,1134,
        1,0,0,0,1134,1135,1,0,0,0,1135,1136,5,142,0,0,1136,163,1,0,0,0,1137,
        1139,3,394,197,0,1138,1137,1,0,0,0,1138,1139,1,0,0,0,1139,1140,1,
        0,0,0,1140,1142,5,19,0,0,1141,1143,3,166,83,0,1142,1141,1,0,0,0,
        1142,1143,1,0,0,0,1143,1144,1,0,0,0,1144,1145,3,168,84,0,1145,165,
        1,0,0,0,1146,1147,7,7,0,0,1147,167,1,0,0,0,1148,1153,3,170,85,0,
        1149,1150,5,138,0,0,1150,1152,3,170,85,0,1151,1149,1,0,0,0,1152,
        1155,1,0,0,0,1153,1151,1,0,0,0,1153,1154,1,0,0,0,1154,169,1,0,0,
        0,1155,1153,1,0,0,0,1156,1159,3,566,283,0,1157,1159,3,596,298,0,
        1158,1156,1,0,0,0,1158,1157,1,0,0,0,1159,171,1,0,0,0,1160,1162,3,
        394,197,0,1161,1160,1,0,0,0,1161,1162,1,0,0,0,1162,1164,1,0,0,0,
        1163,1165,3,362,181,0,1164,1163,1,0,0,0,1164,1165,1,0,0,0,1165,1166,
        1,0,0,0,1166,1167,5,27,0,0,1167,1168,3,174,87,0,1168,173,1,0,0,0,
        1169,1174,3,176,88,0,1170,1171,5,145,0,0,1171,1173,3,176,88,0,1172,
        1170,1,0,0,0,1173,1176,1,0,0,0,1174,1172,1,0,0,0,1174,1175,1,0,0,
        0,1175,175,1,0,0,0,1176,1174,1,0,0,0,1177,1179,3,368,184,0,1178,
        1180,3,178,89,0,1179,1178,1,0,0,0,1179,1180,1,0,0,0,1180,177,1,0,
        0,0,1181,1182,5,156,0,0,1182,1183,3,402,201,0,1183,179,1,0,0,0,1184,
        1201,3,182,91,0,1185,1198,3,184,92,0,1186,1187,3,178,89,0,1187,1188,
        3,200,100,0,1188,1199,1,0,0,0,1189,1196,3,524,262,0,1190,1192,3,
        178,89,0,1191,1190,1,0,0,0,1191,1192,1,0,0,0,1192,1193,1,0,0,0,1193,
        1197,3,200,100,0,1194,1197,3,186,93,0,1195,1197,3,194,97,0,1196,
        1191,1,0,0,0,1196,1194,1,0,0,0,1196,1195,1,0,0,0,1197,1199,1,0,0,
        0,1198,1186,1,0,0,0,1198,1189,1,0,0,0,1199,1202,1,0,0,0,1200,1202,
        3,174,87,0,1201,1185,1,0,0,0,1201,1200,1,0,0,0,1202,181,1,0,0,0,
        1203,1205,3,394,197,0,1204,1203,1,0,0,0,1204,1205,1,0,0,0,1205,1207,
        1,0,0,0,1206,1208,3,362,181,0,1207,1206,1,0,0,0,1207,1208,1,0,0,
        0,1208,1209,1,0,0,0,1209,1210,5,28,0,0,1210,183,1,0,0,0,1211,1212,
        3,566,283,0,1212,185,1,0,0,0,1213,1221,5,139,0,0,1214,1216,3,188,
        94,0,1215,1217,3,190,95,0,1216,1215,1,0,0,0,1216,1217,1,0,0,0,1217,
        1222,1,0,0,0,1218,1219,3,190,95,0,1219,1220,3,188,94,0,1220,1222,
        1,0,0,0,1221,1214,1,0,0,0,1221,1218,1,0,0,0,1222,1223,1,0,0,0,1223,
        1224,5,142,0,0,1224,1227,1,0,0,0,1225,1227,3,162,81,0,1226,1213,
        1,0,0,0,1226,1225,1,0,0,0,1227,187,1,0,0,0,1228,1230,3,394,197,0,
        1229,1228,1,0,0,0,1229,1230,1,0,0,0,1230,1232,1,0,0,0,1231,1233,
        3,366,183,0,1232,1231,1,0,0,0,1232,1233,1,0,0,0,1233,1234,1,0,0,
        0,1234,1236,5,30,0,0,1235,1237,3,162,81,0,1236,1235,1,0,0,0,1236,
        1237,1,0,0,0,1237,189,1,0,0,0,1238,1240,3,394,197,0,1239,1238,1,
        0,0,0,1239,1240,1,0,0,0,1240,1242,1,0,0,0,1241,1243,3,366,183,0,
        1242,1241,1,0,0,0,1242,1243,1,0,0,0,1243,1244,1,0,0,0,1244,1246,
        5,31,0,0,1245,1247,3,192,96,0,1246,1245,1,0,0,0,1246,1247,1,0,0,
        0,1247,1249,1,0,0,0,1248,1250,3,162,81,0,1249,1248,1,0,0,0,1249,
        1250,1,0,0,0,1250,191,1,0,0,0,1251,1252,5,140,0,0,1252,1253,3,566,
        283,0,1253,1254,5,143,0,0,1254,193,1,0,0,0,1255,1263,5,139,0,0,1256,
        1258,3,196,98,0,1257,1259,3,198,99,0,1258,1257,1,0,0,0,1258,1259,
        1,0,0,0,1259,1264,1,0,0,0,1260,1261,3,198,99,0,1261,1262,3,196,98,
        0,1262,1264,1,0,0,0,1263,1256,1,0,0,0,1263,1260,1,0,0,0,1264,1265,
        1,0,0,0,1265,1266,5,142,0,0,1266,195,1,0,0,0,1267,1269,3,394,197,
        0,1268,1267,1,0,0,0,1268,1269,1,0,0,0,1269,1271,1,0,0,0,1270,1272,
        3,366,183,0,1271,1270,1,0,0,0,1271,1272,1,0,0,0,1272,1273,1,0,0,
        0,1273,1274,5,30,0,0,1274,197,1,0,0,0,1275,1277,3,394,197,0,1276,
        1275,1,0,0,0,1276,1277,1,0,0,0,1277,1279,1,0,0,0,1278,1280,3,366,
        183,0,1279,1278,1,0,0,0,1279,1280,1,0,0,0,1280,1281,1,0,0,0,1281,
        1282,5,31,0,0,1282,199,1,0,0,0,1283,1292,5,139,0,0,1284,1286,3,202,
        101,0,1285,1287,3,204,102,0,1286,1285,1,0,0,0,1286,1287,1,0,0,0,
        1287,1293,1,0,0,0,1288,1290,3,204,102,0,1289,1291,3,202,101,0,1290,
        1289,1,0,0,0,1290,1291,1,0,0,0,1291,1293,1,0,0,0,1292,1284,1,0,0,
        0,1292,1288,1,0,0,0,1293,1294,1,0,0,0,1294,1295,5,142,0,0,1295,201,
        1,0,0,0,1296,1298,3,394,197,0,1297,1296,1,0,0,0,1297,1298,1,0,0,
        0,1298,1299,1,0,0,0,1299,1301,5,32,0,0,1300,1302,3,192,96,0,1301,
        1300,1,0,0,0,1301,1302,1,0,0,0,1302,1303,1,0,0,0,1303,1304,3,162,
        81,0,1304,203,1,0,0,0,1305,1307,3,394,197,0,1306,1305,1,0,0,0,1306,
        1307,1,0,0,0,1307,1308,1,0,0,0,1308,1310,5,33,0,0,1309,1311,3,192,
        96,0,1310,1309,1,0,0,0,1310,1311,1,0,0,0,1311,1312,1,0,0,0,1312,
        1313,3,162,81,0,1313,205,1,0,0,0,1314,1316,3,394,197,0,1315,1314,
        1,0,0,0,1315,1316,1,0,0,0,1316,1318,1,0,0,0,1317,1319,3,364,182,
        0,1318,1317,1,0,0,0,1318,1319,1,0,0,0,1319,1320,1,0,0,0,1320,1321,
        5,59,0,0,1321,1323,3,208,104,0,1322,1324,3,134,67,0,1323,1322,1,
        0,0,0,1323,1324,1,0,0,0,1324,1325,1,0,0,0,1325,1326,3,210,105,0,
        1326,207,1,0,0,0,1327,1328,3,566,283,0,1328,209,1,0,0,0,1329,1330,
        5,156,0,0,1330,1331,3,522,261,0,1331,211,1,0,0,0,1332,1333,3,214,
        107,0,1333,1335,3,216,108,0,1334,1336,3,134,67,0,1335,1334,1,0,0,
        0,1335,1336,1,0,0,0,1336,1337,1,0,0,0,1337,1339,3,218,109,0,1338,
        1340,3,140,70,0,1339,1338,1,0,0,0,1339,1340,1,0,0,0,1340,1342,1,
        0,0,0,1341,1343,3,222,111,0,1342,1341,1,0,0,0,1342,1343,1,0,0,0,
        1343,213,1,0,0,0,1344,1346,3,394,197,0,1345,1344,1,0,0,0,1345,1346,
        1,0,0,0,1346,1348,1,0,0,0,1347,1349,3,362,181,0,1348,1347,1,0,0,
        0,1348,1349,1,0,0,0,1349,1350,1,0,0,0,1350,1351,5,16,0,0,1351,215,
        1,0,0,0,1352,1355,3,566,283,0,1353,1355,3,596,298,0,1354,1352,1,
        0,0,0,1354,1353,1,0,0,0,1355,217,1,0,0,0,1356,1361,3,224,112,0,1357,
        1359,5,39,0,0,1358,1357,1,0,0,0,1358,1359,1,0,0,0,1359,1362,1,0,
        0,0,1360,1362,5,40,0,0,1361,1358,1,0,0,0,1361,1360,1,0,0,0,1362,
        1364,1,0,0,0,1363,1365,3,220,110,0,1364,1363,1,0,0,0,1364,1365,1,
        0,0,0,1365,219,1,0,0,0,1366,1368,3,584,292,0,1367,1369,3,394,197,
        0,1368,1367,1,0,0,0,1368,1369,1,0,0,0,1369,1370,1,0,0,0,1370,1371,
        3,522,261,0,1371,221,1,0,0,0,1372,1373,3,162,81,0,1373,223,1,0,0,
        0,1374,1376,5,140,0,0,1375,1377,3,226,113,0,1376,1375,1,0,0,0,1376,
        1377,1,0,0,0,1377,1378,1,0,0,0,1378,1379,5,143,0,0,1379,225,1,0,
        0,0,1380,1385,3,228,114,0,1381,1382,5,145,0,0,1382,1384,3,228,114,
        0,1383,1381,1,0,0,0,1384,1387,1,0,0,0,1385,1383,1,0,0,0,1385,1386,
        1,0,0,0,1386,227,1,0,0,0,1387,1385,1,0,0,0,1388,1390,3,394,197,0,
        1389,1388,1,0,0,0,1389,1390,1,0,0,0,1390,1392,1,0,0,0,1391,1393,
        3,230,115,0,1392,1391,1,0,0,0,1392,1393,1,0,0,0,1393,1394,1,0,0,
        0,1394,1395,3,232,116,0,1395,1400,3,524,262,0,1396,1398,3,234,117,
        0,1397,1396,1,0,0,0,1397,1398,1,0,0,0,1398,1401,1,0,0,0,1399,1401,
        3,586,293,0,1400,1397,1,0,0,0,1400,1399,1,0,0,0,1401,229,1,0,0,0,
        1402,1403,3,566,283,0,1403,231,1,0,0,0,1404,1405,3,566,283,0,1405,
        233,1,0,0,0,1406,1407,5,156,0,0,1407,1408,3,402,201,0,1408,235,1,
        0,0,0,1409,1411,3,394,197,0,1410,1409,1,0,0,0,1410,1411,1,0,0,0,
        1411,1413,1,0,0,0,1412,1414,3,364,182,0,1413,1412,1,0,0,0,1413,1414,
        1,0,0,0,1414,1417,1,0,0,0,1415,1418,3,238,119,0,1416,1418,3,254,
        127,0,1417,1415,1,0,0,0,1417,1416,1,0,0,0,1418,237,1,0,0,0,1419,
        1421,5,41,0,0,1420,1419,1,0,0,0,1420,1421,1,0,0,0,1421,1422,1,0,
        0,0,1422,1423,5,13,0,0,1423,1425,3,250,125,0,1424,1426,3,134,67,
        0,1425,1424,1,0,0,0,1425,1426,1,0,0,0,1426,1428,1,0,0,0,1427,1429,
        3,562,281,0,1428,1427,1,0,0,0,1428,1429,1,0,0,0,1429,1431,1,0,0,
        0,1430,1432,3,140,70,0,1431,1430,1,0,0,0,1431,1432,1,0,0,0,1432,
        1433,1,0,0,0,1433,1435,5,139,0,0,1434,1436,3,240,120,0,1435,1434,
        1,0,0,0,1435,1436,1,0,0,0,1436,1437,1,0,0,0,1437,1438,5,142,0,0,
        1438,239,1,0,0,0,1439,1441,3,242,121,0,1440,1439,1,0,0,0,1441,1442,
        1,0,0,0,1442,1440,1,0,0,0,1442,1443,1,0,0,0,1443,241,1,0,0,0,1444,
        1448,3,156,78,0,1445,1448,3,244,122,0,1446,1448,3,86,43,0,1447,1444,
        1,0,0,0,1447,1445,1,0,0,0,1447,1446,1,0,0,0,1448,243,1,0,0,0,1449,
        1451,3,394,197,0,1450,1449,1,0,0,0,1450,1451,1,0,0,0,1451,1453,1,
        0,0,0,1452,1454,5,41,0,0,1453,1452,1,0,0,0,1453,1454,1,0,0,0,1454,
        1455,1,0,0,0,1455,1456,5,4,0,0,1456,1457,3,246,123,0,1457,245,1,
        0,0,0,1458,1463,3,248,124,0,1459,1460,5,145,0,0,1460,1462,3,248,
        124,0,1461,1459,1,0,0,0,1462,1465,1,0,0,0,1463,1461,1,0,0,0,1463,
        1464,1,0,0,0,1464,247,1,0,0,0,1465,1463,1,0,0,0,1466,1476,3,556,
        278,0,1467,1473,3,252,126,0,1468,1474,3,530,265,0,1469,1470,5,140,
        0,0,1470,1471,3,522,261,0,1471,1472,5,143,0,0,1472,1474,1,0,0,0,
        1473,1468,1,0,0,0,1473,1469,1,0,0,0,1473,1474,1,0,0,0,1474,1476,
        1,0,0,0,1475,1466,1,0,0,0,1475,1467,1,0,0,0,1476,249,1,0,0,0,1477,
        1478,3,566,283,0,1478,251,1,0,0,0,1479,1480,3,566,283,0,1480,253,
        1,0,0,0,1481,1482,5,13,0,0,1482,1484,3,250,125,0,1483,1485,3,134,
        67,0,1484,1483,1,0,0,0,1484,1485,1,0,0,0,1485,1486,1,0,0,0,1486,
        1488,3,562,281,0,1487,1489,3,140,70,0,1488,1487,1,0,0,0,1488,1489,
        1,0,0,0,1489,1490,1,0,0,0,1490,1491,5,139,0,0,1491,1492,3,256,128,
        0,1492,1493,5,142,0,0,1493,255,1,0,0,0,1494,1496,3,258,129,0,1495,
        1494,1,0,0,0,1496,1497,1,0,0,0,1497,1495,1,0,0,0,1497,1498,1,0,0,
        0,1498,257,1,0,0,0,1499,1503,3,156,78,0,1500,1503,3,260,130,0,1501,
        1503,3,86,43,0,1502,1499,1,0,0,0,1502,1500,1,0,0,0,1502,1501,1,0,
        0,0,1503,259,1,0,0,0,1504,1506,3,394,197,0,1505,1504,1,0,0,0,1505,
        1506,1,0,0,0,1506,1507,1,0,0,0,1507,1508,5,4,0,0,1508,1509,3,262,
        131,0,1509,261,1,0,0,0,1510,1515,3,264,132,0,1511,1512,5,145,0,0,
        1512,1514,3,264,132,0,1513,1511,1,0,0,0,1514,1517,1,0,0,0,1515,1513,
        1,0,0,0,1515,1516,1,0,0,0,1516,263,1,0,0,0,1517,1515,1,0,0,0,1518,
        1520,3,252,126,0,1519,1521,3,266,133,0,1520,1519,1,0,0,0,1520,1521,
        1,0,0,0,1521,265,1,0,0,0,1522,1523,5,156,0,0,1523,1524,3,268,134,
        0,1524,267,1,0,0,0,1525,1529,3,612,306,0,1526,1529,3,624,312,0,1527,
        1529,3,614,307,0,1528,1525,1,0,0,0,1528,1526,1,0,0,0,1528,1527,1,
        0,0,0,1529,269,1,0,0,0,1530,1532,3,394,197,0,1531,1530,1,0,0,0,1531,
        1532,1,0,0,0,1532,1534,1,0,0,0,1533,1535,3,364,182,0,1534,1533,1,
        0,0,0,1534,1535,1,0,0,0,1535,1536,1,0,0,0,1536,1537,5,36,0,0,1537,
        1539,3,272,136,0,1538,1540,3,134,67,0,1539,1538,1,0,0,0,1539,1540,
        1,0,0,0,1540,1542,1,0,0,0,1541,1543,3,562,281,0,1542,1541,1,0,0,
        0,1542,1543,1,0,0,0,1543,1545,1,0,0,0,1544,1546,3,140,70,0,1545,
        1544,1,0,0,0,1545,1546,1,0,0,0,1546,1547,1,0,0,0,1547,1548,3,274,
        137,0,1548,271,1,0,0,0,1549,1550,3,566,283,0,1550,273,1,0,0,0,1551,
        1552,5,139,0,0,1552,1553,3,276,138,0,1553,1554,5,142,0,0,1554,275,
        1,0,0,0,1555,1557,3,278,139,0,1556,1555,1,0,0,0,1557,1560,1,0,0,
        0,1558,1556,1,0,0,0,1558,1559,1,0,0,0,1559,277,1,0,0,0,1560,1558,
        1,0,0,0,1561,1564,3,156,78,0,1562,1564,3,86,43,0,1563,1561,1,0,0,
        0,1563,1562,1,0,0,0,1564,279,1,0,0,0,1565,1567,3,394,197,0,1566,
        1565,1,0,0,0,1566,1567,1,0,0,0,1567,1578,1,0,0,0,1568,1570,3,364,
        182,0,1569,1568,1,0,0,0,1569,1570,1,0,0,0,1570,1572,1,0,0,0,1571,
        1573,5,21,0,0,1572,1571,1,0,0,0,1572,1573,1,0,0,0,1573,1579,1,0,
        0,0,1574,1576,5,21,0,0,1575,1577,3,364,182,0,1576,1575,1,0,0,0,1576,
        1577,1,0,0,0,1577,1579,1,0,0,0,1578,1569,1,0,0,0,1578,1574,1,0,0,
        0,1579,1580,1,0,0,0,1580,1581,5,6,0,0,1581,1583,3,282,141,0,1582,
        1584,3,134,67,0,1583,1582,1,0,0,0,1583,1584,1,0,0,0,1584,1586,1,
        0,0,0,1585,1587,3,562,281,0,1586,1585,1,0,0,0,1586,1587,1,0,0,0,
        1587,1589,1,0,0,0,1588,1590,3,140,70,0,1589,1588,1,0,0,0,1589,1590,
        1,0,0,0,1590,1591,1,0,0,0,1591,1592,3,284,142,0,1592,281,1,0,0,0,
        1593,1594,3,566,283,0,1594,283,1,0,0,0,1595,1596,5,139,0,0,1596,
        1597,3,286,143,0,1597,1598,5,142,0,0,1598,285,1,0,0,0,1599,1601,
        3,288,144,0,1600,1599,1,0,0,0,1601,1604,1,0,0,0,1602,1600,1,0,0,
        0,1602,1603,1,0,0,0,1603,287,1,0,0,0,1604,1602,1,0,0,0,1605,1608,
        3,156,78,0,1606,1608,3,86,43,0,1607,1605,1,0,0,0,1607,1606,1,0,0,
        0,1608,289,1,0,0,0,1609,1611,3,394,197,0,1610,1609,1,0,0,0,1610,
        1611,1,0,0,0,1611,1613,1,0,0,0,1612,1614,3,364,182,0,1613,1612,1,
        0,0,0,1613,1614,1,0,0,0,1614,1615,1,0,0,0,1615,1616,5,29,0,0,1616,
        1620,3,292,146,0,1617,1618,5,146,0,0,1618,1621,5,6,0,0,1619,1621,
        3,562,281,0,1620,1617,1,0,0,0,1620,1619,1,0,0,0,1620,1621,1,0,0,
        0,1621,1623,1,0,0,0,1622,1624,3,140,70,0,1623,1622,1,0,0,0,1623,
        1624,1,0,0,0,1624,1625,1,0,0,0,1625,1626,3,294,147,0,1626,291,1,
        0,0,0,1627,1628,3,566,283,0,1628,293,1,0,0,0,1629,1630,5,139,0,0,
        1630,1631,3,296,148,0,1631,1632,5,142,0,0,1632,295,1,0,0,0,1633,
        1635,3,298,149,0,1634,1633,1,0,0,0,1635,1638,1,0,0,0,1636,1634,1,
        0,0,0,1636,1637,1,0,0,0,1637,297,1,0,0,0,1638,1636,1,0,0,0,1639,
        1642,3,300,150,0,1640,1642,3,86,43,0,1641,1639,1,0,0,0,1641,1640,
        1,0,0,0,1642,299,1,0,0,0,1643,1650,3,302,151,0,1644,1650,3,304,152,
        0,1645,1650,3,306,153,0,1646,1650,3,308,154,0,1647,1650,3,310,155,
        0,1648,1650,3,206,103,0,1649,1643,1,0,0,0,1649,1644,1,0,0,0,1649,
        1645,1,0,0,0,1649,1646,1,0,0,0,1649,1647,1,0,0,0,1649,1648,1,0,0,
        0,1650,301,1,0,0,0,1651,1652,3,182,91,0,1652,1653,3,184,92,0,1653,
        1654,3,524,262,0,1654,1655,3,194,97,0,1655,303,1,0,0,0,1656,1657,
        3,214,107,0,1657,1659,3,216,108,0,1658,1660,3,134,67,0,1659,1658,
        1,0,0,0,1659,1660,1,0,0,0,1660,1661,1,0,0,0,1661,1663,3,218,109,
        0,1662,1664,3,140,70,0,1663,1662,1,0,0,0,1663,1664,1,0,0,0,1664,
        305,1,0,0,0,1665,1667,3,314,157,0,1666,1668,3,134,67,0,1667,1666,
        1,0,0,0,1667,1668,1,0,0,0,1668,1669,1,0,0,0,1669,1674,3,224,112,
        0,1670,1672,5,39,0,0,1671,1670,1,0,0,0,1671,1672,1,0,0,0,1672,1675,
        1,0,0,0,1673,1675,5,40,0,0,1674,1671,1,0,0,0,1674,1673,1,0,0,0,1675,
        1677,1,0,0,0,1676,1678,3,140,70,0,1677,1676,1,0,0,0,1677,1678,1,
        0,0,0,1678,307,1,0,0,0,1679,1680,3,330,165,0,1680,1682,3,332,166,
        0,1681,1683,3,140,70,0,1682,1681,1,0,0,0,1682,1683,1,0,0,0,1683,
        1684,1,0,0,0,1684,1685,3,194,97,0,1685,309,1,0,0,0,1686,1688,3,394,
        197,0,1687,1686,1,0,0,0,1687,1688,1,0,0,0,1688,1690,1,0,0,0,1689,
        1691,3,364,182,0,1690,1689,1,0,0,0,1690,1691,1,0,0,0,1691,1692,1,
        0,0,0,1692,1693,5,44,0,0,1693,1695,3,208,104,0,1694,1696,3,562,281,
        0,1695,1694,1,0,0,0,1695,1696,1,0,0,0,1696,1698,1,0,0,0,1697,1699,
        3,210,105,0,1698,1697,1,0,0,0,1698,1699,1,0,0,0,1699,1701,1,0,0,
        0,1700,1702,3,140,70,0,1701,1700,1,0,0,0,1701,1702,1,0,0,0,1702,
        311,1,0,0,0,1703,1705,3,314,157,0,1704,1706,3,134,67,0,1705,1704,
        1,0,0,0,1705,1706,1,0,0,0,1706,1707,1,0,0,0,1707,1709,3,224,112,
        0,1708,1710,7,8,0,0,1709,1708,1,0,0,0,1709,1710,1,0,0,0,1710,1712,
        1,0,0,0,1711,1713,3,140,70,0,1712,1711,1,0,0,0,1712,1713,1,0,0,0,
        1713,1714,1,0,0,0,1714,1715,3,316,158,0,1715,313,1,0,0,0,1716,1718,
        3,394,197,0,1717,1716,1,0,0,0,1717,1718,1,0,0,0,1718,1720,1,0,0,
        0,1719,1721,3,362,181,0,1720,1719,1,0,0,0,1720,1721,1,0,0,0,1721,
        1722,1,0,0,0,1722,1724,5,42,0,0,1723,1725,7,9,0,0,1724,1723,1,0,
        0,0,1724,1725,1,0,0,0,1725,315,1,0,0,0,1726,1727,3,162,81,0,1727,
        317,1,0,0,0,1728,1730,3,394,197,0,1729,1728,1,0,0,0,1729,1730,1,
        0,0,0,1730,1731,1,0,0,0,1731,1732,5,43,0,0,1732,1733,3,162,81,0,
        1733,319,1,0,0,0,1734,1736,3,394,197,0,1735,1734,1,0,0,0,1735,1736,
        1,0,0,0,1736,1738,1,0,0,0,1737,1739,3,364,182,0,1738,1737,1,0,0,
        0,1738,1739,1,0,0,0,1739,1740,1,0,0,0,1740,1741,5,45,0,0,1741,1743,
        3,526,263,0,1742,1744,3,562,281,0,1743,1742,1,0,0,0,1743,1744,1,
        0,0,0,1744,1746,1,0,0,0,1745,1747,3,140,70,0,1746,1745,1,0,0,0,1746,
        1747,1,0,0,0,1747,1748,1,0,0,0,1748,1749,3,322,161,0,1749,321,1,
        0,0,0,1750,1751,5,139,0,0,1751,1752,3,324,162,0,1752,1753,5,142,
        0,0,1753,323,1,0,0,0,1754,1756,3,326,163,0,1755,1754,1,0,0,0,1756,
        1759,1,0,0,0,1757,1755,1,0,0,0,1757,1758,1,0,0,0,1758,325,1,0,0,
        0,1759,1757,1,0,0,0,1760,1763,3,156,78,0,1761,1763,3,86,43,0,1762,
        1760,1,0,0,0,1762,1761,1,0,0,0,1763,327,1,0,0,0,1764,1765,3,330,
        165,0,1765,1767,3,332,166,0,1766,1768,3,140,70,0,1767,1766,1,0,0,
        0,1767,1768,1,0,0,0,1768,1772,1,0,0,0,1769,1773,3,162,81,0,1770,
        1773,3,186,93,0,1771,1773,3,194,97,0,1772,1769,1,0,0,0,1772,1770,
        1,0,0,0,1772,1771,1,0,0,0,1773,329,1,0,0,0,1774,1776,3,394,197,0,
        1775,1774,1,0,0,0,1775,1776,1,0,0,0,1776,1778,1,0,0,0,1777,1779,
        3,362,181,0,1778,1777,1,0,0,0,1778,1779,1,0,0,0,1779,1780,1,0,0,
        0,1780,1782,5,46,0,0,1781,1783,3,134,67,0,1782,1781,1,0,0,0,1782,
        1783,1,0,0,0,1783,1784,1,0,0,0,1784,1785,3,224,112,0,1785,331,1,
        0,0,0,1786,1788,3,584,292,0,1787,1789,3,394,197,0,1788,1787,1,0,
        0,0,1788,1789,1,0,0,0,1789,1790,1,0,0,0,1790,1791,3,522,261,0,1791,
        333,1,0,0,0,1792,1796,3,336,168,0,1793,1796,3,338,169,0,1794,1796,
        3,340,170,0,1795,1792,1,0,0,0,1795,1793,1,0,0,0,1795,1794,1,0,0,
        0,1796,335,1,0,0,0,1797,1798,5,47,0,0,1798,1799,5,58,0,0,1799,1800,
        3,596,298,0,1800,337,1,0,0,0,1801,1802,5,57,0,0,1802,1803,5,58,0,
        0,1803,1804,3,596,298,0,1804,339,1,0,0,0,1805,1806,5,48,0,0,1806,
        1807,5,58,0,0,1807,1809,3,596,298,0,1808,1810,3,342,171,0,1809,1808,
        1,0,0,0,1809,1810,1,0,0,0,1810,341,1,0,0,0,1811,1812,5,146,0,0,1812,
        1813,3,358,179,0,1813,343,1,0,0,0,1814,1815,5,52,0,0,1815,1816,3,
        358,179,0,1816,1818,5,139,0,0,1817,1819,3,346,173,0,1818,1817,1,
        0,0,0,1818,1819,1,0,0,0,1819,1820,1,0,0,0,1820,1821,5,142,0,0,1821,
        345,1,0,0,0,1822,1824,3,348,174,0,1823,1822,1,0,0,0,1824,1825,1,
        0,0,0,1825,1823,1,0,0,0,1825,1826,1,0,0,0,1826,347,1,0,0,0,1827,
        1831,3,350,175,0,1828,1831,3,352,176,0,1829,1831,3,354,177,0,1830,
        1827,1,0,0,0,1830,1828,1,0,0,0,1830,1829,1,0,0,0,1831,349,1,0,0,
        0,1832,1833,7,10,0,0,1833,1834,5,146,0,0,1834,1835,3,356,178,0,1835,
        351,1,0,0,0,1836,1837,5,55,0,0,1837,1838,5,146,0,0,1838,1839,3,614,
        307,0,1839,353,1,0,0,0,1840,1841,5,56,0,0,1841,1842,5,146,0,0,1842,
        1843,7,11,0,0,1843,355,1,0,0,0,1844,1849,3,358,179,0,1845,1846,5,
        145,0,0,1846,1848,3,358,179,0,1847,1845,1,0,0,0,1848,1851,1,0,0,
        0,1849,1847,1,0,0,0,1849,1850,1,0,0,0,1850,357,1,0,0,0,1851,1849,
        1,0,0,0,1852,1857,3,566,283,0,1853,1854,5,138,0,0,1854,1856,3,566,
        283,0,1855,1853,1,0,0,0,1856,1859,1,0,0,0,1857,1855,1,0,0,0,1857,
        1858,1,0,0,0,1858,359,1,0,0,0,1859,1857,1,0,0,0,1860,1882,5,6,0,
        0,1861,1882,5,66,0,0,1862,1882,5,67,0,0,1863,1882,5,21,0,0,1864,
        1882,5,48,0,0,1865,1882,5,68,0,0,1866,1882,5,69,0,0,1867,1882,5,
        70,0,0,1868,1882,5,57,0,0,1869,1882,5,47,0,0,1870,1882,5,71,0,0,
        1871,1882,5,72,0,0,1872,1876,5,74,0,0,1873,1874,5,140,0,0,1874,1875,
        7,12,0,0,1875,1877,5,143,0,0,1876,1873,1,0,0,0,1876,1877,1,0,0,0,
        1877,1882,1,0,0,0,1878,1882,5,73,0,0,1879,1882,3,364,182,0,1880,
        1882,3,366,183,0,1881,1860,1,0,0,0,1881,1861,1,0,0,0,1881,1862,1,
        0,0,0,1881,1863,1,0,0,0,1881,1864,1,0,0,0,1881,1865,1,0,0,0,1881,
        1866,1,0,0,0,1881,1867,1,0,0,0,1881,1868,1,0,0,0,1881,1869,1,0,0,
        0,1881,1870,1,0,0,0,1881,1871,1,0,0,0,1881,1872,1,0,0,0,1881,1878,
        1,0,0,0,1881,1879,1,0,0,0,1881,1880,1,0,0,0,1882,361,1,0,0,0,1883,
        1885,3,360,180,0,1884,1883,1,0,0,0,1885,1886,1,0,0,0,1886,1884,1,
        0,0,0,1886,1887,1,0,0,0,1887,363,1,0,0,0,1888,1892,7,13,0,0,1889,
        1890,5,140,0,0,1890,1891,5,31,0,0,1891,1893,5,143,0,0,1892,1889,
        1,0,0,0,1892,1893,1,0,0,0,1893,365,1,0,0,0,1894,1895,7,14,0,0,1895,
        367,1,0,0,0,1896,1900,6,184,-1,0,1897,1901,3,370,185,0,1898,1901,
        3,372,186,0,1899,1901,3,376,188,0,1900,1897,1,0,0,0,1900,1898,1,
        0,0,0,1900,1899,1,0,0,0,1901,1903,1,0,0,0,1902,1904,3,524,262,0,
        1903,1902,1,0,0,0,1903,1904,1,0,0,0,1904,1912,1,0,0,0,1905,1912,
        3,374,187,0,1906,1912,3,382,191,0,1907,1912,3,384,192,0,1908,1909,
        5,80,0,0,1909,1912,3,522,261,0,1910,1912,3,386,193,0,1911,1896,1,
        0,0,0,1911,1905,1,0,0,0,1911,1906,1,0,0,0,1911,1907,1,0,0,0,1911,
        1908,1,0,0,0,1911,1910,1,0,0,0,1912,1918,1,0,0,0,1913,1914,10,2,
        0,0,1914,1915,5,1,0,0,1915,1917,3,522,261,0,1916,1913,1,0,0,0,1917,
        1920,1,0,0,0,1918,1916,1,0,0,0,1918,1919,1,0,0,0,1919,369,1,0,0,
        0,1920,1918,1,0,0,0,1921,1922,5,150,0,0,1922,371,1,0,0,0,1923,1924,
        3,566,283,0,1924,373,1,0,0,0,1925,1926,5,28,0,0,1926,1930,3,368,
        184,0,1927,1928,5,27,0,0,1928,1930,3,368,184,0,1929,1925,1,0,0,0,
        1929,1927,1,0,0,0,1930,375,1,0,0,0,1931,1933,5,140,0,0,1932,1934,
        3,378,189,0,1933,1932,1,0,0,0,1933,1934,1,0,0,0,1934,1935,1,0,0,
        0,1935,1936,5,143,0,0,1936,377,1,0,0,0,1937,1942,3,380,190,0,1938,
        1939,5,145,0,0,1939,1941,3,380,190,0,1940,1938,1,0,0,0,1941,1944,
        1,0,0,0,1942,1940,1,0,0,0,1942,1943,1,0,0,0,1943,379,1,0,0,0,1944,
        1942,1,0,0,0,1945,1946,3,566,283,0,1946,1947,5,146,0,0,1947,1949,
        1,0,0,0,1948,1945,1,0,0,0,1948,1949,1,0,0,0,1949,1950,1,0,0,0,1950,
        1951,3,368,184,0,1951,381,1,0,0,0,1952,1954,3,526,263,0,1953,1952,
        1,0,0,0,1953,1954,1,0,0,0,1954,1955,1,0,0,0,1955,1956,5,138,0,0,
        1956,1958,3,252,126,0,1957,1959,3,376,188,0,1958,1957,1,0,0,0,1958,
        1959,1,0,0,0,1959,383,1,0,0,0,1960,1961,3,372,186,0,1961,1962,5,
        152,0,0,1962,385,1,0,0,0,1963,1964,3,402,201,0,1964,387,1,0,0,0,
        1965,1966,5,153,0,0,1966,1968,3,390,195,0,1967,1969,3,392,196,0,
        1968,1967,1,0,0,0,1968,1969,1,0,0,0,1969,389,1,0,0,0,1970,1975,3,
        566,283,0,1971,1972,5,138,0,0,1972,1974,3,566,283,0,1973,1971,1,
        0,0,0,1974,1977,1,0,0,0,1975,1973,1,0,0,0,1975,1976,1,0,0,0,1976,
        391,1,0,0,0,1977,1975,1,0,0,0,1978,1980,5,140,0,0,1979,1981,3,396,
        198,0,1980,1979,1,0,0,0,1980,1981,1,0,0,0,1981,1982,1,0,0,0,1982,
        1983,5,143,0,0,1983,393,1,0,0,0,1984,1986,3,388,194,0,1985,1984,
        1,0,0,0,1986,1987,1,0,0,0,1987,1985,1,0,0,0,1987,1988,1,0,0,0,1988,
        395,1,0,0,0,1989,1991,3,398,199,0,1990,1989,1,0,0,0,1991,1992,1,
        0,0,0,1992,1990,1,0,0,0,1992,1993,1,0,0,0,1993,397,1,0,0,0,1994,
        1996,5,140,0,0,1995,1997,3,396,198,0,1996,1995,1,0,0,0,1996,1997,
        1,0,0,0,1997,1998,1,0,0,0,1998,2015,5,143,0,0,1999,2001,5,141,0,
        0,2000,2002,3,396,198,0,2001,2000,1,0,0,0,2001,2002,1,0,0,0,2002,
        2003,1,0,0,0,2003,2015,5,144,0,0,2004,2006,5,139,0,0,2005,2007,3,
        396,198,0,2006,2005,1,0,0,0,2006,2007,1,0,0,0,2007,2008,1,0,0,0,
        2008,2015,5,142,0,0,2009,2015,3,566,283,0,2010,2015,3,570,285,0,
        2011,2015,3,610,305,0,2012,2015,3,596,298,0,2013,2015,3,400,200,
        0,2014,1994,1,0,0,0,2014,1999,1,0,0,0,2014,2004,1,0,0,0,2014,2009,
        1,0,0,0,2014,2010,1,0,0,0,2014,2011,1,0,0,0,2014,2012,1,0,0,0,2014,
        2013,1,0,0,0,2015,399,1,0,0,0,2016,2023,7,15,0,0,2017,2023,3,584,
        292,0,2018,2019,4,200,3,0,2019,2023,5,154,0,0,2020,2021,4,200,4,
        0,2021,2023,5,151,0,0,2022,2016,1,0,0,0,2022,2017,1,0,0,0,2022,2018,
        1,0,0,0,2022,2020,1,0,0,0,2023,401,1,0,0,0,2024,2026,3,410,205,0,
        2025,2024,1,0,0,0,2025,2026,1,0,0,0,2026,2027,1,0,0,0,2027,2029,
        3,406,203,0,2028,2030,3,414,207,0,2029,2028,1,0,0,0,2029,2030,1,
        0,0,0,2030,403,1,0,0,0,2031,2036,3,402,201,0,2032,2033,5,145,0,0,
        2033,2035,3,402,201,0,2034,2032,1,0,0,0,2035,2038,1,0,0,0,2036,2034,
        1,0,0,0,2036,2037,1,0,0,0,2037,405,1,0,0,0,2038,2036,1,0,0,0,2039,
        2041,3,592,296,0,2040,2039,1,0,0,0,2040,2041,1,0,0,0,2041,2042,1,
        0,0,0,2042,2045,3,490,245,0,2043,2045,3,408,204,0,2044,2040,1,0,
        0,0,2044,2043,1,0,0,0,2045,407,1,0,0,0,2046,2047,5,154,0,0,2047,
        2048,3,566,283,0,2048,409,1,0,0,0,2049,2051,5,81,0,0,2050,2052,7,
        9,0,0,2051,2050,1,0,0,0,2051,2052,1,0,0,0,2052,411,1,0,0,0,2053,
        2054,3,590,295,0,2054,2055,3,406,203,0,2055,2067,1,0,0,0,2056,2059,
        3,572,286,0,2057,2059,3,416,208,0,2058,2056,1,0,0,0,2058,2057,1,
        0,0,0,2059,2061,1,0,0,0,2060,2062,3,410,205,0,2061,2060,1,0,0,0,
        2061,2062,1,0,0,0,2062,2063,1,0,0,0,2063,2064,3,406,203,0,2064,2067,
        1,0,0,0,2065,2067,3,418,209,0,2066,2053,1,0,0,0,2066,2058,1,0,0,
        0,2066,2065,1,0,0,0,2067,413,1,0,0,0,2068,2070,3,412,206,0,2069,
        2068,1,0,0,0,2070,2071,1,0,0,0,2071,2069,1,0,0,0,2071,2072,1,0,0,
        0,2072,415,1,0,0,0,2073,2074,5,152,0,0,2074,2075,3,402,201,0,2075,
        2076,5,146,0,0,2076,417,1,0,0,0,2077,2083,5,80,0,0,2078,2080,5,1,
        0,0,2079,2081,7,9,0,0,2080,2079,1,0,0,0,2080,2081,1,0,0,0,2081,2083,
        1,0,0,0,2082,2077,1,0,0,0,2082,2078,1,0,0,0,2083,2084,1,0,0,0,2084,
        2085,3,522,261,0,2085,419,1,0,0,0,2086,2088,3,422,211,0,2087,2089,
        3,150,75,0,2088,2087,1,0,0,0,2088,2089,1,0,0,0,2089,2105,1,0,0,0,
        2090,2105,3,548,274,0,2091,2105,3,550,275,0,2092,2105,3,424,212,
        0,2093,2105,3,440,220,0,2094,2105,3,442,221,0,2095,2105,3,444,222,
        0,2096,2105,3,464,232,0,2097,2105,3,466,233,0,2098,2105,3,468,234,
        0,2099,2105,3,462,231,0,2100,2105,3,474,237,0,2101,2105,3,476,238,
        0,2102,2105,3,486,243,0,2103,2105,3,488,244,0,2104,2086,1,0,0,0,
        2104,2090,1,0,0,0,2104,2091,1,0,0,0,2104,2092,1,0,0,0,2104,2093,
        1,0,0,0,2104,2094,1,0,0,0,2104,2095,1,0,0,0,2104,2096,1,0,0,0,2104,
        2097,1,0,0,0,2104,2098,1,0,0,0,2104,2099,1,0,0,0,2104,2100,1,0,0,
        0,2104,2101,1,0,0,0,2104,2102,1,0,0,0,2104,2103,1,0,0,0,2105,421,
        1,0,0,0,2106,2111,3,566,283,0,2107,2108,5,140,0,0,2108,2109,3,518,
        259,0,2109,2110,5,143,0,0,2110,2112,1,0,0,0,2111,2107,1,0,0,0,2111,
        2112,1,0,0,0,2112,423,1,0,0,0,2113,2125,3,610,305,0,2114,2125,3,
        426,213,0,2115,2125,3,432,216,0,2116,2125,3,438,219,0,2117,2125,
        5,123,0,0,2118,2125,5,124,0,0,2119,2125,5,125,0,0,2120,2125,5,126,
        0,0,2121,2125,5,127,0,0,2122,2125,5,128,0,0,2123,2125,5,129,0,0,
        2124,2113,1,0,0,0,2124,2114,1,0,0,0,2124,2115,1,0,0,0,2124,2116,
        1,0,0,0,2124,2117,1,0,0,0,2124,2118,1,0,0,0,2124,2119,1,0,0,0,2124,
        2120,1,0,0,0,2124,2121,1,0,0,0,2124,2122,1,0,0,0,2124,2123,1,0,0,
        0,2125,425,1,0,0,0,2126,2128,5,141,0,0,2127,2129,3,428,214,0,2128,
        2127,1,0,0,0,2128,2129,1,0,0,0,2129,2130,1,0,0,0,2130,2131,5,144,
        0,0,2131,427,1,0,0,0,2132,2137,3,430,215,0,2133,2134,5,145,0,0,2134,
        2136,3,430,215,0,2135,2133,1,0,0,0,2136,2139,1,0,0,0,2137,2135,1,
        0,0,0,2137,2138,1,0,0,0,2138,2141,1,0,0,0,2139,2137,1,0,0,0,2140,
        2142,5,145,0,0,2141,2140,1,0,0,0,2141,2142,1,0,0,0,2142,429,1,0,
        0,0,2143,2144,3,402,201,0,2144,431,1,0,0,0,2145,2148,5,141,0,0,2146,
        2149,3,434,217,0,2147,2149,5,146,0,0,2148,2146,1,0,0,0,2148,2147,
        1,0,0,0,2149,2150,1,0,0,0,2150,2151,5,144,0,0,2151,433,1,0,0,0,2152,
        2157,3,436,218,0,2153,2154,5,145,0,0,2154,2156,3,436,218,0,2155,
        2153,1,0,0,0,2156,2159,1,0,0,0,2157,2155,1,0,0,0,2157,2158,1,0,0,
        0,2158,2161,1,0,0,0,2159,2157,1,0,0,0,2160,2162,5,145,0,0,2161,2160,
        1,0,0,0,2161,2162,1,0,0,0,2162,435,1,0,0,0,2163,2164,3,402,201,0,
        2164,2165,5,146,0,0,2165,2166,3,402,201,0,2166,437,1,0,0,0,2167,
        2168,5,132,0,0,2168,2169,5,140,0,0,2169,2170,5,85,0,0,2170,2171,
        5,146,0,0,2171,2172,3,402,201,0,2172,2173,5,145,0,0,2173,2174,5,
        87,0,0,2174,2175,5,146,0,0,2175,2176,3,402,201,0,2176,2177,5,145,
        0,0,2177,2178,5,86,0,0,2178,2179,5,146,0,0,2179,2180,3,402,201,0,
        2180,2181,5,145,0,0,2181,2182,5,2,0,0,2182,2183,5,146,0,0,2183,2184,
        3,402,201,0,2184,2185,5,143,0,0,2185,2201,1,0,0,0,2186,2187,5,133,
        0,0,2187,2188,5,140,0,0,2188,2189,5,88,0,0,2189,2190,5,146,0,0,2190,
        2191,3,402,201,0,2191,2192,5,143,0,0,2192,2201,1,0,0,0,2193,2194,
        5,134,0,0,2194,2195,5,140,0,0,2195,2196,5,88,0,0,2196,2197,5,146,
        0,0,2197,2198,3,402,201,0,2198,2199,5,143,0,0,2199,2201,1,0,0,0,
        2200,2167,1,0,0,0,2200,2186,1,0,0,0,2200,2193,1,0,0,0,2201,439,1,
        0,0,0,2202,2215,5,95,0,0,2203,2204,5,95,0,0,2204,2205,5,138,0,0,
        2205,2215,3,566,283,0,2206,2207,5,95,0,0,2207,2208,5,141,0,0,2208,
        2209,3,508,254,0,2209,2210,5,144,0,0,2210,2215,1,0,0,0,2211,2212,
        5,95,0,0,2212,2213,5,138,0,0,2213,2215,5,42,0,0,2214,2202,1,0,0,
        0,2214,2203,1,0,0,0,2214,2206,1,0,0,0,2214,2211,1,0,0,0,2215,441,
        1,0,0,0,2216,2217,5,82,0,0,2217,2218,5,138,0,0,2218,2228,3,566,283,
        0,2219,2220,5,82,0,0,2220,2221,5,141,0,0,2221,2222,3,508,254,0,2222,
        2223,5,144,0,0,2223,2228,1,0,0,0,2224,2225,5,82,0,0,2225,2226,5,
        138,0,0,2226,2228,5,42,0,0,2227,2216,1,0,0,0,2227,2219,1,0,0,0,2227,
        2224,1,0,0,0,2228,443,1,0,0,0,2229,2231,5,139,0,0,2230,2232,3,446,
        223,0,2231,2230,1,0,0,0,2231,2232,1,0,0,0,2232,2234,1,0,0,0,2233,
        2235,3,4,2,0,2234,2233,1,0,0,0,2234,2235,1,0,0,0,2235,2236,1,0,0,
        0,2236,2237,5,142,0,0,2237,445,1,0,0,0,2238,2240,3,454,227,0,2239,
        2238,1,0,0,0,2239,2240,1,0,0,0,2240,2241,1,0,0,0,2241,2243,3,448,
        224,0,2242,2244,5,39,0,0,2243,2242,1,0,0,0,2243,2244,1,0,0,0,2244,
        2246,1,0,0,0,2245,2247,3,220,110,0,2246,2245,1,0,0,0,2246,2247,1,
        0,0,0,2247,2248,1,0,0,0,2248,2249,5,17,0,0,2249,2254,1,0,0,0,2250,
        2251,3,454,227,0,2251,2252,5,17,0,0,2252,2254,1,0,0,0,2253,2239,
        1,0,0,0,2253,2250,1,0,0,0,2254,447,1,0,0,0,2255,2257,5,140,0,0,2256,
        2258,3,450,225,0,2257,2256,1,0,0,0,2257,2258,1,0,0,0,2258,2259,1,
        0,0,0,2259,2262,5,143,0,0,2260,2262,3,568,284,0,2261,2255,1,0,0,
        0,2261,2260,1,0,0,0,2262,449,1,0,0,0,2263,2268,3,452,226,0,2264,
        2265,5,145,0,0,2265,2267,3,452,226,0,2266,2264,1,0,0,0,2267,2270,
        1,0,0,0,2268,2266,1,0,0,0,2268,2269,1,0,0,0,2269,451,1,0,0,0,2270,
        2268,1,0,0,0,2271,2276,3,566,283,0,2272,2274,3,524,262,0,2273,2275,
        3,586,293,0,2274,2273,1,0,0,0,2274,2275,1,0,0,0,2275,2277,1,0,0,
        0,2276,2272,1,0,0,0,2276,2277,1,0,0,0,2277,453,1,0,0,0,2278,2279,
        5,141,0,0,2279,2280,3,456,228,0,2280,2281,5,144,0,0,2281,455,1,0,
        0,0,2282,2287,3,458,229,0,2283,2284,5,145,0,0,2284,2286,3,458,229,
        0,2285,2283,1,0,0,0,2286,2289,1,0,0,0,2287,2285,1,0,0,0,2287,2288,
        1,0,0,0,2288,457,1,0,0,0,2289,2287,1,0,0,0,2290,2292,3,460,230,0,
        2291,2290,1,0,0,0,2291,2292,1,0,0,0,2292,2300,1,0,0,0,2293,2295,
        3,566,283,0,2294,2296,5,156,0,0,2295,2294,1,0,0,0,2295,2296,1,0,
        0,0,2296,2297,1,0,0,0,2297,2298,3,402,201,0,2298,2301,1,0,0,0,2299,
        2301,3,440,220,0,2300,2293,1,0,0,0,2300,2299,1,0,0,0,2301,459,1,
        0,0,0,2302,2310,5,73,0,0,2303,2307,5,74,0,0,2304,2305,5,140,0,0,
        2305,2306,7,12,0,0,2306,2308,5,143,0,0,2307,2304,1,0,0,0,2307,2308,
        1,0,0,0,2308,2310,1,0,0,0,2309,2302,1,0,0,0,2309,2303,1,0,0,0,2310,
        461,1,0,0,0,2311,2314,5,138,0,0,2312,2315,3,566,283,0,2313,2315,
        3,570,285,0,2314,2312,1,0,0,0,2314,2313,1,0,0,0,2315,2318,1,0,0,
        0,2316,2317,5,138,0,0,2317,2319,3,490,245,0,2318,2316,1,0,0,0,2318,
        2319,1,0,0,0,2319,463,1,0,0,0,2320,2321,5,140,0,0,2321,2322,3,596,
        298,0,2322,2323,5,143,0,0,2323,465,1,0,0,0,2324,2325,5,140,0,0,2325,
        2326,3,402,201,0,2326,2327,5,143,0,0,2327,467,1,0,0,0,2328,2329,
        5,140,0,0,2329,2337,5,143,0,0,2330,2331,5,140,0,0,2331,2332,3,472,
        236,0,2332,2333,5,145,0,0,2333,2334,3,470,235,0,2334,2335,5,143,
        0,0,2335,2337,1,0,0,0,2336,2328,1,0,0,0,2336,2330,1,0,0,0,2337,469,
        1,0,0,0,2338,2343,3,472,236,0,2339,2340,5,145,0,0,2340,2342,3,472,
        236,0,2341,2339,1,0,0,0,2342,2345,1,0,0,0,2343,2341,1,0,0,0,2343,
        2344,1,0,0,0,2344,471,1,0,0,0,2345,2343,1,0,0,0,2346,2347,3,566,
        283,0,2347,2348,5,146,0,0,2348,2350,1,0,0,0,2349,2346,1,0,0,0,2349,
        2350,1,0,0,0,2350,2351,1,0,0,0,2351,2352,3,402,201,0,2352,473,1,
        0,0,0,2353,2354,5,150,0,0,2354,475,1,0,0,0,2355,2357,5,167,0,0,2356,
        2358,3,522,261,0,2357,2356,1,0,0,0,2357,2358,1,0,0,0,2358,2359,1,
        0,0,0,2359,2360,5,138,0,0,2360,2361,3,478,239,0,2361,477,1,0,0,0,
        2362,2367,3,480,240,0,2363,2364,5,138,0,0,2364,2366,3,480,240,0,
        2365,2363,1,0,0,0,2366,2369,1,0,0,0,2367,2365,1,0,0,0,2367,2368,
        1,0,0,0,2368,479,1,0,0,0,2369,2367,1,0,0,0,2370,2372,3,566,283,0,
        2371,2373,3,482,241,0,2372,2371,1,0,0,0,2372,2373,1,0,0,0,2373,2376,
        1,0,0,0,2374,2376,3,482,241,0,2375,2370,1,0,0,0,2375,2374,1,0,0,
        0,2376,481,1,0,0,0,2377,2379,3,484,242,0,2378,2377,1,0,0,0,2379,
        2380,1,0,0,0,2380,2378,1,0,0,0,2380,2381,1,0,0,0,2381,483,1,0,0,
        0,2382,2390,5,152,0,0,2383,2390,5,151,0,0,2384,2390,5,95,0,0,2385,
        2386,5,141,0,0,2386,2387,3,508,254,0,2387,2388,5,144,0,0,2388,2390,
        1,0,0,0,2389,2382,1,0,0,0,2389,2383,1,0,0,0,2389,2384,1,0,0,0,2389,
        2385,1,0,0,0,2390,485,1,0,0,0,2391,2392,5,130,0,0,2392,2395,5,140,
        0,0,2393,2394,7,16,0,0,2394,2396,5,146,0,0,2395,2393,1,0,0,0,2395,
        2396,1,0,0,0,2396,2397,1,0,0,0,2397,2398,3,402,201,0,2398,2399,5,
        143,0,0,2399,487,1,0,0,0,2400,2401,5,131,0,0,2401,2402,5,140,0,0,
        2402,2403,3,402,201,0,2403,2404,5,143,0,0,2404,489,1,0,0,0,2405,
        2415,3,420,210,0,2406,2414,3,492,246,0,2407,2414,3,494,247,0,2408,
        2414,3,496,248,0,2409,2414,3,498,249,0,2410,2414,3,500,250,0,2411,
        2414,3,502,251,0,2412,2414,3,504,252,0,2413,2406,1,0,0,0,2413,2407,
        1,0,0,0,2413,2408,1,0,0,0,2413,2409,1,0,0,0,2413,2410,1,0,0,0,2413,
        2411,1,0,0,0,2413,2412,1,0,0,0,2414,2417,1,0,0,0,2415,2413,1,0,0,
        0,2415,2416,1,0,0,0,2416,2421,1,0,0,0,2417,2415,1,0,0,0,2418,2420,
        3,594,297,0,2419,2418,1,0,0,0,2420,2423,1,0,0,0,2421,2422,1,0,0,
        0,2421,2419,1,0,0,0,2422,491,1,0,0,0,2423,2421,1,0,0,0,2424,2426,
        3,506,253,0,2425,2424,1,0,0,0,2425,2426,1,0,0,0,2426,2427,1,0,0,
        0,2427,2430,3,512,256,0,2428,2430,3,506,253,0,2429,2425,1,0,0,0,
        2429,2428,1,0,0,0,2430,493,1,0,0,0,2431,2432,5,138,0,0,2432,2437,
        5,42,0,0,2433,2434,5,140,0,0,2434,2435,3,518,259,0,2435,2436,5,143,
        0,0,2436,2438,1,0,0,0,2437,2433,1,0,0,0,2437,2438,1,0,0,0,2438,495,
        1,0,0,0,2439,2449,5,138,0,0,2440,2450,5,172,0,0,2441,2447,3,566,
        283,0,2442,2448,3,150,75,0,2443,2444,5,140,0,0,2444,2445,3,518,259,
        0,2445,2446,5,143,0,0,2446,2448,1,0,0,0,2447,2442,1,0,0,0,2447,2443,
        1,0,0,0,2447,2448,1,0,0,0,2448,2450,1,0,0,0,2449,2440,1,0,0,0,2449,
        2441,1,0,0,0,2450,497,1,0,0,0,2451,2452,5,138,0,0,2452,2453,5,95,
        0,0,2453,499,1,0,0,0,2454,2455,5,141,0,0,2455,2456,3,508,254,0,2456,
        2457,5,144,0,0,2457,501,1,0,0,0,2458,2459,4,251,5,0,2459,2460,5,
        151,0,0,2460,503,1,0,0,0,2461,2462,4,252,6,0,2462,2463,5,152,0,0,
        2463,505,1,0,0,0,2464,2466,5,140,0,0,2465,2467,3,508,254,0,2466,
        2465,1,0,0,0,2466,2467,1,0,0,0,2467,2468,1,0,0,0,2468,2469,5,143,
        0,0,2469,507,1,0,0,0,2470,2475,3,510,255,0,2471,2472,5,145,0,0,2472,
        2474,3,510,255,0,2473,2471,1,0,0,0,2474,2477,1,0,0,0,2475,2473,1,
        0,0,0,2475,2476,1,0,0,0,2476,509,1,0,0,0,2477,2475,1,0,0,0,2478,
        2480,3,520,260,0,2479,2478,1,0,0,0,2479,2480,1,0,0,0,2480,2484,1,
        0,0,0,2481,2485,3,566,283,0,2482,2485,3,402,201,0,2483,2485,3,596,
        298,0,2484,2481,1,0,0,0,2484,2482,1,0,0,0,2484,2483,1,0,0,0,2485,
        511,1,0,0,0,2486,2488,3,444,222,0,2487,2489,3,514,257,0,2488,2487,
        1,0,0,0,2488,2489,1,0,0,0,2489,513,1,0,0,0,2490,2492,3,516,258,0,
        2491,2490,1,0,0,0,2492,2493,1,0,0,0,2493,2491,1,0,0,0,2493,2494,
        1,0,0,0,2494,515,1,0,0,0,2495,2496,3,566,283,0,2496,2497,5,146,0,
        0,2497,2498,3,444,222,0,2498,517,1,0,0,0,2499,2501,3,520,260,0,2500,
        2499,1,0,0,0,2501,2502,1,0,0,0,2502,2500,1,0,0,0,2502,2503,1,0,0,
        0,2503,519,1,0,0,0,2504,2505,3,566,283,0,2505,2506,5,146,0,0,2506,
        521,1,0,0,0,2507,2508,6,261,-1,0,2508,2522,3,538,269,0,2509,2522,
        3,548,274,0,2510,2522,3,550,275,0,2511,2522,3,552,276,0,2512,2522,
        3,526,263,0,2513,2522,3,530,265,0,2514,2522,3,556,278,0,2515,2522,
        3,558,279,0,2516,2522,3,560,280,0,2517,2518,5,140,0,0,2518,2519,
        3,522,261,0,2519,2520,5,143,0,0,2520,2522,1,0,0,0,2521,2507,1,0,
        0,0,2521,2509,1,0,0,0,2521,2510,1,0,0,0,2521,2511,1,0,0,0,2521,2512,
        1,0,0,0,2521,2513,1,0,0,0,2521,2514,1,0,0,0,2521,2515,1,0,0,0,2521,
        2516,1,0,0,0,2521,2517,1,0,0,0,2522,2536,1,0,0,0,2523,2532,10,4,
        0,0,2524,2525,4,261,8,0,2525,2533,5,152,0,0,2526,2527,4,261,9,0,
        2527,2533,5,151,0,0,2528,2529,5,138,0,0,2529,2533,5,93,0,0,2530,
        2531,5,138,0,0,2531,2533,5,29,0,0,2532,2524,1,0,0,0,2532,2526,1,
        0,0,0,2532,2528,1,0,0,0,2532,2530,1,0,0,0,2533,2535,1,0,0,0,2534,
        2523,1,0,0,0,2535,2538,1,0,0,0,2536,2534,1,0,0,0,2536,2537,1,0,0,
        0,2537,523,1,0,0,0,2538,2536,1,0,0,0,2539,2541,5,146,0,0,2540,2542,
        3,394,197,0,2541,2540,1,0,0,0,2541,2542,1,0,0,0,2542,2544,1,0,0,
        0,2543,2545,5,91,0,0,2544,2543,1,0,0,0,2544,2545,1,0,0,0,2545,2546,
        1,0,0,0,2546,2547,3,522,261,0,2547,525,1,0,0,0,2548,2550,3,528,264,
        0,2549,2551,3,150,75,0,2550,2549,1,0,0,0,2550,2551,1,0,0,0,2551,
        2554,1,0,0,0,2552,2553,5,138,0,0,2553,2555,3,526,263,0,2554,2552,
        1,0,0,0,2554,2555,1,0,0,0,2555,527,1,0,0,0,2556,2557,3,566,283,0,
        2557,529,1,0,0,0,2558,2560,5,140,0,0,2559,2561,3,532,266,0,2560,
        2559,1,0,0,0,2560,2561,1,0,0,0,2561,2562,1,0,0,0,2562,2563,5,143,
        0,0,2563,531,1,0,0,0,2564,2569,3,534,267,0,2565,2566,5,145,0,0,2566,
        2568,3,534,267,0,2567,2565,1,0,0,0,2568,2571,1,0,0,0,2569,2567,1,
        0,0,0,2569,2570,1,0,0,0,2570,533,1,0,0,0,2571,2569,1,0,0,0,2572,
        2573,3,536,268,0,2573,2574,3,524,262,0,2574,2577,1,0,0,0,2575,2577,
        3,522,261,0,2576,2572,1,0,0,0,2576,2575,1,0,0,0,2577,2580,1,0,0,
        0,2578,2579,5,156,0,0,2579,2581,3,402,201,0,2580,2578,1,0,0,0,2580,
        2581,1,0,0,0,2581,535,1,0,0,0,2582,2584,3,566,283,0,2583,2582,1,
        0,0,0,2584,2585,1,0,0,0,2585,2583,1,0,0,0,2585,2586,1,0,0,0,2586,
        537,1,0,0,0,2587,2589,3,394,197,0,2588,2587,1,0,0,0,2588,2589,1,
        0,0,0,2589,2590,1,0,0,0,2590,2592,3,540,270,0,2591,2593,5,39,0,0,
        2592,2591,1,0,0,0,2592,2593,1,0,0,0,2593,2594,1,0,0,0,2594,2595,
        3,584,292,0,2595,2596,3,522,261,0,2596,539,1,0,0,0,2597,2602,5,140,
        0,0,2598,2600,3,542,271,0,2599,2601,3,586,293,0,2600,2599,1,0,0,
        0,2600,2601,1,0,0,0,2601,2603,1,0,0,0,2602,2598,1,0,0,0,2602,2603,
        1,0,0,0,2603,2604,1,0,0,0,2604,2605,5,143,0,0,2605,541,1,0,0,0,2606,
        2611,3,544,272,0,2607,2608,5,145,0,0,2608,2610,3,544,272,0,2609,
        2607,1,0,0,0,2610,2613,1,0,0,0,2611,2609,1,0,0,0,2611,2612,1,0,0,
        0,2612,543,1,0,0,0,2613,2611,1,0,0,0,2614,2616,3,394,197,0,2615,
        2614,1,0,0,0,2615,2616,1,0,0,0,2616,2618,1,0,0,0,2617,2619,5,91,
        0,0,2618,2617,1,0,0,0,2618,2619,1,0,0,0,2619,2620,1,0,0,0,2620,2625,
        3,522,261,0,2621,2622,3,546,273,0,2622,2623,3,524,262,0,2623,2625,
        1,0,0,0,2624,2615,1,0,0,0,2624,2621,1,0,0,0,2625,545,1,0,0,0,2626,
        2628,3,566,283,0,2627,2626,1,0,0,0,2628,2629,1,0,0,0,2629,2627,1,
        0,0,0,2629,2630,1,0,0,0,2630,547,1,0,0,0,2631,2632,5,141,0,0,2632,
        2633,3,522,261,0,2633,2634,5,144,0,0,2634,549,1,0,0,0,2635,2636,
        5,141,0,0,2636,2637,3,522,261,0,2637,2638,5,146,0,0,2638,2639,3,
        522,261,0,2639,2640,5,144,0,0,2640,551,1,0,0,0,2641,2646,3,526,263,
        0,2642,2643,5,154,0,0,2643,2645,3,526,263,0,2644,2642,1,0,0,0,2645,
        2648,1,0,0,0,2646,2644,1,0,0,0,2646,2647,1,0,0,0,2647,2650,1,0,0,
        0,2648,2646,1,0,0,0,2649,2651,3,554,277,0,2650,2649,1,0,0,0,2650,
        2651,1,0,0,0,2651,553,1,0,0,0,2652,2653,4,277,10,0,2653,2654,5,154,
        0,0,2654,555,1,0,0,0,2655,2656,5,92,0,0,2656,2657,3,522,261,0,2657,
        557,1,0,0,0,2658,2659,5,83,0,0,2659,559,1,0,0,0,2660,2661,5,96,0,
        0,2661,561,1,0,0,0,2662,2663,5,146,0,0,2663,2664,3,564,282,0,2664,
        563,1,0,0,0,2665,2670,3,526,263,0,2666,2667,5,145,0,0,2667,2669,
        3,526,263,0,2668,2666,1,0,0,0,2669,2672,1,0,0,0,2670,2668,1,0,0,
        0,2670,2671,1,0,0,0,2671,565,1,0,0,0,2672,2670,1,0,0,0,2673,2683,
        7,17,0,0,2674,2683,5,137,0,0,2675,2679,5,165,0,0,2676,2680,3,570,
        285,0,2677,2680,5,137,0,0,2678,2680,5,166,0,0,2679,2676,1,0,0,0,
        2679,2677,1,0,0,0,2679,2678,1,0,0,0,2680,2681,1,0,0,0,2681,2683,
        5,165,0,0,2682,2673,1,0,0,0,2682,2674,1,0,0,0,2682,2675,1,0,0,0,
        2683,567,1,0,0,0,2684,2689,3,566,283,0,2685,2686,5,145,0,0,2686,
        2688,3,566,283,0,2687,2685,1,0,0,0,2688,2691,1,0,0,0,2689,2687,1,
        0,0,0,2689,2690,1,0,0,0,2690,569,1,0,0,0,2691,2689,1,0,0,0,2692,
        2693,7,18,0,0,2693,571,1,0,0,0,2694,2695,4,286,11,0,2695,2696,5,
        156,0,0,2696,573,1,0,0,0,2697,2698,4,287,12,0,2698,2699,5,155,0,
        0,2699,575,1,0,0,0,2700,2701,4,288,13,0,2701,2702,5,154,0,0,2702,
        2703,5,154,0,0,2703,577,1,0,0,0,2704,2705,4,289,14,0,2705,2706,5,
        157,0,0,2706,2707,5,157,0,0,2707,579,1,0,0,0,2708,2709,4,290,15,
        0,2709,2710,5,149,0,0,2710,2711,5,156,0,0,2711,581,1,0,0,0,2712,
        2713,4,291,16,0,2713,2714,5,148,0,0,2714,583,1,0,0,0,2715,2716,4,
        292,17,0,2716,2717,5,155,0,0,2717,2718,5,149,0,0,2718,585,1,0,0,
        0,2719,2720,4,293,18,0,2720,2721,5,138,0,0,2721,2722,5,138,0,0,2722,
        2723,5,138,0,0,2723,587,1,0,0,0,2724,2725,4,294,19,0,2725,2726,5,
        156,0,0,2726,2727,5,156,0,0,2727,589,1,0,0,0,2728,2729,4,295,20,
        0,2729,2730,3,596,298,0,2730,591,1,0,0,0,2731,2732,4,296,21,0,2732,
        2733,3,596,298,0,2733,593,1,0,0,0,2734,2735,4,297,22,0,2735,2736,
        3,596,298,0,2736,595,1,0,0,0,2737,2739,3,598,299,0,2738,2740,3,602,
        301,0,2739,2738,1,0,0,0,2739,2740,1,0,0,0,2740,2745,1,0,0,0,2741,
        2742,3,604,302,0,2742,2743,3,608,304,0,2743,2745,1,0,0,0,2744,2737,
        1,0,0,0,2744,2741,1,0,0,0,2745,597,1,0,0,0,2746,2749,7,19,0,0,2747,
        2749,5,168,0,0,2748,2746,1,0,0,0,2748,2747,1,0,0,0,2749,599,1,0,
        0,0,2750,2753,3,598,299,0,2751,2753,5,169,0,0,2752,2750,1,0,0,0,
        2752,2751,1,0,0,0,2753,601,1,0,0,0,2754,2755,4,301,23,0,2755,2757,
        3,600,300,0,2756,2754,1,0,0,0,2757,2758,1,0,0,0,2758,2756,1,0,0,
        0,2758,2759,1,0,0,0,2759,603,1,0,0,0,2760,2761,5,138,0,0,2761,605,
        1,0,0,0,2762,2765,5,138,0,0,2763,2765,3,600,300,0,2764,2762,1,0,
        0,0,2764,2763,1,0,0,0,2765,607,1,0,0,0,2766,2767,4,304,24,0,2767,
        2769,3,606,303,0,2768,2766,1,0,0,0,2769,2770,1,0,0,0,2770,2768,1,
        0,0,0,2770,2771,1,0,0,0,2771,609,1,0,0,0,2772,2777,3,612,306,0,2773,
        2777,3,620,310,0,2774,2777,3,614,307,0,2775,2777,3,616,308,0,2776,
        2772,1,0,0,0,2776,2773,1,0,0,0,2776,2774,1,0,0,0,2776,2775,1,0,0,
        0,2777,611,1,0,0,0,2778,2780,3,574,287,0,2779,2778,1,0,0,0,2779,
        2780,1,0,0,0,2780,2781,1,0,0,0,2781,2787,3,618,309,0,2782,2784,3,
        574,287,0,2783,2782,1,0,0,0,2783,2784,1,0,0,0,2784,2785,1,0,0,0,
        2785,2787,5,175,0,0,2786,2779,1,0,0,0,2786,2783,1,0,0,0,2787,613,
        1,0,0,0,2788,2789,7,20,0,0,2789,615,1,0,0,0,2790,2791,5,90,0,0,2791,
        617,1,0,0,0,2792,2793,7,21,0,0,2793,619,1,0,0,0,2794,2798,3,622,
        311,0,2795,2798,3,626,313,0,2796,2798,3,624,312,0,2797,2794,1,0,
        0,0,2797,2795,1,0,0,0,2797,2796,1,0,0,0,2798,621,1,0,0,0,2799,2801,
        5,180,0,0,2800,2802,5,193,0,0,2801,2800,1,0,0,0,2802,2803,1,0,0,
        0,2803,2801,1,0,0,0,2803,2804,1,0,0,0,2804,2805,1,0,0,0,2805,2814,
        5,192,0,0,2806,2808,5,181,0,0,2807,2809,5,191,0,0,2808,2807,1,0,
        0,0,2809,2810,1,0,0,0,2810,2808,1,0,0,0,2810,2811,1,0,0,0,2811,2812,
        1,0,0,0,2812,2814,5,190,0,0,2813,2799,1,0,0,0,2813,2806,1,0,0,0,
        2814,623,1,0,0,0,2815,2819,5,183,0,0,2816,2818,5,186,0,0,2817,2816,
        1,0,0,0,2818,2821,1,0,0,0,2819,2817,1,0,0,0,2819,2820,1,0,0,0,2820,
        2822,1,0,0,0,2821,2819,1,0,0,0,2822,2832,5,185,0,0,2823,2827,5,182,
        0,0,2824,2826,5,189,0,0,2825,2824,1,0,0,0,2826,2829,1,0,0,0,2827,
        2825,1,0,0,0,2827,2828,1,0,0,0,2828,2830,1,0,0,0,2829,2827,1,0,0,
        0,2830,2832,5,188,0,0,2831,2815,1,0,0,0,2831,2823,1,0,0,0,2832,625,
        1,0,0,0,2833,2847,5,183,0,0,2834,2846,5,186,0,0,2835,2841,5,184,
        0,0,2836,2842,3,402,201,0,2837,2838,3,472,236,0,2838,2839,5,145,
        0,0,2839,2840,3,470,235,0,2840,2842,1,0,0,0,2841,2836,1,0,0,0,2841,
        2837,1,0,0,0,2842,2843,1,0,0,0,2843,2844,5,143,0,0,2844,2846,1,0,
        0,0,2845,2834,1,0,0,0,2845,2835,1,0,0,0,2846,2849,1,0,0,0,2847,2845,
        1,0,0,0,2847,2848,1,0,0,0,2848,2850,1,0,0,0,2849,2847,1,0,0,0,2850,
        2870,5,185,0,0,2851,2865,5,182,0,0,2852,2864,5,189,0,0,2853,2859,
        5,187,0,0,2854,2860,3,402,201,0,2855,2856,3,472,236,0,2856,2857,
        5,145,0,0,2857,2858,3,470,235,0,2858,2860,1,0,0,0,2859,2854,1,0,
        0,0,2859,2855,1,0,0,0,2860,2861,1,0,0,0,2861,2862,5,143,0,0,2862,
        2864,1,0,0,0,2863,2852,1,0,0,0,2863,2853,1,0,0,0,2864,2867,1,0,0,
        0,2865,2863,1,0,0,0,2865,2866,1,0,0,0,2866,2868,1,0,0,0,2867,2865,
        1,0,0,0,2868,2870,5,188,0,0,2869,2833,1,0,0,0,2869,2851,1,0,0,0,
        2870,627,1,0,0,0,357,629,641,644,647,655,660,664,670,683,690,708,
        714,720,731,737,741,746,749,757,762,766,770,782,785,792,796,801,
        805,812,824,828,832,838,849,854,858,869,874,879,883,886,893,898,
        903,907,919,924,930,947,962,966,971,982,997,1022,1029,1038,1040,
        1051,1058,1060,1070,1075,1081,1087,1098,1118,1121,1126,1129,1133,
        1138,1142,1153,1158,1161,1164,1174,1179,1191,1196,1198,1201,1204,
        1207,1216,1221,1226,1229,1232,1236,1239,1242,1246,1249,1258,1263,
        1268,1271,1276,1279,1286,1290,1292,1297,1301,1306,1310,1315,1318,
        1323,1335,1339,1342,1345,1348,1354,1358,1361,1364,1368,1376,1385,
        1389,1392,1397,1400,1410,1413,1417,1420,1425,1428,1431,1435,1442,
        1447,1450,1453,1463,1473,1475,1484,1488,1497,1502,1505,1515,1520,
        1528,1531,1534,1539,1542,1545,1558,1563,1566,1569,1572,1576,1578,
        1583,1586,1589,1602,1607,1610,1613,1620,1623,1636,1641,1649,1659,
        1663,1667,1671,1674,1677,1682,1687,1690,1695,1698,1701,1705,1709,
        1712,1717,1720,1724,1729,1735,1738,1743,1746,1757,1762,1767,1772,
        1775,1778,1782,1788,1795,1809,1818,1825,1830,1849,1857,1876,1881,
        1886,1892,1900,1903,1911,1918,1929,1933,1942,1948,1953,1958,1968,
        1975,1980,1987,1992,1996,2001,2006,2014,2022,2025,2029,2036,2040,
        2044,2051,2058,2061,2066,2071,2080,2082,2088,2104,2111,2124,2128,
        2137,2141,2148,2157,2161,2200,2214,2227,2231,2234,2239,2243,2246,
        2253,2257,2261,2268,2274,2276,2287,2291,2295,2300,2307,2309,2314,
        2318,2336,2343,2349,2357,2367,2372,2375,2380,2389,2395,2413,2415,
        2421,2425,2429,2437,2447,2449,2466,2475,2479,2484,2488,2493,2502,
        2521,2532,2536,2541,2544,2550,2554,2560,2569,2576,2580,2585,2588,
        2592,2600,2602,2611,2615,2618,2624,2629,2646,2650,2670,2679,2682,
        2689,2739,2744,2748,2752,2758,2764,2770,2776,2779,2783,2786,2797,
        2803,2810,2813,2819,2827,2831,2841,2845,2847,2859,2863,2865,2869
    ]

class Swift5Parser ( SwiftSupport ):

    grammarFileName = "Swift5Parser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'as'", "'alpha'", "'break'", "'case'", 
                     "'catch'", "'class'", "'continue'", "'default'", "'defer'", 
                     "'do'", "'guard'", "'else'", "'enum'", "'for'", "'fallthrough'", 
                     "'func'", "'in'", "'if'", "'import'", "'internal'", 
                     "'final'", "'open'", "'private'", "'public'", "'where'", 
                     "'while'", "'let'", "'var'", "'protocol'", "'get'", 
                     "'set'", "'willSet'", "'didSet'", "'repeat'", "'switch'", 
                     "'struct'", "'return'", "'throw'", "'throws'", "'rethrows'", 
                     "'indirect'", "'init'", "'deinit'", "'associatedtype'", 
                     "'extension'", "'subscript'", "'prefix'", "'infix'", 
                     "'left'", "'right'", "'none'", "'precedencegroup'", 
                     "'higherThan'", "'lowerThan'", "'assignment'", "'associativity'", 
                     "'postfix'", "'operator'", "'typealias'", "'os'", "'arch'", 
                     "'swift'", "'compiler'", "'canImport'", "'targetEnvironment'", 
                     "'convenience'", "'dynamic'", "'lazy'", "'optional'", 
                     "'override'", "'required'", "'static'", "'weak'", "'unowned'", 
                     "'safe'", "'unsafe'", "'mutating'", "'nonmutating'", 
                     "'fileprivate'", "'is'", "'try'", "'super'", "'Any'", 
                     "'false'", "'red'", "'blue'", "'green'", "'resourceName'", 
                     "'true'", "'nil'", "'inout'", "'some'", "'Type'", "'precedence'", 
                     "'self'", "'Self'", "'macOS'", "'iOS'", "'OSX'", "'watchOS'", 
                     "'tvOS'", "'Linux'", "'Windows'", "'i386'", "'x86_64'", 
                     "'arm'", "'arm64'", "'simulator'", "'macCatalyst'", 
                     "'iOSApplicationExtension'", "'macCatalystApplicationExtension'", 
                     "'macOSApplicationExtension'", "'#sourceLocation'", 
                     "'file'", "'line'", "'#error'", "'#warning'", "'#available'", 
                     "'#if'", "'#elseif'", "'#else'", "'#endif'", "'#file'", 
                     "'#fileID'", "'#filePath'", "'#line'", "'#column'", 
                     "'#function'", "'#dsohandle'", "'#selector'", "'#keyPath'", 
                     "'#colorLiteral'", "'#fileLiteral'", "'#imageLiteral'", 
                     "'getter'", "'setter'", "<INVALID>", "'.'", "'{'", 
                     "'('", "'['", "'}'", "')'", "']'", "','", "':'", "';'", 
                     "'<'", "'>'", "'_'", "'!'", "'?'", "'@'", "'&'", "'-'", 
                     "'='", "'|'", "'/'", "'+'", "'*'", "'%'", "'^'", "'~'", 
                     "'#'", "'`'", "'$'", "'\\'" ]

    symbolicNames = [ "<INVALID>", "AS", "ALPHA", "BREAK", "CASE", "CATCH", 
                      "CLASS", "CONTINUE", "DEFAULT", "DEFER", "DO", "GUARD", 
                      "ELSE", "ENUM", "FOR", "FALLTHROUGH", "FUNC", "IN", 
                      "IF", "IMPORT", "INTERNAL", "FINAL", "OPEN", "PRIVATE", 
                      "PUBLIC", "WHERE", "WHILE", "LET", "VAR", "PROTOCOL", 
                      "GET", "SET", "WILL_SET", "DID_SET", "REPEAT", "SWITCH", 
                      "STRUCT", "RETURN", "THROW", "THROWS", "RETHROWS", 
                      "INDIRECT", "INIT", "DEINIT", "ASSOCIATED_TYPE", "EXTENSION", 
                      "SUBSCRIPT", "PREFIX", "INFIX", "LEFT", "RIGHT", "NONE", 
                      "PRECEDENCE_GROUP", "HIGHER_THAN", "LOWER_THAN", "ASSIGNMENT", 
                      "ASSOCIATIVITY", "POSTFIX", "OPERATOR", "TYPEALIAS", 
                      "OS", "ARCH", "SWIFT", "COMPILER", "CAN_IMPORT", "TARGET_ENVIRONMENT", 
                      "CONVENIENCE", "DYNAMIC", "LAZY", "OPTIONAL", "OVERRIDE", 
                      "REQUIRED", "STATIC", "WEAK", "UNOWNED", "SAFE", "UNSAFE", 
                      "MUTATING", "NONMUTATING", "FILE_PRIVATE", "IS", "TRY", 
                      "SUPER", "ANY", "FALSE", "RED", "BLUE", "GREEN", "RESOURCE_NAME", 
                      "TRUE", "NIL", "INOUT", "SOME", "TYPE", "PRECEDENCE", 
                      "SELF", "SELF_BIG", "MAC_OS", "I_OS", "OSX", "WATCH_OS", 
                      "TV_OS", "LINUX", "WINDOWS", "I386", "X86_64", "ARM", 
                      "ARM64", "SIMULATOR", "MAC_CATALYST", "I_OS_APPLICATION_EXTENSION", 
                      "MAC_CATALYST_APPLICATION_EXTENSION", "MAC_OS_APPLICATION_EXTENSION", 
                      "SOURCE_LOCATION", "FILE", "LINE", "ERROR", "WARNING", 
                      "AVAILABLE", "HASH_IF", "HASH_ELSEIF", "HASH_ELSE", 
                      "HASH_ENDIF", "HASH_FILE", "HASH_FILE_ID", "HASH_FILE_PATH", 
                      "HASH_LINE", "HASH_COLUMN", "HASH_FUNCTION", "HASH_DSO_HANDLE", 
                      "HASH_SELECTOR", "HASH_KEYPATH", "HASH_COLOR_LITERAL", 
                      "HASH_FILE_LITERAL", "HASH_IMAGE_LITERAL", "GETTER", 
                      "SETTER", "Identifier", "DOT", "LCURLY", "LPAREN", 
                      "LBRACK", "RCURLY", "RPAREN", "RBRACK", "COMMA", "COLON", 
                      "SEMI", "LT", "GT", "UNDERSCORE", "BANG", "QUESTION", 
                      "AT", "AND", "SUB", "EQUAL", "OR", "DIV", "ADD", "MUL", 
                      "MOD", "CARET", "TILDE", "HASH", "BACKTICK", "DOLLAR", 
                      "BACKSLASH", "Operator_head_other", "Operator_following_character", 
                      "Binary_literal", "Octal_literal", "Decimal_digits", 
                      "Decimal_literal", "Hexadecimal_literal", "Floating_point_literal", 
                      "WS", "HASHBANG", "Block_comment", "Line_comment", 
                      "Multi_line_extended_string_open", "Single_line_extended_string_open", 
                      "Multi_line_string_open", "Single_line_string_open", 
                      "Interpolataion_single_line", "Single_line_string_close", 
                      "Quoted_single_line_text", "Interpolataion_multi_line", 
                      "Multi_line_string_close", "Quoted_multi_line_text", 
                      "Single_line_extended_string_close", "Quoted_single_line_extended_text", 
                      "Multi_line_extended_string_close", "Quoted_multi_line_extended_text" ]

    RULE_top_level = 0
    RULE_statement = 1
    RULE_statements = 2
    RULE_loop_statement = 3
    RULE_for_in_statement = 4
    RULE_while_statement = 5
    RULE_condition_list = 6
    RULE_condition = 7
    RULE_case_condition = 8
    RULE_optional_binding_condition = 9
    RULE_repeat_while_statement = 10
    RULE_branch_statement = 11
    RULE_if_statement = 12
    RULE_else_clause = 13
    RULE_guard_statement = 14
    RULE_switch_statement = 15
    RULE_switch_cases = 16
    RULE_switch_case = 17
    RULE_case_label = 18
    RULE_case_item_list = 19
    RULE_default_label = 20
    RULE_where_clause = 21
    RULE_where_expression = 22
    RULE_conditional_switch_case = 23
    RULE_switch_if_directive_clause = 24
    RULE_switch_elseif_directive_clauses = 25
    RULE_switch_elseif_directive_clause = 26
    RULE_switch_else_directive_clause = 27
    RULE_labeled_statement = 28
    RULE_statement_label = 29
    RULE_label_name = 30
    RULE_control_transfer_statement = 31
    RULE_break_statement = 32
    RULE_continue_statement = 33
    RULE_fallthrough_statement = 34
    RULE_return_statement = 35
    RULE_throw_statement = 36
    RULE_defer_statement = 37
    RULE_do_statement = 38
    RULE_catch_clauses = 39
    RULE_catch_clause = 40
    RULE_catch_pattern_list = 41
    RULE_catch_pattern = 42
    RULE_compiler_control_statement = 43
    RULE_conditional_compilation_block = 44
    RULE_if_directive_clause = 45
    RULE_elseif_directive_clauses = 46
    RULE_elseif_directive_clause = 47
    RULE_else_directive_clause = 48
    RULE_compilation_condition = 49
    RULE_platform_condition = 50
    RULE_swift_version = 51
    RULE_swift_version_continuation = 52
    RULE_operating_system = 53
    RULE_architecture = 54
    RULE_module_name = 55
    RULE_environment = 56
    RULE_line_control_statement = 57
    RULE_line_number = 58
    RULE_file_name = 59
    RULE_diagnostic_statement = 60
    RULE_diagnostic_message = 61
    RULE_availability_condition = 62
    RULE_availability_arguments = 63
    RULE_availability_argument = 64
    RULE_platform_name = 65
    RULE_platform_version = 66
    RULE_generic_parameter_clause = 67
    RULE_generic_parameter_list = 68
    RULE_generic_parameter = 69
    RULE_generic_where_clause = 70
    RULE_requirement_list = 71
    RULE_requirement = 72
    RULE_conformance_requirement = 73
    RULE_same_type_requirement = 74
    RULE_generic_argument_clause = 75
    RULE_generic_argument_list = 76
    RULE_generic_argument = 77
    RULE_declaration = 78
    RULE_declarations = 79
    RULE_top_level_declaration = 80
    RULE_code_block = 81
    RULE_import_declaration = 82
    RULE_import_kind = 83
    RULE_import_path = 84
    RULE_import_path_identifier = 85
    RULE_constant_declaration = 86
    RULE_pattern_initializer_list = 87
    RULE_pattern_initializer = 88
    RULE_initializer = 89
    RULE_variable_declaration = 90
    RULE_variable_declaration_head = 91
    RULE_variable_name = 92
    RULE_getter_setter_block = 93
    RULE_getter_clause = 94
    RULE_setter_clause = 95
    RULE_setter_name = 96
    RULE_getter_setter_keyword_block = 97
    RULE_getter_keyword_clause = 98
    RULE_setter_keyword_clause = 99
    RULE_willSet_didSet_block = 100
    RULE_willSet_clause = 101
    RULE_didSet_clause = 102
    RULE_typealias_declaration = 103
    RULE_typealias_name = 104
    RULE_typealias_assignment = 105
    RULE_function_declaration = 106
    RULE_function_head = 107
    RULE_function_name = 108
    RULE_function_signature = 109
    RULE_function_result = 110
    RULE_function_body = 111
    RULE_parameter_clause = 112
    RULE_parameter_list = 113
    RULE_parameter = 114
    RULE_external_parameter_name = 115
    RULE_local_parameter_name = 116
    RULE_default_argument_clause = 117
    RULE_enum_declaration = 118
    RULE_union_style_enum = 119
    RULE_union_style_enum_members = 120
    RULE_union_style_enum_member = 121
    RULE_union_style_enum_case_clause = 122
    RULE_union_style_enum_case_list = 123
    RULE_union_style_enum_case = 124
    RULE_enum_name = 125
    RULE_enum_case_name = 126
    RULE_raw_value_style_enum = 127
    RULE_raw_value_style_enum_members = 128
    RULE_raw_value_style_enum_member = 129
    RULE_raw_value_style_enum_case_clause = 130
    RULE_raw_value_style_enum_case_list = 131
    RULE_raw_value_style_enum_case = 132
    RULE_raw_value_assignment = 133
    RULE_raw_value_literal = 134
    RULE_struct_declaration = 135
    RULE_struct_name = 136
    RULE_struct_body = 137
    RULE_struct_members = 138
    RULE_struct_member = 139
    RULE_class_declaration = 140
    RULE_class_name = 141
    RULE_class_body = 142
    RULE_class_members = 143
    RULE_class_member = 144
    RULE_protocol_declaration = 145
    RULE_protocol_name = 146
    RULE_protocol_body = 147
    RULE_protocol_members = 148
    RULE_protocol_member = 149
    RULE_protocol_member_declaration = 150
    RULE_protocol_property_declaration = 151
    RULE_protocol_method_declaration = 152
    RULE_protocol_initializer_declaration = 153
    RULE_protocol_subscript_declaration = 154
    RULE_protocol_associated_type_declaration = 155
    RULE_initializer_declaration = 156
    RULE_initializer_head = 157
    RULE_initializer_body = 158
    RULE_deinitializer_declaration = 159
    RULE_extension_declaration = 160
    RULE_extension_body = 161
    RULE_extension_members = 162
    RULE_extension_member = 163
    RULE_subscript_declaration = 164
    RULE_subscript_head = 165
    RULE_subscript_result = 166
    RULE_operator_declaration = 167
    RULE_prefix_operator_declaration = 168
    RULE_postfix_operator_declaration = 169
    RULE_infix_operator_declaration = 170
    RULE_infix_operator_group = 171
    RULE_precedence_group_declaration = 172
    RULE_precedence_group_attributes = 173
    RULE_precedence_group_attribute = 174
    RULE_precedence_group_relation = 175
    RULE_precedence_group_assignment = 176
    RULE_precedence_group_associativity = 177
    RULE_precedence_group_names = 178
    RULE_precedence_group_name = 179
    RULE_declaration_modifier = 180
    RULE_declaration_modifiers = 181
    RULE_access_level_modifier = 182
    RULE_mutation_modifier = 183
    RULE_pattern = 184
    RULE_wildcard_pattern = 185
    RULE_identifier_pattern = 186
    RULE_value_binding_pattern = 187
    RULE_tuple_pattern = 188
    RULE_tuple_pattern_element_list = 189
    RULE_tuple_pattern_element = 190
    RULE_enum_case_pattern = 191
    RULE_optional_pattern = 192
    RULE_expression_pattern = 193
    RULE_attribute = 194
    RULE_attribute_name = 195
    RULE_attribute_argument_clause = 196
    RULE_attributes = 197
    RULE_balanced_tokens = 198
    RULE_balanced_token = 199
    RULE_balanced_token_punctuation = 200
    RULE_expression = 201
    RULE_expression_list = 202
    RULE_prefix_expression = 203
    RULE_in_out_expression = 204
    RULE_try_operator = 205
    RULE_binary_expression = 206
    RULE_binary_expressions = 207
    RULE_conditional_operator = 208
    RULE_type_casting_operator = 209
    RULE_primary_expression = 210
    RULE_unqualified_name = 211
    RULE_literal_expression = 212
    RULE_array_literal = 213
    RULE_array_literal_items = 214
    RULE_array_literal_item = 215
    RULE_dictionary_literal = 216
    RULE_dictionary_literal_items = 217
    RULE_dictionary_literal_item = 218
    RULE_playground_literal = 219
    RULE_self_expression = 220
    RULE_superclass_expression = 221
    RULE_closure_expression = 222
    RULE_closure_signature = 223
    RULE_closure_parameter_clause = 224
    RULE_closure_parameter_list = 225
    RULE_closure_parameter = 226
    RULE_capture_list = 227
    RULE_capture_list_items = 228
    RULE_capture_list_item = 229
    RULE_capture_specifier = 230
    RULE_implicit_member_expression = 231
    RULE_parenthesized_operator = 232
    RULE_parenthesized_expression = 233
    RULE_tuple_expression = 234
    RULE_tuple_element_list = 235
    RULE_tuple_element = 236
    RULE_wildcard_expression = 237
    RULE_key_path_expression = 238
    RULE_key_path_components = 239
    RULE_key_path_component = 240
    RULE_key_path_postfixes = 241
    RULE_key_path_postfix = 242
    RULE_selector_expression = 243
    RULE_key_path_string_expression = 244
    RULE_postfix_expression = 245
    RULE_function_call_suffix = 246
    RULE_initializer_suffix = 247
    RULE_explicit_member_suffix = 248
    RULE_postfix_self_suffix = 249
    RULE_subscript_suffix = 250
    RULE_forced_value_suffix = 251
    RULE_optional_chaining_suffix = 252
    RULE_function_call_argument_clause = 253
    RULE_function_call_argument_list = 254
    RULE_function_call_argument = 255
    RULE_trailing_closures = 256
    RULE_labeled_trailing_closures = 257
    RULE_labeled_trailing_closure = 258
    RULE_argument_names = 259
    RULE_argument_name = 260
    RULE_type = 261
    RULE_type_annotation = 262
    RULE_type_identifier = 263
    RULE_type_name = 264
    RULE_tuple_type = 265
    RULE_tuple_type_element_list = 266
    RULE_tuple_type_element = 267
    RULE_element_name = 268
    RULE_function_type = 269
    RULE_function_type_argument_clause = 270
    RULE_function_type_argument_list = 271
    RULE_function_type_argument = 272
    RULE_argument_label = 273
    RULE_array_type = 274
    RULE_dictionary_type = 275
    RULE_protocol_composition_type = 276
    RULE_trailing_composition_and = 277
    RULE_opaque_type = 278
    RULE_any_type = 279
    RULE_self_type = 280
    RULE_type_inheritance_clause = 281
    RULE_type_inheritance_list = 282
    RULE_identifier = 283
    RULE_identifier_list = 284
    RULE_keyword = 285
    RULE_assignment_operator = 286
    RULE_negate_prefix_operator = 287
    RULE_compilation_condition_AND = 288
    RULE_compilation_condition_OR = 289
    RULE_compilation_condition_GE = 290
    RULE_compilation_condition_L = 291
    RULE_arrow_operator = 292
    RULE_range_operator = 293
    RULE_same_type_equals = 294
    RULE_binary_operator = 295
    RULE_prefix_operator = 296
    RULE_postfix_operator = 297
    RULE_operator = 298
    RULE_operator_head = 299
    RULE_operator_character = 300
    RULE_operator_characters = 301
    RULE_dot_operator_head = 302
    RULE_dot_operator_character = 303
    RULE_dot_operator_characters = 304
    RULE_literal = 305
    RULE_numeric_literal = 306
    RULE_boolean_literal = 307
    RULE_nil_literal = 308
    RULE_integer_literal = 309
    RULE_string_literal = 310
    RULE_extended_string_literal = 311
    RULE_static_string_literal = 312
    RULE_interpolated_string_literal = 313

    ruleNames =  [ "top_level", "statement", "statements", "loop_statement", 
                   "for_in_statement", "while_statement", "condition_list", 
                   "condition", "case_condition", "optional_binding_condition", 
                   "repeat_while_statement", "branch_statement", "if_statement", 
                   "else_clause", "guard_statement", "switch_statement", 
                   "switch_cases", "switch_case", "case_label", "case_item_list", 
                   "default_label", "where_clause", "where_expression", 
                   "conditional_switch_case", "switch_if_directive_clause", 
                   "switch_elseif_directive_clauses", "switch_elseif_directive_clause", 
                   "switch_else_directive_clause", "labeled_statement", 
                   "statement_label", "label_name", "control_transfer_statement", 
                   "break_statement", "continue_statement", "fallthrough_statement", 
                   "return_statement", "throw_statement", "defer_statement", 
                   "do_statement", "catch_clauses", "catch_clause", "catch_pattern_list", 
                   "catch_pattern", "compiler_control_statement", "conditional_compilation_block", 
                   "if_directive_clause", "elseif_directive_clauses", "elseif_directive_clause", 
                   "else_directive_clause", "compilation_condition", "platform_condition", 
                   "swift_version", "swift_version_continuation", "operating_system", 
                   "architecture", "module_name", "environment", "line_control_statement", 
                   "line_number", "file_name", "diagnostic_statement", "diagnostic_message", 
                   "availability_condition", "availability_arguments", "availability_argument", 
                   "platform_name", "platform_version", "generic_parameter_clause", 
                   "generic_parameter_list", "generic_parameter", "generic_where_clause", 
                   "requirement_list", "requirement", "conformance_requirement", 
                   "same_type_requirement", "generic_argument_clause", "generic_argument_list", 
                   "generic_argument", "declaration", "declarations", "top_level_declaration", 
                   "code_block", "import_declaration", "import_kind", "import_path", 
                   "import_path_identifier", "constant_declaration", "pattern_initializer_list", 
                   "pattern_initializer", "initializer", "variable_declaration", 
                   "variable_declaration_head", "variable_name", "getter_setter_block", 
                   "getter_clause", "setter_clause", "setter_name", "getter_setter_keyword_block", 
                   "getter_keyword_clause", "setter_keyword_clause", "willSet_didSet_block", 
                   "willSet_clause", "didSet_clause", "typealias_declaration", 
                   "typealias_name", "typealias_assignment", "function_declaration", 
                   "function_head", "function_name", "function_signature", 
                   "function_result", "function_body", "parameter_clause", 
                   "parameter_list", "parameter", "external_parameter_name", 
                   "local_parameter_name", "default_argument_clause", "enum_declaration", 
                   "union_style_enum", "union_style_enum_members", "union_style_enum_member", 
                   "union_style_enum_case_clause", "union_style_enum_case_list", 
                   "union_style_enum_case", "enum_name", "enum_case_name", 
                   "raw_value_style_enum", "raw_value_style_enum_members", 
                   "raw_value_style_enum_member", "raw_value_style_enum_case_clause", 
                   "raw_value_style_enum_case_list", "raw_value_style_enum_case", 
                   "raw_value_assignment", "raw_value_literal", "struct_declaration", 
                   "struct_name", "struct_body", "struct_members", "struct_member", 
                   "class_declaration", "class_name", "class_body", "class_members", 
                   "class_member", "protocol_declaration", "protocol_name", 
                   "protocol_body", "protocol_members", "protocol_member", 
                   "protocol_member_declaration", "protocol_property_declaration", 
                   "protocol_method_declaration", "protocol_initializer_declaration", 
                   "protocol_subscript_declaration", "protocol_associated_type_declaration", 
                   "initializer_declaration", "initializer_head", "initializer_body", 
                   "deinitializer_declaration", "extension_declaration", 
                   "extension_body", "extension_members", "extension_member", 
                   "subscript_declaration", "subscript_head", "subscript_result", 
                   "operator_declaration", "prefix_operator_declaration", 
                   "postfix_operator_declaration", "infix_operator_declaration", 
                   "infix_operator_group", "precedence_group_declaration", 
                   "precedence_group_attributes", "precedence_group_attribute", 
                   "precedence_group_relation", "precedence_group_assignment", 
                   "precedence_group_associativity", "precedence_group_names", 
                   "precedence_group_name", "declaration_modifier", "declaration_modifiers", 
                   "access_level_modifier", "mutation_modifier", "pattern", 
                   "wildcard_pattern", "identifier_pattern", "value_binding_pattern", 
                   "tuple_pattern", "tuple_pattern_element_list", "tuple_pattern_element", 
                   "enum_case_pattern", "optional_pattern", "expression_pattern", 
                   "attribute", "attribute_name", "attribute_argument_clause", 
                   "attributes", "balanced_tokens", "balanced_token", "balanced_token_punctuation", 
                   "expression", "expression_list", "prefix_expression", 
                   "in_out_expression", "try_operator", "binary_expression", 
                   "binary_expressions", "conditional_operator", "type_casting_operator", 
                   "primary_expression", "unqualified_name", "literal_expression", 
                   "array_literal", "array_literal_items", "array_literal_item", 
                   "dictionary_literal", "dictionary_literal_items", "dictionary_literal_item", 
                   "playground_literal", "self_expression", "superclass_expression", 
                   "closure_expression", "closure_signature", "closure_parameter_clause", 
                   "closure_parameter_list", "closure_parameter", "capture_list", 
                   "capture_list_items", "capture_list_item", "capture_specifier", 
                   "implicit_member_expression", "parenthesized_operator", 
                   "parenthesized_expression", "tuple_expression", "tuple_element_list", 
                   "tuple_element", "wildcard_expression", "key_path_expression", 
                   "key_path_components", "key_path_component", "key_path_postfixes", 
                   "key_path_postfix", "selector_expression", "key_path_string_expression", 
                   "postfix_expression", "function_call_suffix", "initializer_suffix", 
                   "explicit_member_suffix", "postfix_self_suffix", "subscript_suffix", 
                   "forced_value_suffix", "optional_chaining_suffix", "function_call_argument_clause", 
                   "function_call_argument_list", "function_call_argument", 
                   "trailing_closures", "labeled_trailing_closures", "labeled_trailing_closure", 
                   "argument_names", "argument_name", "type", "type_annotation", 
                   "type_identifier", "type_name", "tuple_type", "tuple_type_element_list", 
                   "tuple_type_element", "element_name", "function_type", 
                   "function_type_argument_clause", "function_type_argument_list", 
                   "function_type_argument", "argument_label", "array_type", 
                   "dictionary_type", "protocol_composition_type", "trailing_composition_and", 
                   "opaque_type", "any_type", "self_type", "type_inheritance_clause", 
                   "type_inheritance_list", "identifier", "identifier_list", 
                   "keyword", "assignment_operator", "negate_prefix_operator", 
                   "compilation_condition_AND", "compilation_condition_OR", 
                   "compilation_condition_GE", "compilation_condition_L", 
                   "arrow_operator", "range_operator", "same_type_equals", 
                   "binary_operator", "prefix_operator", "postfix_operator", 
                   "operator", "operator_head", "operator_character", "operator_characters", 
                   "dot_operator_head", "dot_operator_character", "dot_operator_characters", 
                   "literal", "numeric_literal", "boolean_literal", "nil_literal", 
                   "integer_literal", "string_literal", "extended_string_literal", 
                   "static_string_literal", "interpolated_string_literal" ]

    EOF = Token.EOF
    AS=1
    ALPHA=2
    BREAK=3
    CASE=4
    CATCH=5
    CLASS=6
    CONTINUE=7
    DEFAULT=8
    DEFER=9
    DO=10
    GUARD=11
    ELSE=12
    ENUM=13
    FOR=14
    FALLTHROUGH=15
    FUNC=16
    IN=17
    IF=18
    IMPORT=19
    INTERNAL=20
    FINAL=21
    OPEN=22
    PRIVATE=23
    PUBLIC=24
    WHERE=25
    WHILE=26
    LET=27
    VAR=28
    PROTOCOL=29
    GET=30
    SET=31
    WILL_SET=32
    DID_SET=33
    REPEAT=34
    SWITCH=35
    STRUCT=36
    RETURN=37
    THROW=38
    THROWS=39
    RETHROWS=40
    INDIRECT=41
    INIT=42
    DEINIT=43
    ASSOCIATED_TYPE=44
    EXTENSION=45
    SUBSCRIPT=46
    PREFIX=47
    INFIX=48
    LEFT=49
    RIGHT=50
    NONE=51
    PRECEDENCE_GROUP=52
    HIGHER_THAN=53
    LOWER_THAN=54
    ASSIGNMENT=55
    ASSOCIATIVITY=56
    POSTFIX=57
    OPERATOR=58
    TYPEALIAS=59
    OS=60
    ARCH=61
    SWIFT=62
    COMPILER=63
    CAN_IMPORT=64
    TARGET_ENVIRONMENT=65
    CONVENIENCE=66
    DYNAMIC=67
    LAZY=68
    OPTIONAL=69
    OVERRIDE=70
    REQUIRED=71
    STATIC=72
    WEAK=73
    UNOWNED=74
    SAFE=75
    UNSAFE=76
    MUTATING=77
    NONMUTATING=78
    FILE_PRIVATE=79
    IS=80
    TRY=81
    SUPER=82
    ANY=83
    FALSE=84
    RED=85
    BLUE=86
    GREEN=87
    RESOURCE_NAME=88
    TRUE=89
    NIL=90
    INOUT=91
    SOME=92
    TYPE=93
    PRECEDENCE=94
    SELF=95
    SELF_BIG=96
    MAC_OS=97
    I_OS=98
    OSX=99
    WATCH_OS=100
    TV_OS=101
    LINUX=102
    WINDOWS=103
    I386=104
    X86_64=105
    ARM=106
    ARM64=107
    SIMULATOR=108
    MAC_CATALYST=109
    I_OS_APPLICATION_EXTENSION=110
    MAC_CATALYST_APPLICATION_EXTENSION=111
    MAC_OS_APPLICATION_EXTENSION=112
    SOURCE_LOCATION=113
    FILE=114
    LINE=115
    ERROR=116
    WARNING=117
    AVAILABLE=118
    HASH_IF=119
    HASH_ELSEIF=120
    HASH_ELSE=121
    HASH_ENDIF=122
    HASH_FILE=123
    HASH_FILE_ID=124
    HASH_FILE_PATH=125
    HASH_LINE=126
    HASH_COLUMN=127
    HASH_FUNCTION=128
    HASH_DSO_HANDLE=129
    HASH_SELECTOR=130
    HASH_KEYPATH=131
    HASH_COLOR_LITERAL=132
    HASH_FILE_LITERAL=133
    HASH_IMAGE_LITERAL=134
    GETTER=135
    SETTER=136
    Identifier=137
    DOT=138
    LCURLY=139
    LPAREN=140
    LBRACK=141
    RCURLY=142
    RPAREN=143
    RBRACK=144
    COMMA=145
    COLON=146
    SEMI=147
    LT=148
    GT=149
    UNDERSCORE=150
    BANG=151
    QUESTION=152
    AT=153
    AND=154
    SUB=155
    EQUAL=156
    OR=157
    DIV=158
    ADD=159
    MUL=160
    MOD=161
    CARET=162
    TILDE=163
    HASH=164
    BACKTICK=165
    DOLLAR=166
    BACKSLASH=167
    Operator_head_other=168
    Operator_following_character=169
    Binary_literal=170
    Octal_literal=171
    Decimal_digits=172
    Decimal_literal=173
    Hexadecimal_literal=174
    Floating_point_literal=175
    WS=176
    HASHBANG=177
    Block_comment=178
    Line_comment=179
    Multi_line_extended_string_open=180
    Single_line_extended_string_open=181
    Multi_line_string_open=182
    Single_line_string_open=183
    Interpolataion_single_line=184
    Single_line_string_close=185
    Quoted_single_line_text=186
    Interpolataion_multi_line=187
    Multi_line_string_close=188
    Quoted_multi_line_text=189
    Single_line_extended_string_close=190
    Quoted_single_line_extended_text=191
    Multi_line_extended_string_close=192
    Quoted_multi_line_extended_text=193

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Top_levelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(Swift5Parser.EOF, 0)

        def statements(self):
            return self.getTypedRuleContext(Swift5Parser.StatementsContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_top_level

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTop_level" ):
                listener.enterTop_level(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTop_level" ):
                listener.exitTop_level(self)




    def top_level(self):

        localctx = Swift5Parser.Top_levelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_top_level)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 629
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.state = 628
                self.statements()


            self.state = 631
            self.match(Swift5Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def loop_statement(self):
            return self.getTypedRuleContext(Swift5Parser.Loop_statementContext,0)


        def declaration(self):
            return self.getTypedRuleContext(Swift5Parser.DeclarationContext,0)


        def branch_statement(self):
            return self.getTypedRuleContext(Swift5Parser.Branch_statementContext,0)


        def labeled_statement(self):
            return self.getTypedRuleContext(Swift5Parser.Labeled_statementContext,0)


        def control_transfer_statement(self):
            return self.getTypedRuleContext(Swift5Parser.Control_transfer_statementContext,0)


        def defer_statement(self):
            return self.getTypedRuleContext(Swift5Parser.Defer_statementContext,0)


        def do_statement(self):
            return self.getTypedRuleContext(Swift5Parser.Do_statementContext,0)


        def expression(self):
            return self.getTypedRuleContext(Swift5Parser.ExpressionContext,0)


        def SEMI(self):
            return self.getToken(Swift5Parser.SEMI, 0)

        def compiler_control_statement(self):
            return self.getTypedRuleContext(Swift5Parser.Compiler_control_statementContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = Swift5Parser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_statement)
        try:
            self.state = 647
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 641
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
                if la_ == 1:
                    self.state = 633
                    self.loop_statement()
                    pass

                elif la_ == 2:
                    self.state = 634
                    self.declaration()
                    pass

                elif la_ == 3:
                    self.state = 635
                    self.branch_statement()
                    pass

                elif la_ == 4:
                    self.state = 636
                    self.labeled_statement()
                    pass

                elif la_ == 5:
                    self.state = 637
                    self.control_transfer_statement()
                    pass

                elif la_ == 6:
                    self.state = 638
                    self.defer_statement()
                    pass

                elif la_ == 7:
                    self.state = 639
                    self.do_statement()
                    pass

                elif la_ == 8:
                    self.state = 640
                    self.expression()
                    pass


                self.state = 644
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
                if la_ == 1:
                    self.state = 643
                    self.match(Swift5Parser.SEMI)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 646
                self.compiler_control_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.indexBefore = -1

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.StatementContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.StatementContext,i)


        def getRuleIndex(self):
            return Swift5Parser.RULE_statements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatements" ):
                listener.enterStatements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatements" ):
                listener.exitStatements(self)




    def statements(self):

        localctx = Swift5Parser.StatementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_statements)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 653 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 649
                    if not this.isSeparatedStatement(_input, localctx.indexBefore):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "this.isSeparatedStatement(_input, $indexBefore)")
                    self.state = 650
                    self.statement()
                    localctx.indexBefore =  _input.index()
                    			

                else:
                    raise NoViableAltException(self)
                self.state = 655 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Loop_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def for_in_statement(self):
            return self.getTypedRuleContext(Swift5Parser.For_in_statementContext,0)


        def while_statement(self):
            return self.getTypedRuleContext(Swift5Parser.While_statementContext,0)


        def repeat_while_statement(self):
            return self.getTypedRuleContext(Swift5Parser.Repeat_while_statementContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_loop_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoop_statement" ):
                listener.enterLoop_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoop_statement" ):
                listener.exitLoop_statement(self)




    def loop_statement(self):

        localctx = Swift5Parser.Loop_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_loop_statement)
        try:
            self.state = 660
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [14]:
                self.enterOuterAlt(localctx, 1)
                self.state = 657
                self.for_in_statement()
                pass
            elif token in [26]:
                self.enterOuterAlt(localctx, 2)
                self.state = 658
                self.while_statement()
                pass
            elif token in [34]:
                self.enterOuterAlt(localctx, 3)
                self.state = 659
                self.repeat_while_statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_in_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(Swift5Parser.FOR, 0)

        def pattern(self):
            return self.getTypedRuleContext(Swift5Parser.PatternContext,0)


        def IN(self):
            return self.getToken(Swift5Parser.IN, 0)

        def expression(self):
            return self.getTypedRuleContext(Swift5Parser.ExpressionContext,0)


        def code_block(self):
            return self.getTypedRuleContext(Swift5Parser.Code_blockContext,0)


        def CASE(self):
            return self.getToken(Swift5Parser.CASE, 0)

        def where_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Where_clauseContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_for_in_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_in_statement" ):
                listener.enterFor_in_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_in_statement" ):
                listener.exitFor_in_statement(self)




    def for_in_statement(self):

        localctx = Swift5Parser.For_in_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_for_in_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 662
            self.match(Swift5Parser.FOR)
            self.state = 664
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.state = 663
                self.match(Swift5Parser.CASE)


            self.state = 666
            self.pattern(0)
            self.state = 667
            self.match(Swift5Parser.IN)
            self.state = 668
            self.expression()
            self.state = 670
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==25:
                self.state = 669
                self.where_clause()


            self.state = 672
            self.code_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class While_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(Swift5Parser.WHILE, 0)

        def condition_list(self):
            return self.getTypedRuleContext(Swift5Parser.Condition_listContext,0)


        def code_block(self):
            return self.getTypedRuleContext(Swift5Parser.Code_blockContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_while_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhile_statement" ):
                listener.enterWhile_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhile_statement" ):
                listener.exitWhile_statement(self)




    def while_statement(self):

        localctx = Swift5Parser.While_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_while_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 674
            self.match(Swift5Parser.WHILE)
            self.state = 675
            self.condition_list()
            self.state = 676
            self.code_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Condition_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def condition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.ConditionContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.ConditionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.COMMA)
            else:
                return self.getToken(Swift5Parser.COMMA, i)

        def getRuleIndex(self):
            return Swift5Parser.RULE_condition_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondition_list" ):
                listener.enterCondition_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondition_list" ):
                listener.exitCondition_list(self)




    def condition_list(self):

        localctx = Swift5Parser.Condition_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_condition_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 678
            self.condition()
            self.state = 683
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==145:
                self.state = 679
                self.match(Swift5Parser.COMMA)
                self.state = 680
                self.condition()
                self.state = 685
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def availability_condition(self):
            return self.getTypedRuleContext(Swift5Parser.Availability_conditionContext,0)


        def expression(self):
            return self.getTypedRuleContext(Swift5Parser.ExpressionContext,0)


        def case_condition(self):
            return self.getTypedRuleContext(Swift5Parser.Case_conditionContext,0)


        def optional_binding_condition(self):
            return self.getTypedRuleContext(Swift5Parser.Optional_binding_conditionContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondition" ):
                listener.enterCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondition" ):
                listener.exitCondition(self)




    def condition(self):

        localctx = Swift5Parser.ConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_condition)
        try:
            self.state = 690
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 686
                self.availability_condition()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 687
                self.expression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 688
                self.case_condition()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 689
                self.optional_binding_condition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_conditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(Swift5Parser.CASE, 0)

        def pattern(self):
            return self.getTypedRuleContext(Swift5Parser.PatternContext,0)


        def initializer(self):
            return self.getTypedRuleContext(Swift5Parser.InitializerContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_case_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_condition" ):
                listener.enterCase_condition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_condition" ):
                listener.exitCase_condition(self)




    def case_condition(self):

        localctx = Swift5Parser.Case_conditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_case_condition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 692
            self.match(Swift5Parser.CASE)
            self.state = 693
            self.pattern(0)
            self.state = 694
            self.initializer()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Optional_binding_conditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pattern(self):
            return self.getTypedRuleContext(Swift5Parser.PatternContext,0)


        def initializer(self):
            return self.getTypedRuleContext(Swift5Parser.InitializerContext,0)


        def LET(self):
            return self.getToken(Swift5Parser.LET, 0)

        def VAR(self):
            return self.getToken(Swift5Parser.VAR, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_optional_binding_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptional_binding_condition" ):
                listener.enterOptional_binding_condition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptional_binding_condition" ):
                listener.exitOptional_binding_condition(self)




    def optional_binding_condition(self):

        localctx = Swift5Parser.Optional_binding_conditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_optional_binding_condition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 696
            _la = self._input.LA(1)
            if not(_la==27 or _la==28):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 697
            self.pattern(0)
            self.state = 698
            self.initializer()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Repeat_while_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPEAT(self):
            return self.getToken(Swift5Parser.REPEAT, 0)

        def code_block(self):
            return self.getTypedRuleContext(Swift5Parser.Code_blockContext,0)


        def WHILE(self):
            return self.getToken(Swift5Parser.WHILE, 0)

        def expression(self):
            return self.getTypedRuleContext(Swift5Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_repeat_while_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRepeat_while_statement" ):
                listener.enterRepeat_while_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRepeat_while_statement" ):
                listener.exitRepeat_while_statement(self)




    def repeat_while_statement(self):

        localctx = Swift5Parser.Repeat_while_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_repeat_while_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 700
            self.match(Swift5Parser.REPEAT)
            self.state = 701
            self.code_block()
            self.state = 702
            self.match(Swift5Parser.WHILE)
            self.state = 703
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Branch_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def if_statement(self):
            return self.getTypedRuleContext(Swift5Parser.If_statementContext,0)


        def guard_statement(self):
            return self.getTypedRuleContext(Swift5Parser.Guard_statementContext,0)


        def switch_statement(self):
            return self.getTypedRuleContext(Swift5Parser.Switch_statementContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_branch_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBranch_statement" ):
                listener.enterBranch_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBranch_statement" ):
                listener.exitBranch_statement(self)




    def branch_statement(self):

        localctx = Swift5Parser.Branch_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_branch_statement)
        try:
            self.state = 708
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [18]:
                self.enterOuterAlt(localctx, 1)
                self.state = 705
                self.if_statement()
                pass
            elif token in [11]:
                self.enterOuterAlt(localctx, 2)
                self.state = 706
                self.guard_statement()
                pass
            elif token in [35]:
                self.enterOuterAlt(localctx, 3)
                self.state = 707
                self.switch_statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(Swift5Parser.IF, 0)

        def condition_list(self):
            return self.getTypedRuleContext(Swift5Parser.Condition_listContext,0)


        def code_block(self):
            return self.getTypedRuleContext(Swift5Parser.Code_blockContext,0)


        def else_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Else_clauseContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_if_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_statement" ):
                listener.enterIf_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_statement" ):
                listener.exitIf_statement(self)




    def if_statement(self):

        localctx = Swift5Parser.If_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_if_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 710
            self.match(Swift5Parser.IF)
            self.state = 711
            self.condition_list()
            self.state = 712
            self.code_block()
            self.state = 714
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.state = 713
                self.else_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(Swift5Parser.ELSE, 0)

        def code_block(self):
            return self.getTypedRuleContext(Swift5Parser.Code_blockContext,0)


        def if_statement(self):
            return self.getTypedRuleContext(Swift5Parser.If_statementContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_else_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElse_clause" ):
                listener.enterElse_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElse_clause" ):
                listener.exitElse_clause(self)




    def else_clause(self):

        localctx = Swift5Parser.Else_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_else_clause)
        try:
            self.state = 720
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 716
                self.match(Swift5Parser.ELSE)
                self.state = 717
                self.code_block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 718
                self.match(Swift5Parser.ELSE)
                self.state = 719
                self.if_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Guard_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GUARD(self):
            return self.getToken(Swift5Parser.GUARD, 0)

        def condition_list(self):
            return self.getTypedRuleContext(Swift5Parser.Condition_listContext,0)


        def ELSE(self):
            return self.getToken(Swift5Parser.ELSE, 0)

        def code_block(self):
            return self.getTypedRuleContext(Swift5Parser.Code_blockContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_guard_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGuard_statement" ):
                listener.enterGuard_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGuard_statement" ):
                listener.exitGuard_statement(self)




    def guard_statement(self):

        localctx = Swift5Parser.Guard_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_guard_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 722
            self.match(Swift5Parser.GUARD)
            self.state = 723
            self.condition_list()
            self.state = 724
            self.match(Swift5Parser.ELSE)
            self.state = 725
            self.code_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Switch_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SWITCH(self):
            return self.getToken(Swift5Parser.SWITCH, 0)

        def expression(self):
            return self.getTypedRuleContext(Swift5Parser.ExpressionContext,0)


        def LCURLY(self):
            return self.getToken(Swift5Parser.LCURLY, 0)

        def RCURLY(self):
            return self.getToken(Swift5Parser.RCURLY, 0)

        def switch_cases(self):
            return self.getTypedRuleContext(Swift5Parser.Switch_casesContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_switch_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_statement" ):
                listener.enterSwitch_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_statement" ):
                listener.exitSwitch_statement(self)




    def switch_statement(self):

        localctx = Swift5Parser.Switch_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_switch_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 727
            self.match(Swift5Parser.SWITCH)
            self.state = 728
            self.expression()
            self.state = 729
            self.match(Swift5Parser.LCURLY)
            self.state = 731
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==4 or _la==8 or _la==119 or _la==153:
                self.state = 730
                self.switch_cases()


            self.state = 733
            self.match(Swift5Parser.RCURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Switch_casesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def switch_case(self):
            return self.getTypedRuleContext(Swift5Parser.Switch_caseContext,0)


        def switch_cases(self):
            return self.getTypedRuleContext(Swift5Parser.Switch_casesContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_switch_cases

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_cases" ):
                listener.enterSwitch_cases(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_cases" ):
                listener.exitSwitch_cases(self)




    def switch_cases(self):

        localctx = Swift5Parser.Switch_casesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_switch_cases)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 735
            self.switch_case()
            self.state = 737
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==4 or _la==8 or _la==119 or _la==153:
                self.state = 736
                self.switch_cases()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Switch_caseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statements(self):
            return self.getTypedRuleContext(Swift5Parser.StatementsContext,0)


        def case_label(self):
            return self.getTypedRuleContext(Swift5Parser.Case_labelContext,0)


        def default_label(self):
            return self.getTypedRuleContext(Swift5Parser.Default_labelContext,0)


        def conditional_switch_case(self):
            return self.getTypedRuleContext(Swift5Parser.Conditional_switch_caseContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_switch_case

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_case" ):
                listener.enterSwitch_case(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_case" ):
                listener.exitSwitch_case(self)




    def switch_case(self):

        localctx = Swift5Parser.Switch_caseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_switch_case)
        try:
            self.state = 746
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [4, 8, 153]:
                self.enterOuterAlt(localctx, 1)
                self.state = 741
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
                if la_ == 1:
                    self.state = 739
                    self.case_label()
                    pass

                elif la_ == 2:
                    self.state = 740
                    self.default_label()
                    pass


                self.state = 743
                self.statements()
                pass
            elif token in [119]:
                self.enterOuterAlt(localctx, 2)
                self.state = 745
                self.conditional_switch_case()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_labelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(Swift5Parser.CASE, 0)

        def case_item_list(self):
            return self.getTypedRuleContext(Swift5Parser.Case_item_listContext,0)


        def COLON(self):
            return self.getToken(Swift5Parser.COLON, 0)

        def attributes(self):
            return self.getTypedRuleContext(Swift5Parser.AttributesContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_case_label

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_label" ):
                listener.enterCase_label(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_label" ):
                listener.exitCase_label(self)




    def case_label(self):

        localctx = Swift5Parser.Case_labelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_case_label)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 749
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==153:
                self.state = 748
                self.attributes()


            self.state = 751
            self.match(Swift5Parser.CASE)
            self.state = 752
            self.case_item_list()
            self.state = 753
            self.match(Swift5Parser.COLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_item_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.PatternContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.PatternContext,i)


        def where_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Where_clauseContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Where_clauseContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.COMMA)
            else:
                return self.getToken(Swift5Parser.COMMA, i)

        def getRuleIndex(self):
            return Swift5Parser.RULE_case_item_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_item_list" ):
                listener.enterCase_item_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_item_list" ):
                listener.exitCase_item_list(self)




    def case_item_list(self):

        localctx = Swift5Parser.Case_item_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_case_item_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 755
            self.pattern(0)
            self.state = 757
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==25:
                self.state = 756
                self.where_clause()


            self.state = 766
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==145:
                self.state = 759
                self.match(Swift5Parser.COMMA)
                self.state = 760
                self.pattern(0)
                self.state = 762
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==25:
                    self.state = 761
                    self.where_clause()


                self.state = 768
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Default_labelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(Swift5Parser.DEFAULT, 0)

        def COLON(self):
            return self.getToken(Swift5Parser.COLON, 0)

        def attributes(self):
            return self.getTypedRuleContext(Swift5Parser.AttributesContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_default_label

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_label" ):
                listener.enterDefault_label(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_label" ):
                listener.exitDefault_label(self)




    def default_label(self):

        localctx = Swift5Parser.Default_labelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_default_label)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 770
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==153:
                self.state = 769
                self.attributes()


            self.state = 772
            self.match(Swift5Parser.DEFAULT)
            self.state = 773
            self.match(Swift5Parser.COLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Where_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(Swift5Parser.WHERE, 0)

        def where_expression(self):
            return self.getTypedRuleContext(Swift5Parser.Where_expressionContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_where_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhere_clause" ):
                listener.enterWhere_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhere_clause" ):
                listener.exitWhere_clause(self)




    def where_clause(self):

        localctx = Swift5Parser.Where_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_where_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 775
            self.match(Swift5Parser.WHERE)
            self.state = 776
            self.where_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Where_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(Swift5Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_where_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhere_expression" ):
                listener.enterWhere_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhere_expression" ):
                listener.exitWhere_expression(self)




    def where_expression(self):

        localctx = Swift5Parser.Where_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_where_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 778
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conditional_switch_caseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def switch_if_directive_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Switch_if_directive_clauseContext,0)


        def HASH_ENDIF(self):
            return self.getToken(Swift5Parser.HASH_ENDIF, 0)

        def switch_elseif_directive_clauses(self):
            return self.getTypedRuleContext(Swift5Parser.Switch_elseif_directive_clausesContext,0)


        def switch_else_directive_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Switch_else_directive_clauseContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_conditional_switch_case

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditional_switch_case" ):
                listener.enterConditional_switch_case(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditional_switch_case" ):
                listener.exitConditional_switch_case(self)




    def conditional_switch_case(self):

        localctx = Swift5Parser.Conditional_switch_caseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_conditional_switch_case)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 780
            self.switch_if_directive_clause()
            self.state = 782
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==120:
                self.state = 781
                self.switch_elseif_directive_clauses()


            self.state = 785
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==121:
                self.state = 784
                self.switch_else_directive_clause()


            self.state = 787
            self.match(Swift5Parser.HASH_ENDIF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Switch_if_directive_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HASH_IF(self):
            return self.getToken(Swift5Parser.HASH_IF, 0)

        def compilation_condition(self):
            return self.getTypedRuleContext(Swift5Parser.Compilation_conditionContext,0)


        def switch_cases(self):
            return self.getTypedRuleContext(Swift5Parser.Switch_casesContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_switch_if_directive_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_if_directive_clause" ):
                listener.enterSwitch_if_directive_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_if_directive_clause" ):
                listener.exitSwitch_if_directive_clause(self)




    def switch_if_directive_clause(self):

        localctx = Swift5Parser.Switch_if_directive_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_switch_if_directive_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 789
            self.match(Swift5Parser.HASH_IF)
            self.state = 790
            self.compilation_condition(0)
            self.state = 792
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==4 or _la==8 or _la==119 or _la==153:
                self.state = 791
                self.switch_cases()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Switch_elseif_directive_clausesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elseif_directive_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Elseif_directive_clauseContext,0)


        def switch_elseif_directive_clauses(self):
            return self.getTypedRuleContext(Swift5Parser.Switch_elseif_directive_clausesContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_switch_elseif_directive_clauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_elseif_directive_clauses" ):
                listener.enterSwitch_elseif_directive_clauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_elseif_directive_clauses" ):
                listener.exitSwitch_elseif_directive_clauses(self)




    def switch_elseif_directive_clauses(self):

        localctx = Swift5Parser.Switch_elseif_directive_clausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_switch_elseif_directive_clauses)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 794
            self.elseif_directive_clause()
            self.state = 796
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==120:
                self.state = 795
                self.switch_elseif_directive_clauses()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Switch_elseif_directive_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HASH_ELSEIF(self):
            return self.getToken(Swift5Parser.HASH_ELSEIF, 0)

        def compilation_condition(self):
            return self.getTypedRuleContext(Swift5Parser.Compilation_conditionContext,0)


        def switch_cases(self):
            return self.getTypedRuleContext(Swift5Parser.Switch_casesContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_switch_elseif_directive_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_elseif_directive_clause" ):
                listener.enterSwitch_elseif_directive_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_elseif_directive_clause" ):
                listener.exitSwitch_elseif_directive_clause(self)




    def switch_elseif_directive_clause(self):

        localctx = Swift5Parser.Switch_elseif_directive_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_switch_elseif_directive_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 798
            self.match(Swift5Parser.HASH_ELSEIF)
            self.state = 799
            self.compilation_condition(0)
            self.state = 801
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==4 or _la==8 or _la==119 or _la==153:
                self.state = 800
                self.switch_cases()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Switch_else_directive_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HASH_ELSE(self):
            return self.getToken(Swift5Parser.HASH_ELSE, 0)

        def switch_cases(self):
            return self.getTypedRuleContext(Swift5Parser.Switch_casesContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_switch_else_directive_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_else_directive_clause" ):
                listener.enterSwitch_else_directive_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_else_directive_clause" ):
                listener.exitSwitch_else_directive_clause(self)




    def switch_else_directive_clause(self):

        localctx = Swift5Parser.Switch_else_directive_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_switch_else_directive_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 803
            self.match(Swift5Parser.HASH_ELSE)
            self.state = 805
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==4 or _la==8 or _la==119 or _la==153:
                self.state = 804
                self.switch_cases()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Labeled_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement_label(self):
            return self.getTypedRuleContext(Swift5Parser.Statement_labelContext,0)


        def loop_statement(self):
            return self.getTypedRuleContext(Swift5Parser.Loop_statementContext,0)


        def if_statement(self):
            return self.getTypedRuleContext(Swift5Parser.If_statementContext,0)


        def switch_statement(self):
            return self.getTypedRuleContext(Swift5Parser.Switch_statementContext,0)


        def do_statement(self):
            return self.getTypedRuleContext(Swift5Parser.Do_statementContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_labeled_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabeled_statement" ):
                listener.enterLabeled_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabeled_statement" ):
                listener.exitLabeled_statement(self)




    def labeled_statement(self):

        localctx = Swift5Parser.Labeled_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_labeled_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 807
            self.statement_label()
            self.state = 812
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [14, 26, 34]:
                self.state = 808
                self.loop_statement()
                pass
            elif token in [18]:
                self.state = 809
                self.if_statement()
                pass
            elif token in [35]:
                self.state = 810
                self.switch_statement()
                pass
            elif token in [10]:
                self.state = 811
                self.do_statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Statement_labelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def label_name(self):
            return self.getTypedRuleContext(Swift5Parser.Label_nameContext,0)


        def COLON(self):
            return self.getToken(Swift5Parser.COLON, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_statement_label

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement_label" ):
                listener.enterStatement_label(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement_label" ):
                listener.exitStatement_label(self)




    def statement_label(self):

        localctx = Swift5Parser.Statement_labelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_statement_label)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 814
            self.label_name()
            self.state = 815
            self.match(Swift5Parser.COLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Label_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Swift5Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_label_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabel_name" ):
                listener.enterLabel_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabel_name" ):
                listener.exitLabel_name(self)




    def label_name(self):

        localctx = Swift5Parser.Label_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_label_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 817
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Control_transfer_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def break_statement(self):
            return self.getTypedRuleContext(Swift5Parser.Break_statementContext,0)


        def continue_statement(self):
            return self.getTypedRuleContext(Swift5Parser.Continue_statementContext,0)


        def fallthrough_statement(self):
            return self.getTypedRuleContext(Swift5Parser.Fallthrough_statementContext,0)


        def return_statement(self):
            return self.getTypedRuleContext(Swift5Parser.Return_statementContext,0)


        def throw_statement(self):
            return self.getTypedRuleContext(Swift5Parser.Throw_statementContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_control_transfer_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterControl_transfer_statement" ):
                listener.enterControl_transfer_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitControl_transfer_statement" ):
                listener.exitControl_transfer_statement(self)




    def control_transfer_statement(self):

        localctx = Swift5Parser.Control_transfer_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_control_transfer_statement)
        try:
            self.state = 824
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3]:
                self.enterOuterAlt(localctx, 1)
                self.state = 819
                self.break_statement()
                pass
            elif token in [7]:
                self.enterOuterAlt(localctx, 2)
                self.state = 820
                self.continue_statement()
                pass
            elif token in [15]:
                self.enterOuterAlt(localctx, 3)
                self.state = 821
                self.fallthrough_statement()
                pass
            elif token in [37]:
                self.enterOuterAlt(localctx, 4)
                self.state = 822
                self.return_statement()
                pass
            elif token in [38]:
                self.enterOuterAlt(localctx, 5)
                self.state = 823
                self.throw_statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Break_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(Swift5Parser.BREAK, 0)

        def label_name(self):
            return self.getTypedRuleContext(Swift5Parser.Label_nameContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_break_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreak_statement" ):
                listener.enterBreak_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreak_statement" ):
                listener.exitBreak_statement(self)




    def break_statement(self):

        localctx = Swift5Parser.Break_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_break_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 826
            self.match(Swift5Parser.BREAK)
            self.state = 828
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.state = 827
                self.label_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Continue_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(Swift5Parser.CONTINUE, 0)

        def label_name(self):
            return self.getTypedRuleContext(Swift5Parser.Label_nameContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_continue_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinue_statement" ):
                listener.enterContinue_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinue_statement" ):
                listener.exitContinue_statement(self)




    def continue_statement(self):

        localctx = Swift5Parser.Continue_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_continue_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 830
            self.match(Swift5Parser.CONTINUE)
            self.state = 832
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.state = 831
                self.label_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fallthrough_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FALLTHROUGH(self):
            return self.getToken(Swift5Parser.FALLTHROUGH, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_fallthrough_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFallthrough_statement" ):
                listener.enterFallthrough_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFallthrough_statement" ):
                listener.exitFallthrough_statement(self)




    def fallthrough_statement(self):

        localctx = Swift5Parser.Fallthrough_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_fallthrough_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 834
            self.match(Swift5Parser.FALLTHROUGH)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Return_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(Swift5Parser.RETURN, 0)

        def expression(self):
            return self.getTypedRuleContext(Swift5Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_return_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturn_statement" ):
                listener.enterReturn_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturn_statement" ):
                listener.exitReturn_statement(self)




    def return_statement(self):

        localctx = Swift5Parser.Return_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_return_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 836
            self.match(Swift5Parser.RETURN)
            self.state = 838
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
            if la_ == 1:
                self.state = 837
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Throw_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THROW(self):
            return self.getToken(Swift5Parser.THROW, 0)

        def expression(self):
            return self.getTypedRuleContext(Swift5Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_throw_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrow_statement" ):
                listener.enterThrow_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrow_statement" ):
                listener.exitThrow_statement(self)




    def throw_statement(self):

        localctx = Swift5Parser.Throw_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_throw_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 840
            self.match(Swift5Parser.THROW)
            self.state = 841
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Defer_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFER(self):
            return self.getToken(Swift5Parser.DEFER, 0)

        def code_block(self):
            return self.getTypedRuleContext(Swift5Parser.Code_blockContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_defer_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefer_statement" ):
                listener.enterDefer_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefer_statement" ):
                listener.exitDefer_statement(self)




    def defer_statement(self):

        localctx = Swift5Parser.Defer_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_defer_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 843
            self.match(Swift5Parser.DEFER)
            self.state = 844
            self.code_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Do_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DO(self):
            return self.getToken(Swift5Parser.DO, 0)

        def code_block(self):
            return self.getTypedRuleContext(Swift5Parser.Code_blockContext,0)


        def catch_clauses(self):
            return self.getTypedRuleContext(Swift5Parser.Catch_clausesContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_do_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDo_statement" ):
                listener.enterDo_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDo_statement" ):
                listener.exitDo_statement(self)




    def do_statement(self):

        localctx = Swift5Parser.Do_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_do_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 846
            self.match(Swift5Parser.DO)
            self.state = 847
            self.code_block()
            self.state = 849
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.state = 848
                self.catch_clauses()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Catch_clausesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def catch_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Catch_clauseContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Catch_clauseContext,i)


        def getRuleIndex(self):
            return Swift5Parser.RULE_catch_clauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatch_clauses" ):
                listener.enterCatch_clauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatch_clauses" ):
                listener.exitCatch_clauses(self)




    def catch_clauses(self):

        localctx = Swift5Parser.Catch_clausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_catch_clauses)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 852 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 851
                    self.catch_clause()

                else:
                    raise NoViableAltException(self)
                self.state = 854 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,34,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Catch_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CATCH(self):
            return self.getToken(Swift5Parser.CATCH, 0)

        def code_block(self):
            return self.getTypedRuleContext(Swift5Parser.Code_blockContext,0)


        def catch_pattern_list(self):
            return self.getTypedRuleContext(Swift5Parser.Catch_pattern_listContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_catch_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatch_clause" ):
                listener.enterCatch_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatch_clause" ):
                listener.exitCatch_clause(self)




    def catch_clause(self):

        localctx = Swift5Parser.Catch_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_catch_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 856
            self.match(Swift5Parser.CATCH)
            self.state = 858
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.state = 857
                self.catch_pattern_list()


            self.state = 860
            self.code_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Catch_pattern_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def catch_pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Catch_patternContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Catch_patternContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.COMMA)
            else:
                return self.getToken(Swift5Parser.COMMA, i)

        def getRuleIndex(self):
            return Swift5Parser.RULE_catch_pattern_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatch_pattern_list" ):
                listener.enterCatch_pattern_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatch_pattern_list" ):
                listener.exitCatch_pattern_list(self)




    def catch_pattern_list(self):

        localctx = Swift5Parser.Catch_pattern_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_catch_pattern_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 862
            self.catch_pattern()
            self.state = 869
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,36,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 863
                    self.catch_pattern()
                    self.state = 864
                    self.match(Swift5Parser.COMMA)
                    self.state = 865
                    self.catch_pattern() 
                self.state = 871
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,36,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Catch_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pattern(self):
            return self.getTypedRuleContext(Swift5Parser.PatternContext,0)


        def where_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Where_clauseContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_catch_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatch_pattern" ):
                listener.enterCatch_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatch_pattern" ):
                listener.exitCatch_pattern(self)




    def catch_pattern(self):

        localctx = Swift5Parser.Catch_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_catch_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 872
            self.pattern(0)
            self.state = 874
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
            if la_ == 1:
                self.state = 873
                self.where_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compiler_control_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditional_compilation_block(self):
            return self.getTypedRuleContext(Swift5Parser.Conditional_compilation_blockContext,0)


        def line_control_statement(self):
            return self.getTypedRuleContext(Swift5Parser.Line_control_statementContext,0)


        def diagnostic_statement(self):
            return self.getTypedRuleContext(Swift5Parser.Diagnostic_statementContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_compiler_control_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompiler_control_statement" ):
                listener.enterCompiler_control_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompiler_control_statement" ):
                listener.exitCompiler_control_statement(self)




    def compiler_control_statement(self):

        localctx = Swift5Parser.Compiler_control_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_compiler_control_statement)
        try:
            self.state = 879
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [119]:
                self.enterOuterAlt(localctx, 1)
                self.state = 876
                self.conditional_compilation_block()
                pass
            elif token in [113]:
                self.enterOuterAlt(localctx, 2)
                self.state = 877
                self.line_control_statement()
                pass
            elif token in [116, 117]:
                self.enterOuterAlt(localctx, 3)
                self.state = 878
                self.diagnostic_statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conditional_compilation_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def if_directive_clause(self):
            return self.getTypedRuleContext(Swift5Parser.If_directive_clauseContext,0)


        def HASH_ENDIF(self):
            return self.getToken(Swift5Parser.HASH_ENDIF, 0)

        def elseif_directive_clauses(self):
            return self.getTypedRuleContext(Swift5Parser.Elseif_directive_clausesContext,0)


        def else_directive_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Else_directive_clauseContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_conditional_compilation_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditional_compilation_block" ):
                listener.enterConditional_compilation_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditional_compilation_block" ):
                listener.exitConditional_compilation_block(self)




    def conditional_compilation_block(self):

        localctx = Swift5Parser.Conditional_compilation_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_conditional_compilation_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 881
            self.if_directive_clause()
            self.state = 883
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==120:
                self.state = 882
                self.elseif_directive_clauses()


            self.state = 886
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==121:
                self.state = 885
                self.else_directive_clause()


            self.state = 888
            self.match(Swift5Parser.HASH_ENDIF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_directive_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HASH_IF(self):
            return self.getToken(Swift5Parser.HASH_IF, 0)

        def compilation_condition(self):
            return self.getTypedRuleContext(Swift5Parser.Compilation_conditionContext,0)


        def statements(self):
            return self.getTypedRuleContext(Swift5Parser.StatementsContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_if_directive_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_directive_clause" ):
                listener.enterIf_directive_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_directive_clause" ):
                listener.exitIf_directive_clause(self)




    def if_directive_clause(self):

        localctx = Swift5Parser.If_directive_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_if_directive_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 890
            self.match(Swift5Parser.HASH_IF)
            self.state = 891
            self.compilation_condition(0)
            self.state = 893
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                self.state = 892
                self.statements()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Elseif_directive_clausesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elseif_directive_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Elseif_directive_clauseContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Elseif_directive_clauseContext,i)


        def getRuleIndex(self):
            return Swift5Parser.RULE_elseif_directive_clauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElseif_directive_clauses" ):
                listener.enterElseif_directive_clauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElseif_directive_clauses" ):
                listener.exitElseif_directive_clauses(self)




    def elseif_directive_clauses(self):

        localctx = Swift5Parser.Elseif_directive_clausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_elseif_directive_clauses)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 896 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 895
                self.elseif_directive_clause()
                self.state = 898 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==120):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Elseif_directive_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HASH_ELSEIF(self):
            return self.getToken(Swift5Parser.HASH_ELSEIF, 0)

        def compilation_condition(self):
            return self.getTypedRuleContext(Swift5Parser.Compilation_conditionContext,0)


        def statements(self):
            return self.getTypedRuleContext(Swift5Parser.StatementsContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_elseif_directive_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElseif_directive_clause" ):
                listener.enterElseif_directive_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElseif_directive_clause" ):
                listener.exitElseif_directive_clause(self)




    def elseif_directive_clause(self):

        localctx = Swift5Parser.Elseif_directive_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_elseif_directive_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 900
            self.match(Swift5Parser.HASH_ELSEIF)
            self.state = 901
            self.compilation_condition(0)
            self.state = 903
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                self.state = 902
                self.statements()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_directive_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HASH_ELSE(self):
            return self.getToken(Swift5Parser.HASH_ELSE, 0)

        def statements(self):
            return self.getTypedRuleContext(Swift5Parser.StatementsContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_else_directive_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElse_directive_clause" ):
                listener.enterElse_directive_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElse_directive_clause" ):
                listener.exitElse_directive_clause(self)




    def else_directive_clause(self):

        localctx = Swift5Parser.Else_directive_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_else_directive_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 905
            self.match(Swift5Parser.HASH_ELSE)
            self.state = 907
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
            if la_ == 1:
                self.state = 906
                self.statements()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compilation_conditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def platform_condition(self):
            return self.getTypedRuleContext(Swift5Parser.Platform_conditionContext,0)


        def identifier(self):
            return self.getTypedRuleContext(Swift5Parser.IdentifierContext,0)


        def boolean_literal(self):
            return self.getTypedRuleContext(Swift5Parser.Boolean_literalContext,0)


        def LPAREN(self):
            return self.getToken(Swift5Parser.LPAREN, 0)

        def compilation_condition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Compilation_conditionContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Compilation_conditionContext,i)


        def RPAREN(self):
            return self.getToken(Swift5Parser.RPAREN, 0)

        def BANG(self):
            return self.getToken(Swift5Parser.BANG, 0)

        def compilation_condition_AND(self):
            return self.getTypedRuleContext(Swift5Parser.Compilation_condition_ANDContext,0)


        def compilation_condition_OR(self):
            return self.getTypedRuleContext(Swift5Parser.Compilation_condition_ORContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_compilation_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompilation_condition" ):
                listener.enterCompilation_condition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompilation_condition" ):
                listener.exitCompilation_condition(self)



    def compilation_condition(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = Swift5Parser.Compilation_conditionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 98
        self.enterRecursionRule(localctx, 98, self.RULE_compilation_condition, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 919
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
            if la_ == 1:
                self.state = 910
                self.platform_condition()
                pass

            elif la_ == 2:
                self.state = 911
                self.identifier()
                pass

            elif la_ == 3:
                self.state = 912
                self.boolean_literal()
                pass

            elif la_ == 4:
                self.state = 913
                self.match(Swift5Parser.LPAREN)
                self.state = 914
                self.compilation_condition(0)
                self.state = 915
                self.match(Swift5Parser.RPAREN)
                pass

            elif la_ == 5:
                self.state = 917
                self.match(Swift5Parser.BANG)
                self.state = 918
                self.compilation_condition(2)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 930
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,47,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = Swift5Parser.Compilation_conditionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_compilation_condition)
                    self.state = 921
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 924
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
                    if la_ == 1:
                        self.state = 922
                        self.compilation_condition_AND()
                        pass

                    elif la_ == 2:
                        self.state = 923
                        self.compilation_condition_OR()
                        pass


                    self.state = 926
                    self.compilation_condition(2) 
                self.state = 932
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,47,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Platform_conditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OS(self):
            return self.getToken(Swift5Parser.OS, 0)

        def LPAREN(self):
            return self.getToken(Swift5Parser.LPAREN, 0)

        def operating_system(self):
            return self.getTypedRuleContext(Swift5Parser.Operating_systemContext,0)


        def RPAREN(self):
            return self.getToken(Swift5Parser.RPAREN, 0)

        def ARCH(self):
            return self.getToken(Swift5Parser.ARCH, 0)

        def architecture(self):
            return self.getTypedRuleContext(Swift5Parser.ArchitectureContext,0)


        def swift_version(self):
            return self.getTypedRuleContext(Swift5Parser.Swift_versionContext,0)


        def SWIFT(self):
            return self.getToken(Swift5Parser.SWIFT, 0)

        def COMPILER(self):
            return self.getToken(Swift5Parser.COMPILER, 0)

        def compilation_condition_GE(self):
            return self.getTypedRuleContext(Swift5Parser.Compilation_condition_GEContext,0)


        def compilation_condition_L(self):
            return self.getTypedRuleContext(Swift5Parser.Compilation_condition_LContext,0)


        def CAN_IMPORT(self):
            return self.getToken(Swift5Parser.CAN_IMPORT, 0)

        def module_name(self):
            return self.getTypedRuleContext(Swift5Parser.Module_nameContext,0)


        def TARGET_ENVIRONMENT(self):
            return self.getToken(Swift5Parser.TARGET_ENVIRONMENT, 0)

        def environment(self):
            return self.getTypedRuleContext(Swift5Parser.EnvironmentContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_platform_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlatform_condition" ):
                listener.enterPlatform_condition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlatform_condition" ):
                listener.exitPlatform_condition(self)




    def platform_condition(self):

        localctx = Swift5Parser.Platform_conditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_platform_condition)
        self._la = 0 # Token type
        try:
            self.state = 962
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [60]:
                self.enterOuterAlt(localctx, 1)
                self.state = 933
                self.match(Swift5Parser.OS)
                self.state = 934
                self.match(Swift5Parser.LPAREN)
                self.state = 935
                self.operating_system()
                self.state = 936
                self.match(Swift5Parser.RPAREN)
                pass
            elif token in [61]:
                self.enterOuterAlt(localctx, 2)
                self.state = 938
                self.match(Swift5Parser.ARCH)
                self.state = 939
                self.match(Swift5Parser.LPAREN)
                self.state = 940
                self.architecture()
                self.state = 941
                self.match(Swift5Parser.RPAREN)
                pass
            elif token in [62, 63]:
                self.enterOuterAlt(localctx, 3)
                self.state = 943
                _la = self._input.LA(1)
                if not(_la==62 or _la==63):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 944
                self.match(Swift5Parser.LPAREN)
                self.state = 947
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
                if la_ == 1:
                    self.state = 945
                    self.compilation_condition_GE()
                    pass

                elif la_ == 2:
                    self.state = 946
                    self.compilation_condition_L()
                    pass


                self.state = 949
                self.swift_version()
                self.state = 950
                self.match(Swift5Parser.RPAREN)
                pass
            elif token in [64]:
                self.enterOuterAlt(localctx, 4)
                self.state = 952
                self.match(Swift5Parser.CAN_IMPORT)
                self.state = 953
                self.match(Swift5Parser.LPAREN)
                self.state = 954
                self.module_name()
                self.state = 955
                self.match(Swift5Parser.RPAREN)
                pass
            elif token in [65]:
                self.enterOuterAlt(localctx, 5)
                self.state = 957
                self.match(Swift5Parser.TARGET_ENVIRONMENT)
                self.state = 958
                self.match(Swift5Parser.LPAREN)
                self.state = 959
                self.environment()
                self.state = 960
                self.match(Swift5Parser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Swift_versionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Decimal_digits(self):
            return self.getToken(Swift5Parser.Decimal_digits, 0)

        def swift_version_continuation(self):
            return self.getTypedRuleContext(Swift5Parser.Swift_version_continuationContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_swift_version

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwift_version" ):
                listener.enterSwift_version(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwift_version" ):
                listener.exitSwift_version(self)




    def swift_version(self):

        localctx = Swift5Parser.Swift_versionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_swift_version)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 964
            self.match(Swift5Parser.Decimal_digits)
            self.state = 966
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==138:
                self.state = 965
                self.swift_version_continuation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Swift_version_continuationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(Swift5Parser.DOT, 0)

        def Decimal_digits(self):
            return self.getToken(Swift5Parser.Decimal_digits, 0)

        def swift_version_continuation(self):
            return self.getTypedRuleContext(Swift5Parser.Swift_version_continuationContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_swift_version_continuation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwift_version_continuation" ):
                listener.enterSwift_version_continuation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwift_version_continuation" ):
                listener.exitSwift_version_continuation(self)




    def swift_version_continuation(self):

        localctx = Swift5Parser.Swift_version_continuationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_swift_version_continuation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 968
            self.match(Swift5Parser.DOT)
            self.state = 969
            self.match(Swift5Parser.Decimal_digits)
            self.state = 971
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==138:
                self.state = 970
                self.swift_version_continuation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Operating_systemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAC_OS(self):
            return self.getToken(Swift5Parser.MAC_OS, 0)

        def I_OS(self):
            return self.getToken(Swift5Parser.I_OS, 0)

        def OSX(self):
            return self.getToken(Swift5Parser.OSX, 0)

        def WATCH_OS(self):
            return self.getToken(Swift5Parser.WATCH_OS, 0)

        def TV_OS(self):
            return self.getToken(Swift5Parser.TV_OS, 0)

        def LINUX(self):
            return self.getToken(Swift5Parser.LINUX, 0)

        def WINDOWS(self):
            return self.getToken(Swift5Parser.WINDOWS, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_operating_system

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperating_system" ):
                listener.enterOperating_system(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperating_system" ):
                listener.exitOperating_system(self)




    def operating_system(self):

        localctx = Swift5Parser.Operating_systemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_operating_system)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 973
            _la = self._input.LA(1)
            if not(((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & 127) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArchitectureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def I386(self):
            return self.getToken(Swift5Parser.I386, 0)

        def X86_64(self):
            return self.getToken(Swift5Parser.X86_64, 0)

        def ARM(self):
            return self.getToken(Swift5Parser.ARM, 0)

        def ARM64(self):
            return self.getToken(Swift5Parser.ARM64, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_architecture

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArchitecture" ):
                listener.enterArchitecture(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArchitecture" ):
                listener.exitArchitecture(self)




    def architecture(self):

        localctx = Swift5Parser.ArchitectureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_architecture)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 975
            _la = self._input.LA(1)
            if not(((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & 15) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Module_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.DOT)
            else:
                return self.getToken(Swift5Parser.DOT, i)

        def getRuleIndex(self):
            return Swift5Parser.RULE_module_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModule_name" ):
                listener.enterModule_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModule_name" ):
                listener.exitModule_name(self)




    def module_name(self):

        localctx = Swift5Parser.Module_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_module_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 977
            self.identifier()
            self.state = 982
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==138:
                self.state = 978
                self.match(Swift5Parser.DOT)
                self.state = 979
                self.identifier()
                self.state = 984
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnvironmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SIMULATOR(self):
            return self.getToken(Swift5Parser.SIMULATOR, 0)

        def MAC_CATALYST(self):
            return self.getToken(Swift5Parser.MAC_CATALYST, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_environment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnvironment" ):
                listener.enterEnvironment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnvironment" ):
                listener.exitEnvironment(self)




    def environment(self):

        localctx = Swift5Parser.EnvironmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_environment)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 985
            _la = self._input.LA(1)
            if not(_la==108 or _la==109):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Line_control_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SOURCE_LOCATION(self):
            return self.getToken(Swift5Parser.SOURCE_LOCATION, 0)

        def LPAREN(self):
            return self.getToken(Swift5Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(Swift5Parser.RPAREN, 0)

        def FILE(self):
            return self.getToken(Swift5Parser.FILE, 0)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.COLON)
            else:
                return self.getToken(Swift5Parser.COLON, i)

        def file_name(self):
            return self.getTypedRuleContext(Swift5Parser.File_nameContext,0)


        def COMMA(self):
            return self.getToken(Swift5Parser.COMMA, 0)

        def LINE(self):
            return self.getToken(Swift5Parser.LINE, 0)

        def line_number(self):
            return self.getTypedRuleContext(Swift5Parser.Line_numberContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_line_control_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLine_control_statement" ):
                listener.enterLine_control_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLine_control_statement" ):
                listener.exitLine_control_statement(self)




    def line_control_statement(self):

        localctx = Swift5Parser.Line_control_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_line_control_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 987
            self.match(Swift5Parser.SOURCE_LOCATION)
            self.state = 988
            self.match(Swift5Parser.LPAREN)
            self.state = 997
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==114:
                self.state = 989
                self.match(Swift5Parser.FILE)
                self.state = 990
                self.match(Swift5Parser.COLON)
                self.state = 991
                self.file_name()
                self.state = 992
                self.match(Swift5Parser.COMMA)
                self.state = 993
                self.match(Swift5Parser.LINE)
                self.state = 994
                self.match(Swift5Parser.COLON)
                self.state = 995
                self.line_number()


            self.state = 999
            self.match(Swift5Parser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Line_numberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Decimal_literal(self):
            return self.getToken(Swift5Parser.Decimal_literal, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_line_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLine_number" ):
                listener.enterLine_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLine_number" ):
                listener.exitLine_number(self)




    def line_number(self):

        localctx = Swift5Parser.Line_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_line_number)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1001
            self.match(Swift5Parser.Decimal_literal)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class File_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def static_string_literal(self):
            return self.getTypedRuleContext(Swift5Parser.Static_string_literalContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_file_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFile_name" ):
                listener.enterFile_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFile_name" ):
                listener.exitFile_name(self)




    def file_name(self):

        localctx = Swift5Parser.File_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_file_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1003
            self.static_string_literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Diagnostic_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(Swift5Parser.LPAREN, 0)

        def diagnostic_message(self):
            return self.getTypedRuleContext(Swift5Parser.Diagnostic_messageContext,0)


        def RPAREN(self):
            return self.getToken(Swift5Parser.RPAREN, 0)

        def ERROR(self):
            return self.getToken(Swift5Parser.ERROR, 0)

        def WARNING(self):
            return self.getToken(Swift5Parser.WARNING, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_diagnostic_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiagnostic_statement" ):
                listener.enterDiagnostic_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiagnostic_statement" ):
                listener.exitDiagnostic_statement(self)




    def diagnostic_statement(self):

        localctx = Swift5Parser.Diagnostic_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_diagnostic_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1005
            _la = self._input.LA(1)
            if not(_la==116 or _la==117):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1006
            self.match(Swift5Parser.LPAREN)
            self.state = 1007
            self.diagnostic_message()
            self.state = 1008
            self.match(Swift5Parser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Diagnostic_messageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def static_string_literal(self):
            return self.getTypedRuleContext(Swift5Parser.Static_string_literalContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_diagnostic_message

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiagnostic_message" ):
                listener.enterDiagnostic_message(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiagnostic_message" ):
                listener.exitDiagnostic_message(self)




    def diagnostic_message(self):

        localctx = Swift5Parser.Diagnostic_messageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_diagnostic_message)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1010
            self.static_string_literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Availability_conditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AVAILABLE(self):
            return self.getToken(Swift5Parser.AVAILABLE, 0)

        def LPAREN(self):
            return self.getToken(Swift5Parser.LPAREN, 0)

        def availability_arguments(self):
            return self.getTypedRuleContext(Swift5Parser.Availability_argumentsContext,0)


        def RPAREN(self):
            return self.getToken(Swift5Parser.RPAREN, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_availability_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAvailability_condition" ):
                listener.enterAvailability_condition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAvailability_condition" ):
                listener.exitAvailability_condition(self)




    def availability_condition(self):

        localctx = Swift5Parser.Availability_conditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_availability_condition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1012
            self.match(Swift5Parser.AVAILABLE)
            self.state = 1013
            self.match(Swift5Parser.LPAREN)
            self.state = 1014
            self.availability_arguments()
            self.state = 1015
            self.match(Swift5Parser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Availability_argumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def availability_argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Availability_argumentContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Availability_argumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.COMMA)
            else:
                return self.getToken(Swift5Parser.COMMA, i)

        def getRuleIndex(self):
            return Swift5Parser.RULE_availability_arguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAvailability_arguments" ):
                listener.enterAvailability_arguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAvailability_arguments" ):
                listener.exitAvailability_arguments(self)




    def availability_arguments(self):

        localctx = Swift5Parser.Availability_argumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_availability_arguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1017
            self.availability_argument()
            self.state = 1022
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==145:
                self.state = 1018
                self.match(Swift5Parser.COMMA)
                self.state = 1019
                self.availability_argument()
                self.state = 1024
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Availability_argumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def platform_name(self):
            return self.getTypedRuleContext(Swift5Parser.Platform_nameContext,0)


        def platform_version(self):
            return self.getTypedRuleContext(Swift5Parser.Platform_versionContext,0)


        def MUL(self):
            return self.getToken(Swift5Parser.MUL, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_availability_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAvailability_argument" ):
                listener.enterAvailability_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAvailability_argument" ):
                listener.exitAvailability_argument(self)




    def availability_argument(self):

        localctx = Swift5Parser.Availability_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_availability_argument)
        try:
            self.state = 1029
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [97, 98, 99, 100, 101, 109, 110, 111, 112]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1025
                self.platform_name()
                self.state = 1026
                self.platform_version()
                pass
            elif token in [160]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1028
                self.match(Swift5Parser.MUL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Platform_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def I_OS(self):
            return self.getToken(Swift5Parser.I_OS, 0)

        def OSX(self):
            return self.getToken(Swift5Parser.OSX, 0)

        def I_OS_APPLICATION_EXTENSION(self):
            return self.getToken(Swift5Parser.I_OS_APPLICATION_EXTENSION, 0)

        def MAC_OS(self):
            return self.getToken(Swift5Parser.MAC_OS, 0)

        def MAC_OS_APPLICATION_EXTENSION(self):
            return self.getToken(Swift5Parser.MAC_OS_APPLICATION_EXTENSION, 0)

        def MAC_CATALYST(self):
            return self.getToken(Swift5Parser.MAC_CATALYST, 0)

        def MAC_CATALYST_APPLICATION_EXTENSION(self):
            return self.getToken(Swift5Parser.MAC_CATALYST_APPLICATION_EXTENSION, 0)

        def WATCH_OS(self):
            return self.getToken(Swift5Parser.WATCH_OS, 0)

        def TV_OS(self):
            return self.getToken(Swift5Parser.TV_OS, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_platform_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlatform_name" ):
                listener.enterPlatform_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlatform_name" ):
                listener.exitPlatform_name(self)




    def platform_name(self):

        localctx = Swift5Parser.Platform_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_platform_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1031
            _la = self._input.LA(1)
            if not(((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & 61471) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Platform_versionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Decimal_literal(self):
            return self.getToken(Swift5Parser.Decimal_literal, 0)

        def Decimal_digits(self):
            return self.getToken(Swift5Parser.Decimal_digits, 0)

        def Floating_point_literal(self):
            return self.getToken(Swift5Parser.Floating_point_literal, 0)

        def DOT(self):
            return self.getToken(Swift5Parser.DOT, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_platform_version

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlatform_version" ):
                listener.enterPlatform_version(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlatform_version" ):
                listener.exitPlatform_version(self)




    def platform_version(self):

        localctx = Swift5Parser.Platform_versionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_platform_version)
        self._la = 0 # Token type
        try:
            self.state = 1040
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [173]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1033
                self.match(Swift5Parser.Decimal_literal)
                pass
            elif token in [172]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1034
                self.match(Swift5Parser.Decimal_digits)
                pass
            elif token in [175]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1035
                self.match(Swift5Parser.Floating_point_literal)
                self.state = 1038
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==138:
                    self.state = 1036
                    self.match(Swift5Parser.DOT)
                    self.state = 1037
                    self.match(Swift5Parser.Decimal_digits)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Generic_parameter_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(Swift5Parser.LT, 0)

        def generic_parameter_list(self):
            return self.getTypedRuleContext(Swift5Parser.Generic_parameter_listContext,0)


        def GT(self):
            return self.getToken(Swift5Parser.GT, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_generic_parameter_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneric_parameter_clause" ):
                listener.enterGeneric_parameter_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneric_parameter_clause" ):
                listener.exitGeneric_parameter_clause(self)




    def generic_parameter_clause(self):

        localctx = Swift5Parser.Generic_parameter_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_generic_parameter_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1042
            self.match(Swift5Parser.LT)
            self.state = 1043
            self.generic_parameter_list()
            self.state = 1044
            self.match(Swift5Parser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Generic_parameter_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def generic_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Generic_parameterContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Generic_parameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.COMMA)
            else:
                return self.getToken(Swift5Parser.COMMA, i)

        def getRuleIndex(self):
            return Swift5Parser.RULE_generic_parameter_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneric_parameter_list" ):
                listener.enterGeneric_parameter_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneric_parameter_list" ):
                listener.exitGeneric_parameter_list(self)




    def generic_parameter_list(self):

        localctx = Swift5Parser.Generic_parameter_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_generic_parameter_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1046
            self.generic_parameter()
            self.state = 1051
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==145:
                self.state = 1047
                self.match(Swift5Parser.COMMA)
                self.state = 1048
                self.generic_parameter()
                self.state = 1053
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Generic_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_name(self):
            return self.getTypedRuleContext(Swift5Parser.Type_nameContext,0)


        def COLON(self):
            return self.getToken(Swift5Parser.COLON, 0)

        def type_identifier(self):
            return self.getTypedRuleContext(Swift5Parser.Type_identifierContext,0)


        def protocol_composition_type(self):
            return self.getTypedRuleContext(Swift5Parser.Protocol_composition_typeContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_generic_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneric_parameter" ):
                listener.enterGeneric_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneric_parameter" ):
                listener.exitGeneric_parameter(self)




    def generic_parameter(self):

        localctx = Swift5Parser.Generic_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_generic_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1054
            self.type_name()
            self.state = 1060
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==146:
                self.state = 1055
                self.match(Swift5Parser.COLON)
                self.state = 1058
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
                if la_ == 1:
                    self.state = 1056
                    self.type_identifier()
                    pass

                elif la_ == 2:
                    self.state = 1057
                    self.protocol_composition_type()
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Generic_where_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(Swift5Parser.WHERE, 0)

        def requirement_list(self):
            return self.getTypedRuleContext(Swift5Parser.Requirement_listContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_generic_where_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneric_where_clause" ):
                listener.enterGeneric_where_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneric_where_clause" ):
                listener.exitGeneric_where_clause(self)




    def generic_where_clause(self):

        localctx = Swift5Parser.Generic_where_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_generic_where_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1062
            self.match(Swift5Parser.WHERE)
            self.state = 1063
            self.requirement_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Requirement_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requirement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.RequirementContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.RequirementContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.COMMA)
            else:
                return self.getToken(Swift5Parser.COMMA, i)

        def getRuleIndex(self):
            return Swift5Parser.RULE_requirement_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRequirement_list" ):
                listener.enterRequirement_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRequirement_list" ):
                listener.exitRequirement_list(self)




    def requirement_list(self):

        localctx = Swift5Parser.Requirement_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_requirement_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1065
            self.requirement()
            self.state = 1070
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,61,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1066
                    self.match(Swift5Parser.COMMA)
                    self.state = 1067
                    self.requirement() 
                self.state = 1072
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,61,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RequirementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conformance_requirement(self):
            return self.getTypedRuleContext(Swift5Parser.Conformance_requirementContext,0)


        def same_type_requirement(self):
            return self.getTypedRuleContext(Swift5Parser.Same_type_requirementContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_requirement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRequirement" ):
                listener.enterRequirement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRequirement" ):
                listener.exitRequirement(self)




    def requirement(self):

        localctx = Swift5Parser.RequirementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_requirement)
        try:
            self.state = 1075
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1073
                self.conformance_requirement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1074
                self.same_type_requirement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conformance_requirementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Type_identifierContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Type_identifierContext,i)


        def COLON(self):
            return self.getToken(Swift5Parser.COLON, 0)

        def protocol_composition_type(self):
            return self.getTypedRuleContext(Swift5Parser.Protocol_composition_typeContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_conformance_requirement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConformance_requirement" ):
                listener.enterConformance_requirement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConformance_requirement" ):
                listener.exitConformance_requirement(self)




    def conformance_requirement(self):

        localctx = Swift5Parser.Conformance_requirementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_conformance_requirement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1077
            self.type_identifier()
            self.state = 1078
            self.match(Swift5Parser.COLON)
            self.state = 1081
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                self.state = 1079
                self.type_identifier()
                pass

            elif la_ == 2:
                self.state = 1080
                self.protocol_composition_type()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Same_type_requirementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Type_identifierContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Type_identifierContext,i)


        def same_type_equals(self):
            return self.getTypedRuleContext(Swift5Parser.Same_type_equalsContext,0)


        def type_(self):
            return self.getTypedRuleContext(Swift5Parser.TypeContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_same_type_requirement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSame_type_requirement" ):
                listener.enterSame_type_requirement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSame_type_requirement" ):
                listener.exitSame_type_requirement(self)




    def same_type_requirement(self):

        localctx = Swift5Parser.Same_type_requirementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_same_type_requirement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1083
            self.type_identifier()
            self.state = 1084
            self.same_type_equals()
            self.state = 1087
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.state = 1085
                self.type_identifier()
                pass

            elif la_ == 2:
                self.state = 1086
                self.type_(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Generic_argument_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(Swift5Parser.LT, 0)

        def generic_argument_list(self):
            return self.getTypedRuleContext(Swift5Parser.Generic_argument_listContext,0)


        def GT(self):
            return self.getToken(Swift5Parser.GT, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_generic_argument_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneric_argument_clause" ):
                listener.enterGeneric_argument_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneric_argument_clause" ):
                listener.exitGeneric_argument_clause(self)




    def generic_argument_clause(self):

        localctx = Swift5Parser.Generic_argument_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_generic_argument_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1089
            self.match(Swift5Parser.LT)
            self.state = 1090
            self.generic_argument_list()
            self.state = 1091
            self.match(Swift5Parser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Generic_argument_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def generic_argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Generic_argumentContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Generic_argumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.COMMA)
            else:
                return self.getToken(Swift5Parser.COMMA, i)

        def getRuleIndex(self):
            return Swift5Parser.RULE_generic_argument_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneric_argument_list" ):
                listener.enterGeneric_argument_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneric_argument_list" ):
                listener.exitGeneric_argument_list(self)




    def generic_argument_list(self):

        localctx = Swift5Parser.Generic_argument_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_generic_argument_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1093
            self.generic_argument()
            self.state = 1098
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==145:
                self.state = 1094
                self.match(Swift5Parser.COMMA)
                self.state = 1095
                self.generic_argument()
                self.state = 1100
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Generic_argumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(Swift5Parser.TypeContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_generic_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneric_argument" ):
                listener.enterGeneric_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneric_argument" ):
                listener.exitGeneric_argument(self)




    def generic_argument(self):

        localctx = Swift5Parser.Generic_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_generic_argument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1101
            self.type_(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_declaration(self):
            return self.getTypedRuleContext(Swift5Parser.Import_declarationContext,0)


        def constant_declaration(self):
            return self.getTypedRuleContext(Swift5Parser.Constant_declarationContext,0)


        def variable_declaration(self):
            return self.getTypedRuleContext(Swift5Parser.Variable_declarationContext,0)


        def typealias_declaration(self):
            return self.getTypedRuleContext(Swift5Parser.Typealias_declarationContext,0)


        def function_declaration(self):
            return self.getTypedRuleContext(Swift5Parser.Function_declarationContext,0)


        def enum_declaration(self):
            return self.getTypedRuleContext(Swift5Parser.Enum_declarationContext,0)


        def struct_declaration(self):
            return self.getTypedRuleContext(Swift5Parser.Struct_declarationContext,0)


        def class_declaration(self):
            return self.getTypedRuleContext(Swift5Parser.Class_declarationContext,0)


        def protocol_declaration(self):
            return self.getTypedRuleContext(Swift5Parser.Protocol_declarationContext,0)


        def initializer_declaration(self):
            return self.getTypedRuleContext(Swift5Parser.Initializer_declarationContext,0)


        def deinitializer_declaration(self):
            return self.getTypedRuleContext(Swift5Parser.Deinitializer_declarationContext,0)


        def extension_declaration(self):
            return self.getTypedRuleContext(Swift5Parser.Extension_declarationContext,0)


        def subscript_declaration(self):
            return self.getTypedRuleContext(Swift5Parser.Subscript_declarationContext,0)


        def operator_declaration(self):
            return self.getTypedRuleContext(Swift5Parser.Operator_declarationContext,0)


        def precedence_group_declaration(self):
            return self.getTypedRuleContext(Swift5Parser.Precedence_group_declarationContext,0)


        def SEMI(self):
            return self.getToken(Swift5Parser.SEMI, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration" ):
                listener.enterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration" ):
                listener.exitDeclaration(self)




    def declaration(self):

        localctx = Swift5Parser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1118
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.state = 1103
                self.import_declaration()
                pass

            elif la_ == 2:
                self.state = 1104
                self.constant_declaration()
                pass

            elif la_ == 3:
                self.state = 1105
                self.variable_declaration()
                pass

            elif la_ == 4:
                self.state = 1106
                self.typealias_declaration()
                pass

            elif la_ == 5:
                self.state = 1107
                self.function_declaration()
                pass

            elif la_ == 6:
                self.state = 1108
                self.enum_declaration()
                pass

            elif la_ == 7:
                self.state = 1109
                self.struct_declaration()
                pass

            elif la_ == 8:
                self.state = 1110
                self.class_declaration()
                pass

            elif la_ == 9:
                self.state = 1111
                self.protocol_declaration()
                pass

            elif la_ == 10:
                self.state = 1112
                self.initializer_declaration()
                pass

            elif la_ == 11:
                self.state = 1113
                self.deinitializer_declaration()
                pass

            elif la_ == 12:
                self.state = 1114
                self.extension_declaration()
                pass

            elif la_ == 13:
                self.state = 1115
                self.subscript_declaration()
                pass

            elif la_ == 14:
                self.state = 1116
                self.operator_declaration()
                pass

            elif la_ == 15:
                self.state = 1117
                self.precedence_group_declaration()
                pass


            self.state = 1121
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
            if la_ == 1:
                self.state = 1120
                self.match(Swift5Parser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.DeclarationContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.DeclarationContext,i)


        def getRuleIndex(self):
            return Swift5Parser.RULE_declarations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarations" ):
                listener.enterDeclarations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarations" ):
                listener.exitDeclarations(self)




    def declarations(self):

        localctx = Swift5Parser.DeclarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_declarations)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1124 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1123
                self.declaration()
                self.state = 1126 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 725622768442875968) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 14847) != 0) or _la==153):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Top_level_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statements(self):
            return self.getTypedRuleContext(Swift5Parser.StatementsContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_top_level_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTop_level_declaration" ):
                listener.enterTop_level_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTop_level_declaration" ):
                listener.exitTop_level_declaration(self)




    def top_level_declaration(self):

        localctx = Swift5Parser.Top_level_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_top_level_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1129
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
            if la_ == 1:
                self.state = 1128
                self.statements()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Code_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LCURLY(self):
            return self.getToken(Swift5Parser.LCURLY, 0)

        def RCURLY(self):
            return self.getToken(Swift5Parser.RCURLY, 0)

        def statements(self):
            return self.getTypedRuleContext(Swift5Parser.StatementsContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_code_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCode_block" ):
                listener.enterCode_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCode_block" ):
                listener.exitCode_block(self)




    def code_block(self):

        localctx = Swift5Parser.Code_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_code_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1131
            self.match(Swift5Parser.LCURLY)
            self.state = 1133
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.state = 1132
                self.statements()


            self.state = 1135
            self.match(Swift5Parser.RCURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(Swift5Parser.IMPORT, 0)

        def import_path(self):
            return self.getTypedRuleContext(Swift5Parser.Import_pathContext,0)


        def attributes(self):
            return self.getTypedRuleContext(Swift5Parser.AttributesContext,0)


        def import_kind(self):
            return self.getTypedRuleContext(Swift5Parser.Import_kindContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_import_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_declaration" ):
                listener.enterImport_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_declaration" ):
                listener.exitImport_declaration(self)




    def import_declaration(self):

        localctx = Swift5Parser.Import_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_import_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1138
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==153:
                self.state = 1137
                self.attributes()


            self.state = 1140
            self.match(Swift5Parser.IMPORT)
            self.state = 1142
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
            if la_ == 1:
                self.state = 1141
                self.import_kind()


            self.state = 1144
            self.import_path()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_kindContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPEALIAS(self):
            return self.getToken(Swift5Parser.TYPEALIAS, 0)

        def STRUCT(self):
            return self.getToken(Swift5Parser.STRUCT, 0)

        def CLASS(self):
            return self.getToken(Swift5Parser.CLASS, 0)

        def ENUM(self):
            return self.getToken(Swift5Parser.ENUM, 0)

        def PROTOCOL(self):
            return self.getToken(Swift5Parser.PROTOCOL, 0)

        def LET(self):
            return self.getToken(Swift5Parser.LET, 0)

        def VAR(self):
            return self.getToken(Swift5Parser.VAR, 0)

        def FUNC(self):
            return self.getToken(Swift5Parser.FUNC, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_import_kind

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_kind" ):
                listener.enterImport_kind(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_kind" ):
                listener.exitImport_kind(self)




    def import_kind(self):

        localctx = Swift5Parser.Import_kindContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_import_kind)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1146
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 576460821962498112) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_pathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_path_identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Import_path_identifierContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Import_path_identifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.DOT)
            else:
                return self.getToken(Swift5Parser.DOT, i)

        def getRuleIndex(self):
            return Swift5Parser.RULE_import_path

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_path" ):
                listener.enterImport_path(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_path" ):
                listener.exitImport_path(self)




    def import_path(self):

        localctx = Swift5Parser.Import_pathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_import_path)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1148
            self.import_path_identifier()
            self.state = 1153
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,73,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1149
                    self.match(Swift5Parser.DOT)
                    self.state = 1150
                    self.import_path_identifier() 
                self.state = 1155
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,73,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_path_identifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Swift5Parser.IdentifierContext,0)


        def operator(self):
            return self.getTypedRuleContext(Swift5Parser.OperatorContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_import_path_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_path_identifier" ):
                listener.enterImport_path_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_path_identifier" ):
                listener.exitImport_path_identifier(self)




    def import_path_identifier(self):

        localctx = Swift5Parser.Import_path_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_import_path_identifier)
        try:
            self.state = 1158
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 5, 6, 8, 10, 11, 14, 17, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 41, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 85, 86, 87, 88, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 135, 136, 137, 165]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1156
                self.identifier()
                pass
            elif token in [138, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 168]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1157
                self.operator()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constant_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LET(self):
            return self.getToken(Swift5Parser.LET, 0)

        def pattern_initializer_list(self):
            return self.getTypedRuleContext(Swift5Parser.Pattern_initializer_listContext,0)


        def attributes(self):
            return self.getTypedRuleContext(Swift5Parser.AttributesContext,0)


        def declaration_modifiers(self):
            return self.getTypedRuleContext(Swift5Parser.Declaration_modifiersContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_constant_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant_declaration" ):
                listener.enterConstant_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant_declaration" ):
                listener.exitConstant_declaration(self)




    def constant_declaration(self):

        localctx = Swift5Parser.Constant_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_constant_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1161
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==153:
                self.state = 1160
                self.attributes()


            self.state = 1164
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144537400573427776) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 14847) != 0):
                self.state = 1163
                self.declaration_modifiers()


            self.state = 1166
            self.match(Swift5Parser.LET)
            self.state = 1167
            self.pattern_initializer_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pattern_initializer_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pattern_initializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Pattern_initializerContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Pattern_initializerContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.COMMA)
            else:
                return self.getToken(Swift5Parser.COMMA, i)

        def getRuleIndex(self):
            return Swift5Parser.RULE_pattern_initializer_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPattern_initializer_list" ):
                listener.enterPattern_initializer_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPattern_initializer_list" ):
                listener.exitPattern_initializer_list(self)




    def pattern_initializer_list(self):

        localctx = Swift5Parser.Pattern_initializer_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_pattern_initializer_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1169
            self.pattern_initializer()
            self.state = 1174
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,77,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1170
                    self.match(Swift5Parser.COMMA)
                    self.state = 1171
                    self.pattern_initializer() 
                self.state = 1176
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,77,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pattern_initializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pattern(self):
            return self.getTypedRuleContext(Swift5Parser.PatternContext,0)


        def initializer(self):
            return self.getTypedRuleContext(Swift5Parser.InitializerContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_pattern_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPattern_initializer" ):
                listener.enterPattern_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPattern_initializer" ):
                listener.exitPattern_initializer(self)




    def pattern_initializer(self):

        localctx = Swift5Parser.Pattern_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_pattern_initializer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1177
            self.pattern(0)
            self.state = 1179
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
            if la_ == 1:
                self.state = 1178
                self.initializer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUAL(self):
            return self.getToken(Swift5Parser.EQUAL, 0)

        def expression(self):
            return self.getTypedRuleContext(Swift5Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializer" ):
                listener.enterInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializer" ):
                listener.exitInitializer(self)




    def initializer(self):

        localctx = Swift5Parser.InitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_initializer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1181
            self.match(Swift5Parser.EQUAL)
            self.state = 1182
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variable_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_declaration_head(self):
            return self.getTypedRuleContext(Swift5Parser.Variable_declaration_headContext,0)


        def variable_name(self):
            return self.getTypedRuleContext(Swift5Parser.Variable_nameContext,0)


        def pattern_initializer_list(self):
            return self.getTypedRuleContext(Swift5Parser.Pattern_initializer_listContext,0)


        def initializer(self):
            return self.getTypedRuleContext(Swift5Parser.InitializerContext,0)


        def willSet_didSet_block(self):
            return self.getTypedRuleContext(Swift5Parser.WillSet_didSet_blockContext,0)


        def type_annotation(self):
            return self.getTypedRuleContext(Swift5Parser.Type_annotationContext,0)


        def getter_setter_block(self):
            return self.getTypedRuleContext(Swift5Parser.Getter_setter_blockContext,0)


        def getter_setter_keyword_block(self):
            return self.getTypedRuleContext(Swift5Parser.Getter_setter_keyword_blockContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_variable_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_declaration" ):
                listener.enterVariable_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_declaration" ):
                listener.exitVariable_declaration(self)




    def variable_declaration(self):

        localctx = Swift5Parser.Variable_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_variable_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1184
            self.variable_declaration_head()
            self.state = 1201
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.state = 1185
                self.variable_name()
                self.state = 1198
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [156]:
                    self.state = 1186
                    self.initializer()
                    self.state = 1187
                    self.willSet_didSet_block()
                    pass
                elif token in [146]:
                    self.state = 1189
                    self.type_annotation()
                    self.state = 1196
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
                    if la_ == 1:
                        self.state = 1191
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==156:
                            self.state = 1190
                            self.initializer()


                        self.state = 1193
                        self.willSet_didSet_block()
                        pass

                    elif la_ == 2:
                        self.state = 1194
                        self.getter_setter_block()
                        pass

                    elif la_ == 3:
                        self.state = 1195
                        self.getter_setter_keyword_block()
                        pass


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.state = 1200
                self.pattern_initializer_list()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variable_declaration_headContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR(self):
            return self.getToken(Swift5Parser.VAR, 0)

        def attributes(self):
            return self.getTypedRuleContext(Swift5Parser.AttributesContext,0)


        def declaration_modifiers(self):
            return self.getTypedRuleContext(Swift5Parser.Declaration_modifiersContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_variable_declaration_head

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_declaration_head" ):
                listener.enterVariable_declaration_head(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_declaration_head" ):
                listener.exitVariable_declaration_head(self)




    def variable_declaration_head(self):

        localctx = Swift5Parser.Variable_declaration_headContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_variable_declaration_head)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1204
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==153:
                self.state = 1203
                self.attributes()


            self.state = 1207
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144537400573427776) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 14847) != 0):
                self.state = 1206
                self.declaration_modifiers()


            self.state = 1209
            self.match(Swift5Parser.VAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variable_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Swift5Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_variable_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_name" ):
                listener.enterVariable_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_name" ):
                listener.exitVariable_name(self)




    def variable_name(self):

        localctx = Swift5Parser.Variable_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_variable_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1211
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Getter_setter_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LCURLY(self):
            return self.getToken(Swift5Parser.LCURLY, 0)

        def RCURLY(self):
            return self.getToken(Swift5Parser.RCURLY, 0)

        def getter_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Getter_clauseContext,0)


        def setter_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Setter_clauseContext,0)


        def code_block(self):
            return self.getTypedRuleContext(Swift5Parser.Code_blockContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_getter_setter_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGetter_setter_block" ):
                listener.enterGetter_setter_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGetter_setter_block" ):
                listener.exitGetter_setter_block(self)




    def getter_setter_block(self):

        localctx = Swift5Parser.Getter_setter_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_getter_setter_block)
        self._la = 0 # Token type
        try:
            self.state = 1226
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1213
                self.match(Swift5Parser.LCURLY)
                self.state = 1221
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
                if la_ == 1:
                    self.state = 1214
                    self.getter_clause()
                    self.state = 1216
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 31)) & ~0x3f) == 0 and ((1 << (_la - 31)) & 211106232532993) != 0) or _la==153:
                        self.state = 1215
                        self.setter_clause()


                    pass

                elif la_ == 2:
                    self.state = 1218
                    self.setter_clause()
                    self.state = 1219
                    self.getter_clause()
                    pass


                self.state = 1223
                self.match(Swift5Parser.RCURLY)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1225
                self.code_block()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Getter_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GET(self):
            return self.getToken(Swift5Parser.GET, 0)

        def attributes(self):
            return self.getTypedRuleContext(Swift5Parser.AttributesContext,0)


        def mutation_modifier(self):
            return self.getTypedRuleContext(Swift5Parser.Mutation_modifierContext,0)


        def code_block(self):
            return self.getTypedRuleContext(Swift5Parser.Code_blockContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_getter_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGetter_clause" ):
                listener.enterGetter_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGetter_clause" ):
                listener.exitGetter_clause(self)




    def getter_clause(self):

        localctx = Swift5Parser.Getter_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_getter_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1229
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==153:
                self.state = 1228
                self.attributes()


            self.state = 1232
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==77 or _la==78:
                self.state = 1231
                self.mutation_modifier()


            self.state = 1234
            self.match(Swift5Parser.GET)
            self.state = 1236
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==139:
                self.state = 1235
                self.code_block()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Setter_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(Swift5Parser.SET, 0)

        def attributes(self):
            return self.getTypedRuleContext(Swift5Parser.AttributesContext,0)


        def mutation_modifier(self):
            return self.getTypedRuleContext(Swift5Parser.Mutation_modifierContext,0)


        def setter_name(self):
            return self.getTypedRuleContext(Swift5Parser.Setter_nameContext,0)


        def code_block(self):
            return self.getTypedRuleContext(Swift5Parser.Code_blockContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_setter_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetter_clause" ):
                listener.enterSetter_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetter_clause" ):
                listener.exitSetter_clause(self)




    def setter_clause(self):

        localctx = Swift5Parser.Setter_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_setter_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1239
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==153:
                self.state = 1238
                self.attributes()


            self.state = 1242
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==77 or _la==78:
                self.state = 1241
                self.mutation_modifier()


            self.state = 1244
            self.match(Swift5Parser.SET)
            self.state = 1246
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==140:
                self.state = 1245
                self.setter_name()


            self.state = 1249
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==139:
                self.state = 1248
                self.code_block()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Setter_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(Swift5Parser.LPAREN, 0)

        def identifier(self):
            return self.getTypedRuleContext(Swift5Parser.IdentifierContext,0)


        def RPAREN(self):
            return self.getToken(Swift5Parser.RPAREN, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_setter_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetter_name" ):
                listener.enterSetter_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetter_name" ):
                listener.exitSetter_name(self)




    def setter_name(self):

        localctx = Swift5Parser.Setter_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_setter_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1251
            self.match(Swift5Parser.LPAREN)
            self.state = 1252
            self.identifier()
            self.state = 1253
            self.match(Swift5Parser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Getter_setter_keyword_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LCURLY(self):
            return self.getToken(Swift5Parser.LCURLY, 0)

        def RCURLY(self):
            return self.getToken(Swift5Parser.RCURLY, 0)

        def getter_keyword_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Getter_keyword_clauseContext,0)


        def setter_keyword_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Setter_keyword_clauseContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_getter_setter_keyword_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGetter_setter_keyword_block" ):
                listener.enterGetter_setter_keyword_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGetter_setter_keyword_block" ):
                listener.exitGetter_setter_keyword_block(self)




    def getter_setter_keyword_block(self):

        localctx = Swift5Parser.Getter_setter_keyword_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_getter_setter_keyword_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1255
            self.match(Swift5Parser.LCURLY)
            self.state = 1263
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                self.state = 1256
                self.getter_keyword_clause()
                self.state = 1258
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 31)) & ~0x3f) == 0 and ((1 << (_la - 31)) & 211106232532993) != 0) or _la==153:
                    self.state = 1257
                    self.setter_keyword_clause()


                pass

            elif la_ == 2:
                self.state = 1260
                self.setter_keyword_clause()
                self.state = 1261
                self.getter_keyword_clause()
                pass


            self.state = 1265
            self.match(Swift5Parser.RCURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Getter_keyword_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GET(self):
            return self.getToken(Swift5Parser.GET, 0)

        def attributes(self):
            return self.getTypedRuleContext(Swift5Parser.AttributesContext,0)


        def mutation_modifier(self):
            return self.getTypedRuleContext(Swift5Parser.Mutation_modifierContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_getter_keyword_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGetter_keyword_clause" ):
                listener.enterGetter_keyword_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGetter_keyword_clause" ):
                listener.exitGetter_keyword_clause(self)




    def getter_keyword_clause(self):

        localctx = Swift5Parser.Getter_keyword_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_getter_keyword_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1268
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==153:
                self.state = 1267
                self.attributes()


            self.state = 1271
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==77 or _la==78:
                self.state = 1270
                self.mutation_modifier()


            self.state = 1273
            self.match(Swift5Parser.GET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Setter_keyword_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(Swift5Parser.SET, 0)

        def attributes(self):
            return self.getTypedRuleContext(Swift5Parser.AttributesContext,0)


        def mutation_modifier(self):
            return self.getTypedRuleContext(Swift5Parser.Mutation_modifierContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_setter_keyword_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetter_keyword_clause" ):
                listener.enterSetter_keyword_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetter_keyword_clause" ):
                listener.exitSetter_keyword_clause(self)




    def setter_keyword_clause(self):

        localctx = Swift5Parser.Setter_keyword_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_setter_keyword_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1276
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==153:
                self.state = 1275
                self.attributes()


            self.state = 1279
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==77 or _la==78:
                self.state = 1278
                self.mutation_modifier()


            self.state = 1281
            self.match(Swift5Parser.SET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WillSet_didSet_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LCURLY(self):
            return self.getToken(Swift5Parser.LCURLY, 0)

        def RCURLY(self):
            return self.getToken(Swift5Parser.RCURLY, 0)

        def willSet_clause(self):
            return self.getTypedRuleContext(Swift5Parser.WillSet_clauseContext,0)


        def didSet_clause(self):
            return self.getTypedRuleContext(Swift5Parser.DidSet_clauseContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_willSet_didSet_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWillSet_didSet_block" ):
                listener.enterWillSet_didSet_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWillSet_didSet_block" ):
                listener.exitWillSet_didSet_block(self)




    def willSet_didSet_block(self):

        localctx = Swift5Parser.WillSet_didSet_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_willSet_didSet_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1283
            self.match(Swift5Parser.LCURLY)
            self.state = 1292
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                self.state = 1284
                self.willSet_clause()
                self.state = 1286
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==33 or _la==153:
                    self.state = 1285
                    self.didSet_clause()


                pass

            elif la_ == 2:
                self.state = 1288
                self.didSet_clause()
                self.state = 1290
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==32 or _la==153:
                    self.state = 1289
                    self.willSet_clause()


                pass


            self.state = 1294
            self.match(Swift5Parser.RCURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WillSet_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WILL_SET(self):
            return self.getToken(Swift5Parser.WILL_SET, 0)

        def code_block(self):
            return self.getTypedRuleContext(Swift5Parser.Code_blockContext,0)


        def attributes(self):
            return self.getTypedRuleContext(Swift5Parser.AttributesContext,0)


        def setter_name(self):
            return self.getTypedRuleContext(Swift5Parser.Setter_nameContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_willSet_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWillSet_clause" ):
                listener.enterWillSet_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWillSet_clause" ):
                listener.exitWillSet_clause(self)




    def willSet_clause(self):

        localctx = Swift5Parser.WillSet_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_willSet_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1297
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==153:
                self.state = 1296
                self.attributes()


            self.state = 1299
            self.match(Swift5Parser.WILL_SET)
            self.state = 1301
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==140:
                self.state = 1300
                self.setter_name()


            self.state = 1303
            self.code_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DidSet_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DID_SET(self):
            return self.getToken(Swift5Parser.DID_SET, 0)

        def code_block(self):
            return self.getTypedRuleContext(Swift5Parser.Code_blockContext,0)


        def attributes(self):
            return self.getTypedRuleContext(Swift5Parser.AttributesContext,0)


        def setter_name(self):
            return self.getTypedRuleContext(Swift5Parser.Setter_nameContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_didSet_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDidSet_clause" ):
                listener.enterDidSet_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDidSet_clause" ):
                listener.exitDidSet_clause(self)




    def didSet_clause(self):

        localctx = Swift5Parser.DidSet_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_didSet_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1306
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==153:
                self.state = 1305
                self.attributes()


            self.state = 1308
            self.match(Swift5Parser.DID_SET)
            self.state = 1310
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==140:
                self.state = 1309
                self.setter_name()


            self.state = 1312
            self.code_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Typealias_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPEALIAS(self):
            return self.getToken(Swift5Parser.TYPEALIAS, 0)

        def typealias_name(self):
            return self.getTypedRuleContext(Swift5Parser.Typealias_nameContext,0)


        def typealias_assignment(self):
            return self.getTypedRuleContext(Swift5Parser.Typealias_assignmentContext,0)


        def attributes(self):
            return self.getTypedRuleContext(Swift5Parser.AttributesContext,0)


        def access_level_modifier(self):
            return self.getTypedRuleContext(Swift5Parser.Access_level_modifierContext,0)


        def generic_parameter_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Generic_parameter_clauseContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_typealias_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypealias_declaration" ):
                listener.enterTypealias_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypealias_declaration" ):
                listener.exitTypealias_declaration(self)




    def typealias_declaration(self):

        localctx = Swift5Parser.Typealias_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_typealias_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1315
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==153:
                self.state = 1314
                self.attributes()


            self.state = 1318
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & 576460752303423517) != 0):
                self.state = 1317
                self.access_level_modifier()


            self.state = 1320
            self.match(Swift5Parser.TYPEALIAS)
            self.state = 1321
            self.typealias_name()
            self.state = 1323
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==148:
                self.state = 1322
                self.generic_parameter_clause()


            self.state = 1325
            self.typealias_assignment()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Typealias_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Swift5Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_typealias_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypealias_name" ):
                listener.enterTypealias_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypealias_name" ):
                listener.exitTypealias_name(self)




    def typealias_name(self):

        localctx = Swift5Parser.Typealias_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_typealias_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1327
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Typealias_assignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUAL(self):
            return self.getToken(Swift5Parser.EQUAL, 0)

        def type_(self):
            return self.getTypedRuleContext(Swift5Parser.TypeContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_typealias_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypealias_assignment" ):
                listener.enterTypealias_assignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypealias_assignment" ):
                listener.exitTypealias_assignment(self)




    def typealias_assignment(self):

        localctx = Swift5Parser.Typealias_assignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_typealias_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1329
            self.match(Swift5Parser.EQUAL)
            self.state = 1330
            self.type_(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_head(self):
            return self.getTypedRuleContext(Swift5Parser.Function_headContext,0)


        def function_name(self):
            return self.getTypedRuleContext(Swift5Parser.Function_nameContext,0)


        def function_signature(self):
            return self.getTypedRuleContext(Swift5Parser.Function_signatureContext,0)


        def generic_parameter_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Generic_parameter_clauseContext,0)


        def generic_where_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Generic_where_clauseContext,0)


        def function_body(self):
            return self.getTypedRuleContext(Swift5Parser.Function_bodyContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_function_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_declaration" ):
                listener.enterFunction_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_declaration" ):
                listener.exitFunction_declaration(self)




    def function_declaration(self):

        localctx = Swift5Parser.Function_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_function_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1332
            self.function_head()
            self.state = 1333
            self.function_name()
            self.state = 1335
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==148:
                self.state = 1334
                self.generic_parameter_clause()


            self.state = 1337
            self.function_signature()
            self.state = 1339
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
            if la_ == 1:
                self.state = 1338
                self.generic_where_clause()


            self.state = 1342
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
            if la_ == 1:
                self.state = 1341
                self.function_body()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_headContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNC(self):
            return self.getToken(Swift5Parser.FUNC, 0)

        def attributes(self):
            return self.getTypedRuleContext(Swift5Parser.AttributesContext,0)


        def declaration_modifiers(self):
            return self.getTypedRuleContext(Swift5Parser.Declaration_modifiersContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_function_head

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_head" ):
                listener.enterFunction_head(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_head" ):
                listener.exitFunction_head(self)




    def function_head(self):

        localctx = Swift5Parser.Function_headContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_function_head)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1345
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==153:
                self.state = 1344
                self.attributes()


            self.state = 1348
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144537400573427776) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 14847) != 0):
                self.state = 1347
                self.declaration_modifiers()


            self.state = 1350
            self.match(Swift5Parser.FUNC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Swift5Parser.IdentifierContext,0)


        def operator(self):
            return self.getTypedRuleContext(Swift5Parser.OperatorContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_function_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_name" ):
                listener.enterFunction_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_name" ):
                listener.exitFunction_name(self)




    def function_name(self):

        localctx = Swift5Parser.Function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_function_name)
        try:
            self.state = 1354
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 5, 6, 8, 10, 11, 14, 17, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 41, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 85, 86, 87, 88, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 135, 136, 137, 165]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1352
                self.identifier()
                pass
            elif token in [138, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 168]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1353
                self.operator()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_signatureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Parameter_clauseContext,0)


        def RETHROWS(self):
            return self.getToken(Swift5Parser.RETHROWS, 0)

        def function_result(self):
            return self.getTypedRuleContext(Swift5Parser.Function_resultContext,0)


        def THROWS(self):
            return self.getToken(Swift5Parser.THROWS, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_function_signature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_signature" ):
                listener.enterFunction_signature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_signature" ):
                listener.exitFunction_signature(self)




    def function_signature(self):

        localctx = Swift5Parser.Function_signatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_function_signature)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1356
            self.parameter_clause()
            self.state = 1361
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
            if la_ == 1:
                self.state = 1358
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
                if la_ == 1:
                    self.state = 1357
                    self.match(Swift5Parser.THROWS)


                pass

            elif la_ == 2:
                self.state = 1360
                self.match(Swift5Parser.RETHROWS)
                pass


            self.state = 1364
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                self.state = 1363
                self.function_result()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_resultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrow_operator(self):
            return self.getTypedRuleContext(Swift5Parser.Arrow_operatorContext,0)


        def type_(self):
            return self.getTypedRuleContext(Swift5Parser.TypeContext,0)


        def attributes(self):
            return self.getTypedRuleContext(Swift5Parser.AttributesContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_function_result

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_result" ):
                listener.enterFunction_result(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_result" ):
                listener.exitFunction_result(self)




    def function_result(self):

        localctx = Swift5Parser.Function_resultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_function_result)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1366
            self.arrow_operator()
            self.state = 1368
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
            if la_ == 1:
                self.state = 1367
                self.attributes()


            self.state = 1370
            self.type_(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def code_block(self):
            return self.getTypedRuleContext(Swift5Parser.Code_blockContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_function_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_body" ):
                listener.enterFunction_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_body" ):
                listener.exitFunction_body(self)




    def function_body(self):

        localctx = Swift5Parser.Function_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_function_body)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1372
            self.code_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parameter_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(Swift5Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(Swift5Parser.RPAREN, 0)

        def parameter_list(self):
            return self.getTypedRuleContext(Swift5Parser.Parameter_listContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_parameter_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter_clause" ):
                listener.enterParameter_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter_clause" ):
                listener.exitParameter_clause(self)




    def parameter_clause(self):

        localctx = Swift5Parser.Parameter_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_parameter_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1374
            self.match(Swift5Parser.LPAREN)
            self.state = 1376
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -576599273992204954) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 3940649437003519) != 0) or ((((_la - 135)) & ~0x3f) == 0 and ((1 << (_la - 135)) & 1074003975) != 0):
                self.state = 1375
                self.parameter_list()


            self.state = 1378
            self.match(Swift5Parser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parameter_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.ParameterContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.ParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.COMMA)
            else:
                return self.getToken(Swift5Parser.COMMA, i)

        def getRuleIndex(self):
            return Swift5Parser.RULE_parameter_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter_list" ):
                listener.enterParameter_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter_list" ):
                listener.exitParameter_list(self)




    def parameter_list(self):

        localctx = Swift5Parser.Parameter_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_parameter_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1380
            self.parameter()
            self.state = 1385
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==145:
                self.state = 1381
                self.match(Swift5Parser.COMMA)
                self.state = 1382
                self.parameter()
                self.state = 1387
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def local_parameter_name(self):
            return self.getTypedRuleContext(Swift5Parser.Local_parameter_nameContext,0)


        def type_annotation(self):
            return self.getTypedRuleContext(Swift5Parser.Type_annotationContext,0)


        def range_operator(self):
            return self.getTypedRuleContext(Swift5Parser.Range_operatorContext,0)


        def attributes(self):
            return self.getTypedRuleContext(Swift5Parser.AttributesContext,0)


        def external_parameter_name(self):
            return self.getTypedRuleContext(Swift5Parser.External_parameter_nameContext,0)


        def default_argument_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Default_argument_clauseContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter" ):
                listener.enterParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter" ):
                listener.exitParameter(self)




    def parameter(self):

        localctx = Swift5Parser.ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1389
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==153:
                self.state = 1388
                self.attributes()


            self.state = 1392
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
            if la_ == 1:
                self.state = 1391
                self.external_parameter_name()


            self.state = 1394
            self.local_parameter_name()
            self.state = 1395
            self.type_annotation()
            self.state = 1400
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                self.state = 1397
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==156:
                    self.state = 1396
                    self.default_argument_clause()


                pass

            elif la_ == 2:
                self.state = 1399
                self.range_operator()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class External_parameter_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Swift5Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_external_parameter_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternal_parameter_name" ):
                listener.enterExternal_parameter_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternal_parameter_name" ):
                listener.exitExternal_parameter_name(self)




    def external_parameter_name(self):

        localctx = Swift5Parser.External_parameter_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_external_parameter_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1402
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_parameter_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Swift5Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_local_parameter_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_parameter_name" ):
                listener.enterLocal_parameter_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_parameter_name" ):
                listener.exitLocal_parameter_name(self)




    def local_parameter_name(self):

        localctx = Swift5Parser.Local_parameter_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_local_parameter_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1404
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Default_argument_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUAL(self):
            return self.getToken(Swift5Parser.EQUAL, 0)

        def expression(self):
            return self.getTypedRuleContext(Swift5Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_default_argument_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_argument_clause" ):
                listener.enterDefault_argument_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_argument_clause" ):
                listener.exitDefault_argument_clause(self)




    def default_argument_clause(self):

        localctx = Swift5Parser.Default_argument_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_default_argument_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1406
            self.match(Swift5Parser.EQUAL)
            self.state = 1407
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Enum_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def union_style_enum(self):
            return self.getTypedRuleContext(Swift5Parser.Union_style_enumContext,0)


        def raw_value_style_enum(self):
            return self.getTypedRuleContext(Swift5Parser.Raw_value_style_enumContext,0)


        def attributes(self):
            return self.getTypedRuleContext(Swift5Parser.AttributesContext,0)


        def access_level_modifier(self):
            return self.getTypedRuleContext(Swift5Parser.Access_level_modifierContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_enum_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_declaration" ):
                listener.enterEnum_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_declaration" ):
                listener.exitEnum_declaration(self)




    def enum_declaration(self):

        localctx = Swift5Parser.Enum_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_enum_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1410
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==153:
                self.state = 1409
                self.attributes()


            self.state = 1413
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & 576460752303423517) != 0):
                self.state = 1412
                self.access_level_modifier()


            self.state = 1417
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
            if la_ == 1:
                self.state = 1415
                self.union_style_enum()
                pass

            elif la_ == 2:
                self.state = 1416
                self.raw_value_style_enum()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Union_style_enumContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENUM(self):
            return self.getToken(Swift5Parser.ENUM, 0)

        def enum_name(self):
            return self.getTypedRuleContext(Swift5Parser.Enum_nameContext,0)


        def LCURLY(self):
            return self.getToken(Swift5Parser.LCURLY, 0)

        def RCURLY(self):
            return self.getToken(Swift5Parser.RCURLY, 0)

        def INDIRECT(self):
            return self.getToken(Swift5Parser.INDIRECT, 0)

        def generic_parameter_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Generic_parameter_clauseContext,0)


        def type_inheritance_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Type_inheritance_clauseContext,0)


        def generic_where_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Generic_where_clauseContext,0)


        def union_style_enum_members(self):
            return self.getTypedRuleContext(Swift5Parser.Union_style_enum_membersContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_union_style_enum

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnion_style_enum" ):
                listener.enterUnion_style_enum(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnion_style_enum" ):
                listener.exitUnion_style_enum(self)




    def union_style_enum(self):

        localctx = Swift5Parser.Union_style_enumContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_union_style_enum)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1420
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==41:
                self.state = 1419
                self.match(Swift5Parser.INDIRECT)


            self.state = 1422
            self.match(Swift5Parser.ENUM)
            self.state = 1423
            self.enum_name()
            self.state = 1425
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==148:
                self.state = 1424
                self.generic_parameter_clause()


            self.state = 1428
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==146:
                self.state = 1427
                self.type_inheritance_clause()


            self.state = 1431
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==25:
                self.state = 1430
                self.generic_where_clause()


            self.state = 1433
            self.match(Swift5Parser.LCURLY)
            self.state = 1435
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 725622768442875984) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 12525636463639039) != 0) or _la==153:
                self.state = 1434
                self.union_style_enum_members()


            self.state = 1437
            self.match(Swift5Parser.RCURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Union_style_enum_membersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def union_style_enum_member(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Union_style_enum_memberContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Union_style_enum_memberContext,i)


        def getRuleIndex(self):
            return Swift5Parser.RULE_union_style_enum_members

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnion_style_enum_members" ):
                listener.enterUnion_style_enum_members(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnion_style_enum_members" ):
                listener.exitUnion_style_enum_members(self)




    def union_style_enum_members(self):

        localctx = Swift5Parser.Union_style_enum_membersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_union_style_enum_members)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1440 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1439
                self.union_style_enum_member()
                self.state = 1442 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 725622768442875984) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 12525636463639039) != 0) or _la==153):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Union_style_enum_memberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self):
            return self.getTypedRuleContext(Swift5Parser.DeclarationContext,0)


        def union_style_enum_case_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Union_style_enum_case_clauseContext,0)


        def compiler_control_statement(self):
            return self.getTypedRuleContext(Swift5Parser.Compiler_control_statementContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_union_style_enum_member

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnion_style_enum_member" ):
                listener.enterUnion_style_enum_member(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnion_style_enum_member" ):
                listener.exitUnion_style_enum_member(self)




    def union_style_enum_member(self):

        localctx = Swift5Parser.Union_style_enum_memberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_union_style_enum_member)
        try:
            self.state = 1447
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1444
                self.declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1445
                self.union_style_enum_case_clause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1446
                self.compiler_control_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Union_style_enum_case_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(Swift5Parser.CASE, 0)

        def union_style_enum_case_list(self):
            return self.getTypedRuleContext(Swift5Parser.Union_style_enum_case_listContext,0)


        def attributes(self):
            return self.getTypedRuleContext(Swift5Parser.AttributesContext,0)


        def INDIRECT(self):
            return self.getToken(Swift5Parser.INDIRECT, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_union_style_enum_case_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnion_style_enum_case_clause" ):
                listener.enterUnion_style_enum_case_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnion_style_enum_case_clause" ):
                listener.exitUnion_style_enum_case_clause(self)




    def union_style_enum_case_clause(self):

        localctx = Swift5Parser.Union_style_enum_case_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_union_style_enum_case_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1450
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==153:
                self.state = 1449
                self.attributes()


            self.state = 1453
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==41:
                self.state = 1452
                self.match(Swift5Parser.INDIRECT)


            self.state = 1455
            self.match(Swift5Parser.CASE)
            self.state = 1456
            self.union_style_enum_case_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Union_style_enum_case_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def union_style_enum_case(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Union_style_enum_caseContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Union_style_enum_caseContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.COMMA)
            else:
                return self.getToken(Swift5Parser.COMMA, i)

        def getRuleIndex(self):
            return Swift5Parser.RULE_union_style_enum_case_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnion_style_enum_case_list" ):
                listener.enterUnion_style_enum_case_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnion_style_enum_case_list" ):
                listener.exitUnion_style_enum_case_list(self)




    def union_style_enum_case_list(self):

        localctx = Swift5Parser.Union_style_enum_case_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_union_style_enum_case_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1458
            self.union_style_enum_case()
            self.state = 1463
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==145:
                self.state = 1459
                self.match(Swift5Parser.COMMA)
                self.state = 1460
                self.union_style_enum_case()
                self.state = 1465
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Union_style_enum_caseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def opaque_type(self):
            return self.getTypedRuleContext(Swift5Parser.Opaque_typeContext,0)


        def enum_case_name(self):
            return self.getTypedRuleContext(Swift5Parser.Enum_case_nameContext,0)


        def tuple_type(self):
            return self.getTypedRuleContext(Swift5Parser.Tuple_typeContext,0)


        def LPAREN(self):
            return self.getToken(Swift5Parser.LPAREN, 0)

        def type_(self):
            return self.getTypedRuleContext(Swift5Parser.TypeContext,0)


        def RPAREN(self):
            return self.getToken(Swift5Parser.RPAREN, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_union_style_enum_case

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnion_style_enum_case" ):
                listener.enterUnion_style_enum_case(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnion_style_enum_case" ):
                listener.exitUnion_style_enum_case(self)




    def union_style_enum_case(self):

        localctx = Swift5Parser.Union_style_enum_caseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_union_style_enum_case)
        try:
            self.state = 1475
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1466
                self.opaque_type()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1467
                self.enum_case_name()
                self.state = 1473
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
                if la_ == 1:
                    self.state = 1468
                    self.tuple_type()

                elif la_ == 2:
                    self.state = 1469
                    self.match(Swift5Parser.LPAREN)
                    self.state = 1470
                    self.type_(0)
                    self.state = 1471
                    self.match(Swift5Parser.RPAREN)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Enum_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Swift5Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_enum_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_name" ):
                listener.enterEnum_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_name" ):
                listener.exitEnum_name(self)




    def enum_name(self):

        localctx = Swift5Parser.Enum_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_enum_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1477
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Enum_case_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Swift5Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_enum_case_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_case_name" ):
                listener.enterEnum_case_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_case_name" ):
                listener.exitEnum_case_name(self)




    def enum_case_name(self):

        localctx = Swift5Parser.Enum_case_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_enum_case_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1479
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Raw_value_style_enumContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENUM(self):
            return self.getToken(Swift5Parser.ENUM, 0)

        def enum_name(self):
            return self.getTypedRuleContext(Swift5Parser.Enum_nameContext,0)


        def type_inheritance_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Type_inheritance_clauseContext,0)


        def LCURLY(self):
            return self.getToken(Swift5Parser.LCURLY, 0)

        def raw_value_style_enum_members(self):
            return self.getTypedRuleContext(Swift5Parser.Raw_value_style_enum_membersContext,0)


        def RCURLY(self):
            return self.getToken(Swift5Parser.RCURLY, 0)

        def generic_parameter_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Generic_parameter_clauseContext,0)


        def generic_where_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Generic_where_clauseContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_raw_value_style_enum

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaw_value_style_enum" ):
                listener.enterRaw_value_style_enum(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaw_value_style_enum" ):
                listener.exitRaw_value_style_enum(self)




    def raw_value_style_enum(self):

        localctx = Swift5Parser.Raw_value_style_enumContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_raw_value_style_enum)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1481
            self.match(Swift5Parser.ENUM)
            self.state = 1482
            self.enum_name()
            self.state = 1484
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==148:
                self.state = 1483
                self.generic_parameter_clause()


            self.state = 1486
            self.type_inheritance_clause()
            self.state = 1488
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==25:
                self.state = 1487
                self.generic_where_clause()


            self.state = 1490
            self.match(Swift5Parser.LCURLY)
            self.state = 1491
            self.raw_value_style_enum_members()
            self.state = 1492
            self.match(Swift5Parser.RCURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Raw_value_style_enum_membersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def raw_value_style_enum_member(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Raw_value_style_enum_memberContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Raw_value_style_enum_memberContext,i)


        def getRuleIndex(self):
            return Swift5Parser.RULE_raw_value_style_enum_members

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaw_value_style_enum_members" ):
                listener.enterRaw_value_style_enum_members(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaw_value_style_enum_members" ):
                listener.exitRaw_value_style_enum_members(self)




    def raw_value_style_enum_members(self):

        localctx = Swift5Parser.Raw_value_style_enum_membersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_raw_value_style_enum_members)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1495 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1494
                self.raw_value_style_enum_member()
                self.state = 1497 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 725622768442875984) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 12525636463639039) != 0) or _la==153):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Raw_value_style_enum_memberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self):
            return self.getTypedRuleContext(Swift5Parser.DeclarationContext,0)


        def raw_value_style_enum_case_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Raw_value_style_enum_case_clauseContext,0)


        def compiler_control_statement(self):
            return self.getTypedRuleContext(Swift5Parser.Compiler_control_statementContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_raw_value_style_enum_member

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaw_value_style_enum_member" ):
                listener.enterRaw_value_style_enum_member(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaw_value_style_enum_member" ):
                listener.exitRaw_value_style_enum_member(self)




    def raw_value_style_enum_member(self):

        localctx = Swift5Parser.Raw_value_style_enum_memberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_raw_value_style_enum_member)
        try:
            self.state = 1502
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1499
                self.declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1500
                self.raw_value_style_enum_case_clause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1501
                self.compiler_control_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Raw_value_style_enum_case_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(Swift5Parser.CASE, 0)

        def raw_value_style_enum_case_list(self):
            return self.getTypedRuleContext(Swift5Parser.Raw_value_style_enum_case_listContext,0)


        def attributes(self):
            return self.getTypedRuleContext(Swift5Parser.AttributesContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_raw_value_style_enum_case_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaw_value_style_enum_case_clause" ):
                listener.enterRaw_value_style_enum_case_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaw_value_style_enum_case_clause" ):
                listener.exitRaw_value_style_enum_case_clause(self)




    def raw_value_style_enum_case_clause(self):

        localctx = Swift5Parser.Raw_value_style_enum_case_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_raw_value_style_enum_case_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1505
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==153:
                self.state = 1504
                self.attributes()


            self.state = 1507
            self.match(Swift5Parser.CASE)
            self.state = 1508
            self.raw_value_style_enum_case_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Raw_value_style_enum_case_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def raw_value_style_enum_case(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Raw_value_style_enum_caseContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Raw_value_style_enum_caseContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.COMMA)
            else:
                return self.getToken(Swift5Parser.COMMA, i)

        def getRuleIndex(self):
            return Swift5Parser.RULE_raw_value_style_enum_case_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaw_value_style_enum_case_list" ):
                listener.enterRaw_value_style_enum_case_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaw_value_style_enum_case_list" ):
                listener.exitRaw_value_style_enum_case_list(self)




    def raw_value_style_enum_case_list(self):

        localctx = Swift5Parser.Raw_value_style_enum_case_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_raw_value_style_enum_case_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1510
            self.raw_value_style_enum_case()
            self.state = 1515
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==145:
                self.state = 1511
                self.match(Swift5Parser.COMMA)
                self.state = 1512
                self.raw_value_style_enum_case()
                self.state = 1517
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Raw_value_style_enum_caseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enum_case_name(self):
            return self.getTypedRuleContext(Swift5Parser.Enum_case_nameContext,0)


        def raw_value_assignment(self):
            return self.getTypedRuleContext(Swift5Parser.Raw_value_assignmentContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_raw_value_style_enum_case

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaw_value_style_enum_case" ):
                listener.enterRaw_value_style_enum_case(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaw_value_style_enum_case" ):
                listener.exitRaw_value_style_enum_case(self)




    def raw_value_style_enum_case(self):

        localctx = Swift5Parser.Raw_value_style_enum_caseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_raw_value_style_enum_case)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1518
            self.enum_case_name()
            self.state = 1520
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==156:
                self.state = 1519
                self.raw_value_assignment()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Raw_value_assignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUAL(self):
            return self.getToken(Swift5Parser.EQUAL, 0)

        def raw_value_literal(self):
            return self.getTypedRuleContext(Swift5Parser.Raw_value_literalContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_raw_value_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaw_value_assignment" ):
                listener.enterRaw_value_assignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaw_value_assignment" ):
                listener.exitRaw_value_assignment(self)




    def raw_value_assignment(self):

        localctx = Swift5Parser.Raw_value_assignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_raw_value_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1522
            self.match(Swift5Parser.EQUAL)
            self.state = 1523
            self.raw_value_literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Raw_value_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numeric_literal(self):
            return self.getTypedRuleContext(Swift5Parser.Numeric_literalContext,0)


        def static_string_literal(self):
            return self.getTypedRuleContext(Swift5Parser.Static_string_literalContext,0)


        def boolean_literal(self):
            return self.getTypedRuleContext(Swift5Parser.Boolean_literalContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_raw_value_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaw_value_literal" ):
                listener.enterRaw_value_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaw_value_literal" ):
                listener.exitRaw_value_literal(self)




    def raw_value_literal(self):

        localctx = Swift5Parser.Raw_value_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_raw_value_literal)
        try:
            self.state = 1528
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,149,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1525
                self.numeric_literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1526
                self.static_string_literal()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1527
                self.boolean_literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRUCT(self):
            return self.getToken(Swift5Parser.STRUCT, 0)

        def struct_name(self):
            return self.getTypedRuleContext(Swift5Parser.Struct_nameContext,0)


        def struct_body(self):
            return self.getTypedRuleContext(Swift5Parser.Struct_bodyContext,0)


        def attributes(self):
            return self.getTypedRuleContext(Swift5Parser.AttributesContext,0)


        def access_level_modifier(self):
            return self.getTypedRuleContext(Swift5Parser.Access_level_modifierContext,0)


        def generic_parameter_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Generic_parameter_clauseContext,0)


        def type_inheritance_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Type_inheritance_clauseContext,0)


        def generic_where_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Generic_where_clauseContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_struct_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_declaration" ):
                listener.enterStruct_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_declaration" ):
                listener.exitStruct_declaration(self)




    def struct_declaration(self):

        localctx = Swift5Parser.Struct_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_struct_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1531
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==153:
                self.state = 1530
                self.attributes()


            self.state = 1534
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & 576460752303423517) != 0):
                self.state = 1533
                self.access_level_modifier()


            self.state = 1536
            self.match(Swift5Parser.STRUCT)
            self.state = 1537
            self.struct_name()
            self.state = 1539
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==148:
                self.state = 1538
                self.generic_parameter_clause()


            self.state = 1542
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==146:
                self.state = 1541
                self.type_inheritance_clause()


            self.state = 1545
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==25:
                self.state = 1544
                self.generic_where_clause()


            self.state = 1547
            self.struct_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Swift5Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_struct_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_name" ):
                listener.enterStruct_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_name" ):
                listener.exitStruct_name(self)




    def struct_name(self):

        localctx = Swift5Parser.Struct_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_struct_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1549
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LCURLY(self):
            return self.getToken(Swift5Parser.LCURLY, 0)

        def struct_members(self):
            return self.getTypedRuleContext(Swift5Parser.Struct_membersContext,0)


        def RCURLY(self):
            return self.getToken(Swift5Parser.RCURLY, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_struct_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_body" ):
                listener.enterStruct_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_body" ):
                listener.exitStruct_body(self)




    def struct_body(self):

        localctx = Swift5Parser.Struct_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_struct_body)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1551
            self.match(Swift5Parser.LCURLY)
            self.state = 1552
            self.struct_members()
            self.state = 1553
            self.match(Swift5Parser.RCURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_membersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def struct_member(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Struct_memberContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Struct_memberContext,i)


        def getRuleIndex(self):
            return Swift5Parser.RULE_struct_members

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_members" ):
                listener.enterStruct_members(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_members" ):
                listener.exitStruct_members(self)




    def struct_members(self):

        localctx = Swift5Parser.Struct_membersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_struct_members)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1558
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 725622768442875968) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 12525636463639039) != 0) or _la==153:
                self.state = 1555
                self.struct_member()
                self.state = 1560
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_memberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self):
            return self.getTypedRuleContext(Swift5Parser.DeclarationContext,0)


        def compiler_control_statement(self):
            return self.getTypedRuleContext(Swift5Parser.Compiler_control_statementContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_struct_member

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_member" ):
                listener.enterStruct_member(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_member" ):
                listener.exitStruct_member(self)




    def struct_member(self):

        localctx = Swift5Parser.Struct_memberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_struct_member)
        try:
            self.state = 1563
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6, 13, 16, 19, 20, 21, 22, 23, 24, 27, 28, 29, 36, 41, 42, 43, 45, 46, 47, 48, 52, 57, 59, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 153]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1561
                self.declaration()
                pass
            elif token in [113, 116, 117, 119]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1562
                self.compiler_control_statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(Swift5Parser.CLASS, 0)

        def class_name(self):
            return self.getTypedRuleContext(Swift5Parser.Class_nameContext,0)


        def class_body(self):
            return self.getTypedRuleContext(Swift5Parser.Class_bodyContext,0)


        def FINAL(self):
            return self.getToken(Swift5Parser.FINAL, 0)

        def attributes(self):
            return self.getTypedRuleContext(Swift5Parser.AttributesContext,0)


        def generic_parameter_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Generic_parameter_clauseContext,0)


        def type_inheritance_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Type_inheritance_clauseContext,0)


        def generic_where_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Generic_where_clauseContext,0)


        def access_level_modifier(self):
            return self.getTypedRuleContext(Swift5Parser.Access_level_modifierContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_class_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_declaration" ):
                listener.enterClass_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_declaration" ):
                listener.exitClass_declaration(self)




    def class_declaration(self):

        localctx = Swift5Parser.Class_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_class_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1566
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==153:
                self.state = 1565
                self.attributes()


            self.state = 1578
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,161,self._ctx)
            if la_ == 1:
                self.state = 1569
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & 576460752303423517) != 0):
                    self.state = 1568
                    self.access_level_modifier()


                self.state = 1572
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==21:
                    self.state = 1571
                    self.match(Swift5Parser.FINAL)


                pass

            elif la_ == 2:
                self.state = 1574
                self.match(Swift5Parser.FINAL)
                self.state = 1576
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & 576460752303423517) != 0):
                    self.state = 1575
                    self.access_level_modifier()


                pass


            self.state = 1580
            self.match(Swift5Parser.CLASS)
            self.state = 1581
            self.class_name()
            self.state = 1583
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==148:
                self.state = 1582
                self.generic_parameter_clause()


            self.state = 1586
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==146:
                self.state = 1585
                self.type_inheritance_clause()


            self.state = 1589
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==25:
                self.state = 1588
                self.generic_where_clause()


            self.state = 1591
            self.class_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Swift5Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_class_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_name" ):
                listener.enterClass_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_name" ):
                listener.exitClass_name(self)




    def class_name(self):

        localctx = Swift5Parser.Class_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_class_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1593
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LCURLY(self):
            return self.getToken(Swift5Parser.LCURLY, 0)

        def class_members(self):
            return self.getTypedRuleContext(Swift5Parser.Class_membersContext,0)


        def RCURLY(self):
            return self.getToken(Swift5Parser.RCURLY, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_class_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_body" ):
                listener.enterClass_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_body" ):
                listener.exitClass_body(self)




    def class_body(self):

        localctx = Swift5Parser.Class_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_class_body)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1595
            self.match(Swift5Parser.LCURLY)
            self.state = 1596
            self.class_members()
            self.state = 1597
            self.match(Swift5Parser.RCURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_membersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def class_member(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Class_memberContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Class_memberContext,i)


        def getRuleIndex(self):
            return Swift5Parser.RULE_class_members

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_members" ):
                listener.enterClass_members(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_members" ):
                listener.exitClass_members(self)




    def class_members(self):

        localctx = Swift5Parser.Class_membersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_class_members)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1602
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 725622768442875968) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 12525636463639039) != 0) or _la==153:
                self.state = 1599
                self.class_member()
                self.state = 1604
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_memberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self):
            return self.getTypedRuleContext(Swift5Parser.DeclarationContext,0)


        def compiler_control_statement(self):
            return self.getTypedRuleContext(Swift5Parser.Compiler_control_statementContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_class_member

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_member" ):
                listener.enterClass_member(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_member" ):
                listener.exitClass_member(self)




    def class_member(self):

        localctx = Swift5Parser.Class_memberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_class_member)
        try:
            self.state = 1607
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6, 13, 16, 19, 20, 21, 22, 23, 24, 27, 28, 29, 36, 41, 42, 43, 45, 46, 47, 48, 52, 57, 59, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 153]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1605
                self.declaration()
                pass
            elif token in [113, 116, 117, 119]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1606
                self.compiler_control_statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Protocol_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROTOCOL(self):
            return self.getToken(Swift5Parser.PROTOCOL, 0)

        def protocol_name(self):
            return self.getTypedRuleContext(Swift5Parser.Protocol_nameContext,0)


        def protocol_body(self):
            return self.getTypedRuleContext(Swift5Parser.Protocol_bodyContext,0)


        def attributes(self):
            return self.getTypedRuleContext(Swift5Parser.AttributesContext,0)


        def access_level_modifier(self):
            return self.getTypedRuleContext(Swift5Parser.Access_level_modifierContext,0)


        def COLON(self):
            return self.getToken(Swift5Parser.COLON, 0)

        def CLASS(self):
            return self.getToken(Swift5Parser.CLASS, 0)

        def type_inheritance_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Type_inheritance_clauseContext,0)


        def generic_where_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Generic_where_clauseContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_protocol_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProtocol_declaration" ):
                listener.enterProtocol_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProtocol_declaration" ):
                listener.exitProtocol_declaration(self)




    def protocol_declaration(self):

        localctx = Swift5Parser.Protocol_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_protocol_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1610
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==153:
                self.state = 1609
                self.attributes()


            self.state = 1613
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & 576460752303423517) != 0):
                self.state = 1612
                self.access_level_modifier()


            self.state = 1615
            self.match(Swift5Parser.PROTOCOL)
            self.state = 1616
            self.protocol_name()
            self.state = 1620
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,169,self._ctx)
            if la_ == 1:
                self.state = 1617
                self.match(Swift5Parser.COLON)
                self.state = 1618
                self.match(Swift5Parser.CLASS)

            elif la_ == 2:
                self.state = 1619
                self.type_inheritance_clause()


            self.state = 1623
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==25:
                self.state = 1622
                self.generic_where_clause()


            self.state = 1625
            self.protocol_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Protocol_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Swift5Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_protocol_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProtocol_name" ):
                listener.enterProtocol_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProtocol_name" ):
                listener.exitProtocol_name(self)




    def protocol_name(self):

        localctx = Swift5Parser.Protocol_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_protocol_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1627
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Protocol_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LCURLY(self):
            return self.getToken(Swift5Parser.LCURLY, 0)

        def protocol_members(self):
            return self.getTypedRuleContext(Swift5Parser.Protocol_membersContext,0)


        def RCURLY(self):
            return self.getToken(Swift5Parser.RCURLY, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_protocol_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProtocol_body" ):
                listener.enterProtocol_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProtocol_body" ):
                listener.exitProtocol_body(self)




    def protocol_body(self):

        localctx = Swift5Parser.Protocol_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_protocol_body)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1629
            self.match(Swift5Parser.LCURLY)
            self.state = 1630
            self.protocol_members()
            self.state = 1631
            self.match(Swift5Parser.RCURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Protocol_membersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def protocol_member(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Protocol_memberContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Protocol_memberContext,i)


        def getRuleIndex(self):
            return Swift5Parser.RULE_protocol_members

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProtocol_members" ):
                listener.enterProtocol_members(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProtocol_members" ):
                listener.exitProtocol_members(self)




    def protocol_members(self):

        localctx = Swift5Parser.Protocol_membersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_protocol_members)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1636
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 721090512122085440) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 12525636463639039) != 0) or _la==153:
                self.state = 1633
                self.protocol_member()
                self.state = 1638
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Protocol_memberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def protocol_member_declaration(self):
            return self.getTypedRuleContext(Swift5Parser.Protocol_member_declarationContext,0)


        def compiler_control_statement(self):
            return self.getTypedRuleContext(Swift5Parser.Compiler_control_statementContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_protocol_member

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProtocol_member" ):
                listener.enterProtocol_member(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProtocol_member" ):
                listener.exitProtocol_member(self)




    def protocol_member(self):

        localctx = Swift5Parser.Protocol_memberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_protocol_member)
        try:
            self.state = 1641
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6, 16, 20, 21, 22, 23, 24, 28, 42, 44, 46, 47, 48, 57, 59, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 153]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1639
                self.protocol_member_declaration()
                pass
            elif token in [113, 116, 117, 119]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1640
                self.compiler_control_statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Protocol_member_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def protocol_property_declaration(self):
            return self.getTypedRuleContext(Swift5Parser.Protocol_property_declarationContext,0)


        def protocol_method_declaration(self):
            return self.getTypedRuleContext(Swift5Parser.Protocol_method_declarationContext,0)


        def protocol_initializer_declaration(self):
            return self.getTypedRuleContext(Swift5Parser.Protocol_initializer_declarationContext,0)


        def protocol_subscript_declaration(self):
            return self.getTypedRuleContext(Swift5Parser.Protocol_subscript_declarationContext,0)


        def protocol_associated_type_declaration(self):
            return self.getTypedRuleContext(Swift5Parser.Protocol_associated_type_declarationContext,0)


        def typealias_declaration(self):
            return self.getTypedRuleContext(Swift5Parser.Typealias_declarationContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_protocol_member_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProtocol_member_declaration" ):
                listener.enterProtocol_member_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProtocol_member_declaration" ):
                listener.exitProtocol_member_declaration(self)




    def protocol_member_declaration(self):

        localctx = Swift5Parser.Protocol_member_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_protocol_member_declaration)
        try:
            self.state = 1649
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,173,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1643
                self.protocol_property_declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1644
                self.protocol_method_declaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1645
                self.protocol_initializer_declaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1646
                self.protocol_subscript_declaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1647
                self.protocol_associated_type_declaration()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1648
                self.typealias_declaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Protocol_property_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_declaration_head(self):
            return self.getTypedRuleContext(Swift5Parser.Variable_declaration_headContext,0)


        def variable_name(self):
            return self.getTypedRuleContext(Swift5Parser.Variable_nameContext,0)


        def type_annotation(self):
            return self.getTypedRuleContext(Swift5Parser.Type_annotationContext,0)


        def getter_setter_keyword_block(self):
            return self.getTypedRuleContext(Swift5Parser.Getter_setter_keyword_blockContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_protocol_property_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProtocol_property_declaration" ):
                listener.enterProtocol_property_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProtocol_property_declaration" ):
                listener.exitProtocol_property_declaration(self)




    def protocol_property_declaration(self):

        localctx = Swift5Parser.Protocol_property_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_protocol_property_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1651
            self.variable_declaration_head()
            self.state = 1652
            self.variable_name()
            self.state = 1653
            self.type_annotation()
            self.state = 1654
            self.getter_setter_keyword_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Protocol_method_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_head(self):
            return self.getTypedRuleContext(Swift5Parser.Function_headContext,0)


        def function_name(self):
            return self.getTypedRuleContext(Swift5Parser.Function_nameContext,0)


        def function_signature(self):
            return self.getTypedRuleContext(Swift5Parser.Function_signatureContext,0)


        def generic_parameter_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Generic_parameter_clauseContext,0)


        def generic_where_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Generic_where_clauseContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_protocol_method_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProtocol_method_declaration" ):
                listener.enterProtocol_method_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProtocol_method_declaration" ):
                listener.exitProtocol_method_declaration(self)




    def protocol_method_declaration(self):

        localctx = Swift5Parser.Protocol_method_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_protocol_method_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1656
            self.function_head()
            self.state = 1657
            self.function_name()
            self.state = 1659
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==148:
                self.state = 1658
                self.generic_parameter_clause()


            self.state = 1661
            self.function_signature()
            self.state = 1663
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==25:
                self.state = 1662
                self.generic_where_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Protocol_initializer_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initializer_head(self):
            return self.getTypedRuleContext(Swift5Parser.Initializer_headContext,0)


        def parameter_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Parameter_clauseContext,0)


        def RETHROWS(self):
            return self.getToken(Swift5Parser.RETHROWS, 0)

        def generic_parameter_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Generic_parameter_clauseContext,0)


        def generic_where_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Generic_where_clauseContext,0)


        def THROWS(self):
            return self.getToken(Swift5Parser.THROWS, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_protocol_initializer_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProtocol_initializer_declaration" ):
                listener.enterProtocol_initializer_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProtocol_initializer_declaration" ):
                listener.exitProtocol_initializer_declaration(self)




    def protocol_initializer_declaration(self):

        localctx = Swift5Parser.Protocol_initializer_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_protocol_initializer_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1665
            self.initializer_head()
            self.state = 1667
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==148:
                self.state = 1666
                self.generic_parameter_clause()


            self.state = 1669
            self.parameter_clause()
            self.state = 1674
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6, 16, 20, 21, 22, 23, 24, 25, 28, 39, 42, 44, 46, 47, 48, 57, 59, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 113, 116, 117, 119, 142, 153]:
                self.state = 1671
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==39:
                    self.state = 1670
                    self.match(Swift5Parser.THROWS)


                pass
            elif token in [40]:
                self.state = 1673
                self.match(Swift5Parser.RETHROWS)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1677
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==25:
                self.state = 1676
                self.generic_where_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Protocol_subscript_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subscript_head(self):
            return self.getTypedRuleContext(Swift5Parser.Subscript_headContext,0)


        def subscript_result(self):
            return self.getTypedRuleContext(Swift5Parser.Subscript_resultContext,0)


        def getter_setter_keyword_block(self):
            return self.getTypedRuleContext(Swift5Parser.Getter_setter_keyword_blockContext,0)


        def generic_where_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Generic_where_clauseContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_protocol_subscript_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProtocol_subscript_declaration" ):
                listener.enterProtocol_subscript_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProtocol_subscript_declaration" ):
                listener.exitProtocol_subscript_declaration(self)




    def protocol_subscript_declaration(self):

        localctx = Swift5Parser.Protocol_subscript_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_protocol_subscript_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1679
            self.subscript_head()
            self.state = 1680
            self.subscript_result()
            self.state = 1682
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==25:
                self.state = 1681
                self.generic_where_clause()


            self.state = 1684
            self.getter_setter_keyword_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Protocol_associated_type_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSOCIATED_TYPE(self):
            return self.getToken(Swift5Parser.ASSOCIATED_TYPE, 0)

        def typealias_name(self):
            return self.getTypedRuleContext(Swift5Parser.Typealias_nameContext,0)


        def attributes(self):
            return self.getTypedRuleContext(Swift5Parser.AttributesContext,0)


        def access_level_modifier(self):
            return self.getTypedRuleContext(Swift5Parser.Access_level_modifierContext,0)


        def type_inheritance_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Type_inheritance_clauseContext,0)


        def typealias_assignment(self):
            return self.getTypedRuleContext(Swift5Parser.Typealias_assignmentContext,0)


        def generic_where_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Generic_where_clauseContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_protocol_associated_type_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProtocol_associated_type_declaration" ):
                listener.enterProtocol_associated_type_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProtocol_associated_type_declaration" ):
                listener.exitProtocol_associated_type_declaration(self)




    def protocol_associated_type_declaration(self):

        localctx = Swift5Parser.Protocol_associated_type_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_protocol_associated_type_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1687
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==153:
                self.state = 1686
                self.attributes()


            self.state = 1690
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & 576460752303423517) != 0):
                self.state = 1689
                self.access_level_modifier()


            self.state = 1692
            self.match(Swift5Parser.ASSOCIATED_TYPE)
            self.state = 1693
            self.typealias_name()
            self.state = 1695
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==146:
                self.state = 1694
                self.type_inheritance_clause()


            self.state = 1698
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==156:
                self.state = 1697
                self.typealias_assignment()


            self.state = 1701
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==25:
                self.state = 1700
                self.generic_where_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Initializer_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initializer_head(self):
            return self.getTypedRuleContext(Swift5Parser.Initializer_headContext,0)


        def parameter_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Parameter_clauseContext,0)


        def initializer_body(self):
            return self.getTypedRuleContext(Swift5Parser.Initializer_bodyContext,0)


        def generic_parameter_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Generic_parameter_clauseContext,0)


        def generic_where_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Generic_where_clauseContext,0)


        def THROWS(self):
            return self.getToken(Swift5Parser.THROWS, 0)

        def RETHROWS(self):
            return self.getToken(Swift5Parser.RETHROWS, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_initializer_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializer_declaration" ):
                listener.enterInitializer_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializer_declaration" ):
                listener.exitInitializer_declaration(self)




    def initializer_declaration(self):

        localctx = Swift5Parser.Initializer_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_initializer_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1703
            self.initializer_head()
            self.state = 1705
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==148:
                self.state = 1704
                self.generic_parameter_clause()


            self.state = 1707
            self.parameter_clause()
            self.state = 1709
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==39 or _la==40:
                self.state = 1708
                _la = self._input.LA(1)
                if not(_la==39 or _la==40):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1712
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==25:
                self.state = 1711
                self.generic_where_clause()


            self.state = 1714
            self.initializer_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Initializer_headContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INIT(self):
            return self.getToken(Swift5Parser.INIT, 0)

        def attributes(self):
            return self.getTypedRuleContext(Swift5Parser.AttributesContext,0)


        def declaration_modifiers(self):
            return self.getTypedRuleContext(Swift5Parser.Declaration_modifiersContext,0)


        def QUESTION(self):
            return self.getToken(Swift5Parser.QUESTION, 0)

        def BANG(self):
            return self.getToken(Swift5Parser.BANG, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_initializer_head

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializer_head" ):
                listener.enterInitializer_head(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializer_head" ):
                listener.exitInitializer_head(self)




    def initializer_head(self):

        localctx = Swift5Parser.Initializer_headContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_initializer_head)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1717
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==153:
                self.state = 1716
                self.attributes()


            self.state = 1720
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144537400573427776) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 14847) != 0):
                self.state = 1719
                self.declaration_modifiers()


            self.state = 1722
            self.match(Swift5Parser.INIT)
            self.state = 1724
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==151 or _la==152:
                self.state = 1723
                _la = self._input.LA(1)
                if not(_la==151 or _la==152):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Initializer_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def code_block(self):
            return self.getTypedRuleContext(Swift5Parser.Code_blockContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_initializer_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializer_body" ):
                listener.enterInitializer_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializer_body" ):
                listener.exitInitializer_body(self)




    def initializer_body(self):

        localctx = Swift5Parser.Initializer_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_initializer_body)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1726
            self.code_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Deinitializer_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEINIT(self):
            return self.getToken(Swift5Parser.DEINIT, 0)

        def code_block(self):
            return self.getTypedRuleContext(Swift5Parser.Code_blockContext,0)


        def attributes(self):
            return self.getTypedRuleContext(Swift5Parser.AttributesContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_deinitializer_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeinitializer_declaration" ):
                listener.enterDeinitializer_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeinitializer_declaration" ):
                listener.exitDeinitializer_declaration(self)




    def deinitializer_declaration(self):

        localctx = Swift5Parser.Deinitializer_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_deinitializer_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1729
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==153:
                self.state = 1728
                self.attributes()


            self.state = 1731
            self.match(Swift5Parser.DEINIT)
            self.state = 1732
            self.code_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Extension_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXTENSION(self):
            return self.getToken(Swift5Parser.EXTENSION, 0)

        def type_identifier(self):
            return self.getTypedRuleContext(Swift5Parser.Type_identifierContext,0)


        def extension_body(self):
            return self.getTypedRuleContext(Swift5Parser.Extension_bodyContext,0)


        def attributes(self):
            return self.getTypedRuleContext(Swift5Parser.AttributesContext,0)


        def access_level_modifier(self):
            return self.getTypedRuleContext(Swift5Parser.Access_level_modifierContext,0)


        def type_inheritance_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Type_inheritance_clauseContext,0)


        def generic_where_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Generic_where_clauseContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_extension_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtension_declaration" ):
                listener.enterExtension_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtension_declaration" ):
                listener.exitExtension_declaration(self)




    def extension_declaration(self):

        localctx = Swift5Parser.Extension_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_extension_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1735
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==153:
                self.state = 1734
                self.attributes()


            self.state = 1738
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & 576460752303423517) != 0):
                self.state = 1737
                self.access_level_modifier()


            self.state = 1740
            self.match(Swift5Parser.EXTENSION)
            self.state = 1741
            self.type_identifier()
            self.state = 1743
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==146:
                self.state = 1742
                self.type_inheritance_clause()


            self.state = 1746
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==25:
                self.state = 1745
                self.generic_where_clause()


            self.state = 1748
            self.extension_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Extension_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LCURLY(self):
            return self.getToken(Swift5Parser.LCURLY, 0)

        def extension_members(self):
            return self.getTypedRuleContext(Swift5Parser.Extension_membersContext,0)


        def RCURLY(self):
            return self.getToken(Swift5Parser.RCURLY, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_extension_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtension_body" ):
                listener.enterExtension_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtension_body" ):
                listener.exitExtension_body(self)




    def extension_body(self):

        localctx = Swift5Parser.Extension_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_extension_body)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1750
            self.match(Swift5Parser.LCURLY)
            self.state = 1751
            self.extension_members()
            self.state = 1752
            self.match(Swift5Parser.RCURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Extension_membersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def extension_member(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Extension_memberContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Extension_memberContext,i)


        def getRuleIndex(self):
            return Swift5Parser.RULE_extension_members

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtension_members" ):
                listener.enterExtension_members(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtension_members" ):
                listener.exitExtension_members(self)




    def extension_members(self):

        localctx = Swift5Parser.Extension_membersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_extension_members)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1757
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 725622768442875968) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 12525636463639039) != 0) or _la==153:
                self.state = 1754
                self.extension_member()
                self.state = 1759
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Extension_memberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self):
            return self.getTypedRuleContext(Swift5Parser.DeclarationContext,0)


        def compiler_control_statement(self):
            return self.getTypedRuleContext(Swift5Parser.Compiler_control_statementContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_extension_member

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtension_member" ):
                listener.enterExtension_member(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtension_member" ):
                listener.exitExtension_member(self)




    def extension_member(self):

        localctx = Swift5Parser.Extension_memberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_extension_member)
        try:
            self.state = 1762
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6, 13, 16, 19, 20, 21, 22, 23, 24, 27, 28, 29, 36, 41, 42, 43, 45, 46, 47, 48, 52, 57, 59, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 153]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1760
                self.declaration()
                pass
            elif token in [113, 116, 117, 119]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1761
                self.compiler_control_statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Subscript_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subscript_head(self):
            return self.getTypedRuleContext(Swift5Parser.Subscript_headContext,0)


        def subscript_result(self):
            return self.getTypedRuleContext(Swift5Parser.Subscript_resultContext,0)


        def code_block(self):
            return self.getTypedRuleContext(Swift5Parser.Code_blockContext,0)


        def getter_setter_block(self):
            return self.getTypedRuleContext(Swift5Parser.Getter_setter_blockContext,0)


        def getter_setter_keyword_block(self):
            return self.getTypedRuleContext(Swift5Parser.Getter_setter_keyword_blockContext,0)


        def generic_where_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Generic_where_clauseContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_subscript_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscript_declaration" ):
                listener.enterSubscript_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscript_declaration" ):
                listener.exitSubscript_declaration(self)




    def subscript_declaration(self):

        localctx = Swift5Parser.Subscript_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_subscript_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1764
            self.subscript_head()
            self.state = 1765
            self.subscript_result()
            self.state = 1767
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==25:
                self.state = 1766
                self.generic_where_clause()


            self.state = 1772
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,200,self._ctx)
            if la_ == 1:
                self.state = 1769
                self.code_block()
                pass

            elif la_ == 2:
                self.state = 1770
                self.getter_setter_block()
                pass

            elif la_ == 3:
                self.state = 1771
                self.getter_setter_keyword_block()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Subscript_headContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUBSCRIPT(self):
            return self.getToken(Swift5Parser.SUBSCRIPT, 0)

        def parameter_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Parameter_clauseContext,0)


        def attributes(self):
            return self.getTypedRuleContext(Swift5Parser.AttributesContext,0)


        def declaration_modifiers(self):
            return self.getTypedRuleContext(Swift5Parser.Declaration_modifiersContext,0)


        def generic_parameter_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Generic_parameter_clauseContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_subscript_head

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscript_head" ):
                listener.enterSubscript_head(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscript_head" ):
                listener.exitSubscript_head(self)




    def subscript_head(self):

        localctx = Swift5Parser.Subscript_headContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_subscript_head)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1775
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==153:
                self.state = 1774
                self.attributes()


            self.state = 1778
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144537400573427776) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 14847) != 0):
                self.state = 1777
                self.declaration_modifiers()


            self.state = 1780
            self.match(Swift5Parser.SUBSCRIPT)
            self.state = 1782
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==148:
                self.state = 1781
                self.generic_parameter_clause()


            self.state = 1784
            self.parameter_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Subscript_resultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrow_operator(self):
            return self.getTypedRuleContext(Swift5Parser.Arrow_operatorContext,0)


        def type_(self):
            return self.getTypedRuleContext(Swift5Parser.TypeContext,0)


        def attributes(self):
            return self.getTypedRuleContext(Swift5Parser.AttributesContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_subscript_result

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscript_result" ):
                listener.enterSubscript_result(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscript_result" ):
                listener.exitSubscript_result(self)




    def subscript_result(self):

        localctx = Swift5Parser.Subscript_resultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_subscript_result)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1786
            self.arrow_operator()
            self.state = 1788
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,204,self._ctx)
            if la_ == 1:
                self.state = 1787
                self.attributes()


            self.state = 1790
            self.type_(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Operator_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def prefix_operator_declaration(self):
            return self.getTypedRuleContext(Swift5Parser.Prefix_operator_declarationContext,0)


        def postfix_operator_declaration(self):
            return self.getTypedRuleContext(Swift5Parser.Postfix_operator_declarationContext,0)


        def infix_operator_declaration(self):
            return self.getTypedRuleContext(Swift5Parser.Infix_operator_declarationContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_operator_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperator_declaration" ):
                listener.enterOperator_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperator_declaration" ):
                listener.exitOperator_declaration(self)




    def operator_declaration(self):

        localctx = Swift5Parser.Operator_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_operator_declaration)
        try:
            self.state = 1795
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [47]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1792
                self.prefix_operator_declaration()
                pass
            elif token in [57]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1793
                self.postfix_operator_declaration()
                pass
            elif token in [48]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1794
                self.infix_operator_declaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Prefix_operator_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PREFIX(self):
            return self.getToken(Swift5Parser.PREFIX, 0)

        def OPERATOR(self):
            return self.getToken(Swift5Parser.OPERATOR, 0)

        def operator(self):
            return self.getTypedRuleContext(Swift5Parser.OperatorContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_prefix_operator_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrefix_operator_declaration" ):
                listener.enterPrefix_operator_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrefix_operator_declaration" ):
                listener.exitPrefix_operator_declaration(self)




    def prefix_operator_declaration(self):

        localctx = Swift5Parser.Prefix_operator_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_prefix_operator_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1797
            self.match(Swift5Parser.PREFIX)
            self.state = 1798
            self.match(Swift5Parser.OPERATOR)
            self.state = 1799
            self.operator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Postfix_operator_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POSTFIX(self):
            return self.getToken(Swift5Parser.POSTFIX, 0)

        def OPERATOR(self):
            return self.getToken(Swift5Parser.OPERATOR, 0)

        def operator(self):
            return self.getTypedRuleContext(Swift5Parser.OperatorContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_postfix_operator_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfix_operator_declaration" ):
                listener.enterPostfix_operator_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfix_operator_declaration" ):
                listener.exitPostfix_operator_declaration(self)




    def postfix_operator_declaration(self):

        localctx = Swift5Parser.Postfix_operator_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_postfix_operator_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1801
            self.match(Swift5Parser.POSTFIX)
            self.state = 1802
            self.match(Swift5Parser.OPERATOR)
            self.state = 1803
            self.operator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Infix_operator_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INFIX(self):
            return self.getToken(Swift5Parser.INFIX, 0)

        def OPERATOR(self):
            return self.getToken(Swift5Parser.OPERATOR, 0)

        def operator(self):
            return self.getTypedRuleContext(Swift5Parser.OperatorContext,0)


        def infix_operator_group(self):
            return self.getTypedRuleContext(Swift5Parser.Infix_operator_groupContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_infix_operator_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInfix_operator_declaration" ):
                listener.enterInfix_operator_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInfix_operator_declaration" ):
                listener.exitInfix_operator_declaration(self)




    def infix_operator_declaration(self):

        localctx = Swift5Parser.Infix_operator_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_infix_operator_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1805
            self.match(Swift5Parser.INFIX)
            self.state = 1806
            self.match(Swift5Parser.OPERATOR)
            self.state = 1807
            self.operator()
            self.state = 1809
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,206,self._ctx)
            if la_ == 1:
                self.state = 1808
                self.infix_operator_group()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Infix_operator_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(Swift5Parser.COLON, 0)

        def precedence_group_name(self):
            return self.getTypedRuleContext(Swift5Parser.Precedence_group_nameContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_infix_operator_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInfix_operator_group" ):
                listener.enterInfix_operator_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInfix_operator_group" ):
                listener.exitInfix_operator_group(self)




    def infix_operator_group(self):

        localctx = Swift5Parser.Infix_operator_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_infix_operator_group)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1811
            self.match(Swift5Parser.COLON)
            self.state = 1812
            self.precedence_group_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Precedence_group_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRECEDENCE_GROUP(self):
            return self.getToken(Swift5Parser.PRECEDENCE_GROUP, 0)

        def precedence_group_name(self):
            return self.getTypedRuleContext(Swift5Parser.Precedence_group_nameContext,0)


        def LCURLY(self):
            return self.getToken(Swift5Parser.LCURLY, 0)

        def RCURLY(self):
            return self.getToken(Swift5Parser.RCURLY, 0)

        def precedence_group_attributes(self):
            return self.getTypedRuleContext(Swift5Parser.Precedence_group_attributesContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_precedence_group_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecedence_group_declaration" ):
                listener.enterPrecedence_group_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecedence_group_declaration" ):
                listener.exitPrecedence_group_declaration(self)




    def precedence_group_declaration(self):

        localctx = Swift5Parser.Precedence_group_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_precedence_group_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1814
            self.match(Swift5Parser.PRECEDENCE_GROUP)
            self.state = 1815
            self.precedence_group_name()
            self.state = 1816
            self.match(Swift5Parser.LCURLY)
            self.state = 1818
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 135107988821114880) != 0):
                self.state = 1817
                self.precedence_group_attributes()


            self.state = 1820
            self.match(Swift5Parser.RCURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Precedence_group_attributesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def precedence_group_attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Precedence_group_attributeContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Precedence_group_attributeContext,i)


        def getRuleIndex(self):
            return Swift5Parser.RULE_precedence_group_attributes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecedence_group_attributes" ):
                listener.enterPrecedence_group_attributes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecedence_group_attributes" ):
                listener.exitPrecedence_group_attributes(self)




    def precedence_group_attributes(self):

        localctx = Swift5Parser.Precedence_group_attributesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_precedence_group_attributes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1823 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1822
                self.precedence_group_attribute()
                self.state = 1825 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 135107988821114880) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Precedence_group_attributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def precedence_group_relation(self):
            return self.getTypedRuleContext(Swift5Parser.Precedence_group_relationContext,0)


        def precedence_group_assignment(self):
            return self.getTypedRuleContext(Swift5Parser.Precedence_group_assignmentContext,0)


        def precedence_group_associativity(self):
            return self.getTypedRuleContext(Swift5Parser.Precedence_group_associativityContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_precedence_group_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecedence_group_attribute" ):
                listener.enterPrecedence_group_attribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecedence_group_attribute" ):
                listener.exitPrecedence_group_attribute(self)




    def precedence_group_attribute(self):

        localctx = Swift5Parser.Precedence_group_attributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_precedence_group_attribute)
        try:
            self.state = 1830
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [53, 54]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1827
                self.precedence_group_relation()
                pass
            elif token in [55]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1828
                self.precedence_group_assignment()
                pass
            elif token in [56]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1829
                self.precedence_group_associativity()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Precedence_group_relationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(Swift5Parser.COLON, 0)

        def precedence_group_names(self):
            return self.getTypedRuleContext(Swift5Parser.Precedence_group_namesContext,0)


        def HIGHER_THAN(self):
            return self.getToken(Swift5Parser.HIGHER_THAN, 0)

        def LOWER_THAN(self):
            return self.getToken(Swift5Parser.LOWER_THAN, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_precedence_group_relation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecedence_group_relation" ):
                listener.enterPrecedence_group_relation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecedence_group_relation" ):
                listener.exitPrecedence_group_relation(self)




    def precedence_group_relation(self):

        localctx = Swift5Parser.Precedence_group_relationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_precedence_group_relation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1832
            _la = self._input.LA(1)
            if not(_la==53 or _la==54):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1833
            self.match(Swift5Parser.COLON)
            self.state = 1834
            self.precedence_group_names()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Precedence_group_assignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSIGNMENT(self):
            return self.getToken(Swift5Parser.ASSIGNMENT, 0)

        def COLON(self):
            return self.getToken(Swift5Parser.COLON, 0)

        def boolean_literal(self):
            return self.getTypedRuleContext(Swift5Parser.Boolean_literalContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_precedence_group_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecedence_group_assignment" ):
                listener.enterPrecedence_group_assignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecedence_group_assignment" ):
                listener.exitPrecedence_group_assignment(self)




    def precedence_group_assignment(self):

        localctx = Swift5Parser.Precedence_group_assignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_precedence_group_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1836
            self.match(Swift5Parser.ASSIGNMENT)
            self.state = 1837
            self.match(Swift5Parser.COLON)
            self.state = 1838
            self.boolean_literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Precedence_group_associativityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSOCIATIVITY(self):
            return self.getToken(Swift5Parser.ASSOCIATIVITY, 0)

        def COLON(self):
            return self.getToken(Swift5Parser.COLON, 0)

        def LEFT(self):
            return self.getToken(Swift5Parser.LEFT, 0)

        def RIGHT(self):
            return self.getToken(Swift5Parser.RIGHT, 0)

        def NONE(self):
            return self.getToken(Swift5Parser.NONE, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_precedence_group_associativity

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecedence_group_associativity" ):
                listener.enterPrecedence_group_associativity(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecedence_group_associativity" ):
                listener.exitPrecedence_group_associativity(self)




    def precedence_group_associativity(self):

        localctx = Swift5Parser.Precedence_group_associativityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_precedence_group_associativity)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1840
            self.match(Swift5Parser.ASSOCIATIVITY)
            self.state = 1841
            self.match(Swift5Parser.COLON)
            self.state = 1842
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 3940649673949184) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Precedence_group_namesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def precedence_group_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Precedence_group_nameContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Precedence_group_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.COMMA)
            else:
                return self.getToken(Swift5Parser.COMMA, i)

        def getRuleIndex(self):
            return Swift5Parser.RULE_precedence_group_names

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecedence_group_names" ):
                listener.enterPrecedence_group_names(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecedence_group_names" ):
                listener.exitPrecedence_group_names(self)




    def precedence_group_names(self):

        localctx = Swift5Parser.Precedence_group_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_precedence_group_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1844
            self.precedence_group_name()
            self.state = 1849
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==145:
                self.state = 1845
                self.match(Swift5Parser.COMMA)
                self.state = 1846
                self.precedence_group_name()
                self.state = 1851
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Precedence_group_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.DOT)
            else:
                return self.getToken(Swift5Parser.DOT, i)

        def getRuleIndex(self):
            return Swift5Parser.RULE_precedence_group_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecedence_group_name" ):
                listener.enterPrecedence_group_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecedence_group_name" ):
                listener.exitPrecedence_group_name(self)




    def precedence_group_name(self):

        localctx = Swift5Parser.Precedence_group_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_precedence_group_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1852
            self.identifier()
            self.state = 1857
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,211,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1853
                    self.match(Swift5Parser.DOT)
                    self.state = 1854
                    self.identifier() 
                self.state = 1859
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,211,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Declaration_modifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(Swift5Parser.CLASS, 0)

        def CONVENIENCE(self):
            return self.getToken(Swift5Parser.CONVENIENCE, 0)

        def DYNAMIC(self):
            return self.getToken(Swift5Parser.DYNAMIC, 0)

        def FINAL(self):
            return self.getToken(Swift5Parser.FINAL, 0)

        def INFIX(self):
            return self.getToken(Swift5Parser.INFIX, 0)

        def LAZY(self):
            return self.getToken(Swift5Parser.LAZY, 0)

        def OPTIONAL(self):
            return self.getToken(Swift5Parser.OPTIONAL, 0)

        def OVERRIDE(self):
            return self.getToken(Swift5Parser.OVERRIDE, 0)

        def POSTFIX(self):
            return self.getToken(Swift5Parser.POSTFIX, 0)

        def PREFIX(self):
            return self.getToken(Swift5Parser.PREFIX, 0)

        def REQUIRED(self):
            return self.getToken(Swift5Parser.REQUIRED, 0)

        def STATIC(self):
            return self.getToken(Swift5Parser.STATIC, 0)

        def UNOWNED(self):
            return self.getToken(Swift5Parser.UNOWNED, 0)

        def LPAREN(self):
            return self.getToken(Swift5Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(Swift5Parser.RPAREN, 0)

        def SAFE(self):
            return self.getToken(Swift5Parser.SAFE, 0)

        def UNSAFE(self):
            return self.getToken(Swift5Parser.UNSAFE, 0)

        def WEAK(self):
            return self.getToken(Swift5Parser.WEAK, 0)

        def access_level_modifier(self):
            return self.getTypedRuleContext(Swift5Parser.Access_level_modifierContext,0)


        def mutation_modifier(self):
            return self.getTypedRuleContext(Swift5Parser.Mutation_modifierContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_declaration_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration_modifier" ):
                listener.enterDeclaration_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration_modifier" ):
                listener.exitDeclaration_modifier(self)




    def declaration_modifier(self):

        localctx = Swift5Parser.Declaration_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_declaration_modifier)
        self._la = 0 # Token type
        try:
            self.state = 1881
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1860
                self.match(Swift5Parser.CLASS)
                pass
            elif token in [66]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1861
                self.match(Swift5Parser.CONVENIENCE)
                pass
            elif token in [67]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1862
                self.match(Swift5Parser.DYNAMIC)
                pass
            elif token in [21]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1863
                self.match(Swift5Parser.FINAL)
                pass
            elif token in [48]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1864
                self.match(Swift5Parser.INFIX)
                pass
            elif token in [68]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1865
                self.match(Swift5Parser.LAZY)
                pass
            elif token in [69]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1866
                self.match(Swift5Parser.OPTIONAL)
                pass
            elif token in [70]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1867
                self.match(Swift5Parser.OVERRIDE)
                pass
            elif token in [57]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1868
                self.match(Swift5Parser.POSTFIX)
                pass
            elif token in [47]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1869
                self.match(Swift5Parser.PREFIX)
                pass
            elif token in [71]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1870
                self.match(Swift5Parser.REQUIRED)
                pass
            elif token in [72]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1871
                self.match(Swift5Parser.STATIC)
                pass
            elif token in [74]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1872
                self.match(Swift5Parser.UNOWNED)
                self.state = 1876
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==140:
                    self.state = 1873
                    self.match(Swift5Parser.LPAREN)
                    self.state = 1874
                    _la = self._input.LA(1)
                    if not(_la==75 or _la==76):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1875
                    self.match(Swift5Parser.RPAREN)


                pass
            elif token in [73]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1878
                self.match(Swift5Parser.WEAK)
                pass
            elif token in [20, 22, 23, 24, 79]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1879
                self.access_level_modifier()
                pass
            elif token in [77, 78]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1880
                self.mutation_modifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Declaration_modifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration_modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Declaration_modifierContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Declaration_modifierContext,i)


        def getRuleIndex(self):
            return Swift5Parser.RULE_declaration_modifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration_modifiers" ):
                listener.enterDeclaration_modifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration_modifiers" ):
                listener.exitDeclaration_modifiers(self)




    def declaration_modifiers(self):

        localctx = Swift5Parser.Declaration_modifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_declaration_modifiers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1884 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1883
                self.declaration_modifier()
                self.state = 1886 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 144537400573427776) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 14847) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Access_level_modifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRIVATE(self):
            return self.getToken(Swift5Parser.PRIVATE, 0)

        def FILE_PRIVATE(self):
            return self.getToken(Swift5Parser.FILE_PRIVATE, 0)

        def INTERNAL(self):
            return self.getToken(Swift5Parser.INTERNAL, 0)

        def PUBLIC(self):
            return self.getToken(Swift5Parser.PUBLIC, 0)

        def OPEN(self):
            return self.getToken(Swift5Parser.OPEN, 0)

        def LPAREN(self):
            return self.getToken(Swift5Parser.LPAREN, 0)

        def SET(self):
            return self.getToken(Swift5Parser.SET, 0)

        def RPAREN(self):
            return self.getToken(Swift5Parser.RPAREN, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_access_level_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccess_level_modifier" ):
                listener.enterAccess_level_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccess_level_modifier" ):
                listener.exitAccess_level_modifier(self)




    def access_level_modifier(self):

        localctx = Swift5Parser.Access_level_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_access_level_modifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1888
            _la = self._input.LA(1)
            if not(((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & 576460752303423517) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1892
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==140:
                self.state = 1889
                self.match(Swift5Parser.LPAREN)
                self.state = 1890
                self.match(Swift5Parser.SET)
                self.state = 1891
                self.match(Swift5Parser.RPAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Mutation_modifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MUTATING(self):
            return self.getToken(Swift5Parser.MUTATING, 0)

        def NONMUTATING(self):
            return self.getToken(Swift5Parser.NONMUTATING, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_mutation_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMutation_modifier" ):
                listener.enterMutation_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMutation_modifier" ):
                listener.exitMutation_modifier(self)




    def mutation_modifier(self):

        localctx = Swift5Parser.Mutation_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_mutation_modifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1894
            _la = self._input.LA(1)
            if not(_la==77 or _la==78):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def wildcard_pattern(self):
            return self.getTypedRuleContext(Swift5Parser.Wildcard_patternContext,0)


        def identifier_pattern(self):
            return self.getTypedRuleContext(Swift5Parser.Identifier_patternContext,0)


        def tuple_pattern(self):
            return self.getTypedRuleContext(Swift5Parser.Tuple_patternContext,0)


        def type_annotation(self):
            return self.getTypedRuleContext(Swift5Parser.Type_annotationContext,0)


        def value_binding_pattern(self):
            return self.getTypedRuleContext(Swift5Parser.Value_binding_patternContext,0)


        def enum_case_pattern(self):
            return self.getTypedRuleContext(Swift5Parser.Enum_case_patternContext,0)


        def optional_pattern(self):
            return self.getTypedRuleContext(Swift5Parser.Optional_patternContext,0)


        def IS(self):
            return self.getToken(Swift5Parser.IS, 0)

        def type_(self):
            return self.getTypedRuleContext(Swift5Parser.TypeContext,0)


        def expression_pattern(self):
            return self.getTypedRuleContext(Swift5Parser.Expression_patternContext,0)


        def pattern(self):
            return self.getTypedRuleContext(Swift5Parser.PatternContext,0)


        def AS(self):
            return self.getToken(Swift5Parser.AS, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPattern" ):
                listener.enterPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPattern" ):
                listener.exitPattern(self)



    def pattern(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = Swift5Parser.PatternContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 368
        self.enterRecursionRule(localctx, 368, self.RULE_pattern, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1911
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,218,self._ctx)
            if la_ == 1:
                self.state = 1900
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [150]:
                    self.state = 1897
                    self.wildcard_pattern()
                    pass
                elif token in [1, 2, 5, 6, 8, 10, 11, 14, 17, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 41, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 85, 86, 87, 88, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 135, 136, 137, 165]:
                    self.state = 1898
                    self.identifier_pattern()
                    pass
                elif token in [140]:
                    self.state = 1899
                    self.tuple_pattern()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1903
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,217,self._ctx)
                if la_ == 1:
                    self.state = 1902
                    self.type_annotation()


                pass

            elif la_ == 2:
                self.state = 1905
                self.value_binding_pattern()
                pass

            elif la_ == 3:
                self.state = 1906
                self.enum_case_pattern()
                pass

            elif la_ == 4:
                self.state = 1907
                self.optional_pattern()
                pass

            elif la_ == 5:
                self.state = 1908
                self.match(Swift5Parser.IS)
                self.state = 1909
                self.type_(0)
                pass

            elif la_ == 6:
                self.state = 1910
                self.expression_pattern()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1918
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,219,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = Swift5Parser.PatternContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_pattern)
                    self.state = 1913
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 1914
                    self.match(Swift5Parser.AS)
                    self.state = 1915
                    self.type_(0) 
                self.state = 1920
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,219,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Wildcard_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDERSCORE(self):
            return self.getToken(Swift5Parser.UNDERSCORE, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_wildcard_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWildcard_pattern" ):
                listener.enterWildcard_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWildcard_pattern" ):
                listener.exitWildcard_pattern(self)




    def wildcard_pattern(self):

        localctx = Swift5Parser.Wildcard_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_wildcard_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1921
            self.match(Swift5Parser.UNDERSCORE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Identifier_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Swift5Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_identifier_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier_pattern" ):
                listener.enterIdentifier_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier_pattern" ):
                listener.exitIdentifier_pattern(self)




    def identifier_pattern(self):

        localctx = Swift5Parser.Identifier_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_identifier_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1923
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Value_binding_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR(self):
            return self.getToken(Swift5Parser.VAR, 0)

        def pattern(self):
            return self.getTypedRuleContext(Swift5Parser.PatternContext,0)


        def LET(self):
            return self.getToken(Swift5Parser.LET, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_value_binding_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue_binding_pattern" ):
                listener.enterValue_binding_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue_binding_pattern" ):
                listener.exitValue_binding_pattern(self)




    def value_binding_pattern(self):

        localctx = Swift5Parser.Value_binding_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_value_binding_pattern)
        try:
            self.state = 1929
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [28]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1925
                self.match(Swift5Parser.VAR)
                self.state = 1926
                self.pattern(0)
                pass
            elif token in [27]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1927
                self.match(Swift5Parser.LET)
                self.state = 1928
                self.pattern(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tuple_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(Swift5Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(Swift5Parser.RPAREN, 0)

        def tuple_pattern_element_list(self):
            return self.getTypedRuleContext(Swift5Parser.Tuple_pattern_element_listContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_tuple_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTuple_pattern" ):
                listener.enterTuple_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTuple_pattern" ):
                listener.exitTuple_pattern(self)




    def tuple_pattern(self):

        localctx = Swift5Parser.Tuple_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_tuple_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1931
            self.match(Swift5Parser.LPAREN)
            self.state = 1933
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,221,self._ctx)
            if la_ == 1:
                self.state = 1932
                self.tuple_pattern_element_list()


            self.state = 1935
            self.match(Swift5Parser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tuple_pattern_element_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tuple_pattern_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Tuple_pattern_elementContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Tuple_pattern_elementContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.COMMA)
            else:
                return self.getToken(Swift5Parser.COMMA, i)

        def getRuleIndex(self):
            return Swift5Parser.RULE_tuple_pattern_element_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTuple_pattern_element_list" ):
                listener.enterTuple_pattern_element_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTuple_pattern_element_list" ):
                listener.exitTuple_pattern_element_list(self)




    def tuple_pattern_element_list(self):

        localctx = Swift5Parser.Tuple_pattern_element_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_tuple_pattern_element_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1937
            self.tuple_pattern_element()
            self.state = 1942
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==145:
                self.state = 1938
                self.match(Swift5Parser.COMMA)
                self.state = 1939
                self.tuple_pattern_element()
                self.state = 1944
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tuple_pattern_elementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pattern(self):
            return self.getTypedRuleContext(Swift5Parser.PatternContext,0)


        def identifier(self):
            return self.getTypedRuleContext(Swift5Parser.IdentifierContext,0)


        def COLON(self):
            return self.getToken(Swift5Parser.COLON, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_tuple_pattern_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTuple_pattern_element" ):
                listener.enterTuple_pattern_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTuple_pattern_element" ):
                listener.exitTuple_pattern_element(self)




    def tuple_pattern_element(self):

        localctx = Swift5Parser.Tuple_pattern_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_tuple_pattern_element)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1948
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,223,self._ctx)
            if la_ == 1:
                self.state = 1945
                self.identifier()
                self.state = 1946
                self.match(Swift5Parser.COLON)


            self.state = 1950
            self.pattern(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Enum_case_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(Swift5Parser.DOT, 0)

        def enum_case_name(self):
            return self.getTypedRuleContext(Swift5Parser.Enum_case_nameContext,0)


        def type_identifier(self):
            return self.getTypedRuleContext(Swift5Parser.Type_identifierContext,0)


        def tuple_pattern(self):
            return self.getTypedRuleContext(Swift5Parser.Tuple_patternContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_enum_case_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_case_pattern" ):
                listener.enterEnum_case_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_case_pattern" ):
                listener.exitEnum_case_pattern(self)




    def enum_case_pattern(self):

        localctx = Swift5Parser.Enum_case_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_enum_case_pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1953
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -576599273992204954) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 3940649437003519) != 0) or ((((_la - 135)) & ~0x3f) == 0 and ((1 << (_la - 135)) & 1073741831) != 0):
                self.state = 1952
                self.type_identifier()


            self.state = 1955
            self.match(Swift5Parser.DOT)
            self.state = 1956
            self.enum_case_name()
            self.state = 1958
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,225,self._ctx)
            if la_ == 1:
                self.state = 1957
                self.tuple_pattern()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Optional_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier_pattern(self):
            return self.getTypedRuleContext(Swift5Parser.Identifier_patternContext,0)


        def QUESTION(self):
            return self.getToken(Swift5Parser.QUESTION, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_optional_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptional_pattern" ):
                listener.enterOptional_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptional_pattern" ):
                listener.exitOptional_pattern(self)




    def optional_pattern(self):

        localctx = Swift5Parser.Optional_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_optional_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1960
            self.identifier_pattern()
            self.state = 1961
            self.match(Swift5Parser.QUESTION)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expression_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(Swift5Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_expression_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression_pattern" ):
                listener.enterExpression_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression_pattern" ):
                listener.exitExpression_pattern(self)




    def expression_pattern(self):

        localctx = Swift5Parser.Expression_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_expression_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1963
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(Swift5Parser.AT, 0)

        def attribute_name(self):
            return self.getTypedRuleContext(Swift5Parser.Attribute_nameContext,0)


        def attribute_argument_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Attribute_argument_clauseContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute" ):
                listener.enterAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute" ):
                listener.exitAttribute(self)




    def attribute(self):

        localctx = Swift5Parser.AttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_attribute)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1965
            self.match(Swift5Parser.AT)
            self.state = 1966
            self.attribute_name()
            self.state = 1968
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,226,self._ctx)
            if la_ == 1:
                self.state = 1967
                self.attribute_argument_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attribute_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.DOT)
            else:
                return self.getToken(Swift5Parser.DOT, i)

        def getRuleIndex(self):
            return Swift5Parser.RULE_attribute_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_name" ):
                listener.enterAttribute_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_name" ):
                listener.exitAttribute_name(self)




    def attribute_name(self):

        localctx = Swift5Parser.Attribute_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_attribute_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1970
            self.identifier()
            self.state = 1975
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==138:
                self.state = 1971
                self.match(Swift5Parser.DOT)
                self.state = 1972
                self.identifier()
                self.state = 1977
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attribute_argument_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(Swift5Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(Swift5Parser.RPAREN, 0)

        def balanced_tokens(self):
            return self.getTypedRuleContext(Swift5Parser.Balanced_tokensContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_attribute_argument_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_argument_clause" ):
                listener.enterAttribute_argument_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_argument_clause" ):
                listener.exitAttribute_argument_clause(self)




    def attribute_argument_clause(self):

        localctx = Swift5Parser.Attribute_argument_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_attribute_argument_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1978
            self.match(Swift5Parser.LPAREN)
            self.state = 1980
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,228,self._ctx)
            if la_ == 1:
                self.state = 1979
                self.balanced_tokens()


            self.state = 1982
            self.match(Swift5Parser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.AttributeContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.AttributeContext,i)


        def getRuleIndex(self):
            return Swift5Parser.RULE_attributes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributes" ):
                listener.enterAttributes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributes" ):
                listener.exitAttributes(self)




    def attributes(self):

        localctx = Swift5Parser.AttributesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_attributes)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1985 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1984
                    self.attribute()

                else:
                    raise NoViableAltException(self)
                self.state = 1987 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,229,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Balanced_tokensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def balanced_token(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Balanced_tokenContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Balanced_tokenContext,i)


        def getRuleIndex(self):
            return Swift5Parser.RULE_balanced_tokens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBalanced_tokens" ):
                listener.enterBalanced_tokens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBalanced_tokens" ):
                listener.exitBalanced_tokens(self)




    def balanced_tokens(self):

        localctx = Swift5Parser.Balanced_tokensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_balanced_tokens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1990 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1989
                    self.balanced_token()

                else:
                    raise NoViableAltException(self)
                self.state = 1992 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,230,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Balanced_tokenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(Swift5Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(Swift5Parser.RPAREN, 0)

        def balanced_tokens(self):
            return self.getTypedRuleContext(Swift5Parser.Balanced_tokensContext,0)


        def LBRACK(self):
            return self.getToken(Swift5Parser.LBRACK, 0)

        def RBRACK(self):
            return self.getToken(Swift5Parser.RBRACK, 0)

        def LCURLY(self):
            return self.getToken(Swift5Parser.LCURLY, 0)

        def RCURLY(self):
            return self.getToken(Swift5Parser.RCURLY, 0)

        def identifier(self):
            return self.getTypedRuleContext(Swift5Parser.IdentifierContext,0)


        def keyword(self):
            return self.getTypedRuleContext(Swift5Parser.KeywordContext,0)


        def literal(self):
            return self.getTypedRuleContext(Swift5Parser.LiteralContext,0)


        def operator(self):
            return self.getTypedRuleContext(Swift5Parser.OperatorContext,0)


        def balanced_token_punctuation(self):
            return self.getTypedRuleContext(Swift5Parser.Balanced_token_punctuationContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_balanced_token

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBalanced_token" ):
                listener.enterBalanced_token(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBalanced_token" ):
                listener.exitBalanced_token(self)




    def balanced_token(self):

        localctx = Swift5Parser.Balanced_tokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_balanced_token)
        try:
            self.state = 2014
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,234,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1994
                self.match(Swift5Parser.LPAREN)
                self.state = 1996
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,231,self._ctx)
                if la_ == 1:
                    self.state = 1995
                    self.balanced_tokens()


                self.state = 1998
                self.match(Swift5Parser.RPAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1999
                self.match(Swift5Parser.LBRACK)
                self.state = 2001
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,232,self._ctx)
                if la_ == 1:
                    self.state = 2000
                    self.balanced_tokens()


                self.state = 2003
                self.match(Swift5Parser.RBRACK)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2004
                self.match(Swift5Parser.LCURLY)
                self.state = 2006
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,233,self._ctx)
                if la_ == 1:
                    self.state = 2005
                    self.balanced_tokens()


                self.state = 2008
                self.match(Swift5Parser.RCURLY)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2009
                self.identifier()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2010
                self.keyword()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2011
                self.literal()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2012
                self.operator()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2013
                self.balanced_token_punctuation()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Balanced_token_punctuationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(Swift5Parser.DOT, 0)

        def COMMA(self):
            return self.getToken(Swift5Parser.COMMA, 0)

        def COLON(self):
            return self.getToken(Swift5Parser.COLON, 0)

        def SEMI(self):
            return self.getToken(Swift5Parser.SEMI, 0)

        def EQUAL(self):
            return self.getToken(Swift5Parser.EQUAL, 0)

        def AT(self):
            return self.getToken(Swift5Parser.AT, 0)

        def HASH(self):
            return self.getToken(Swift5Parser.HASH, 0)

        def BACKTICK(self):
            return self.getToken(Swift5Parser.BACKTICK, 0)

        def QUESTION(self):
            return self.getToken(Swift5Parser.QUESTION, 0)

        def arrow_operator(self):
            return self.getTypedRuleContext(Swift5Parser.Arrow_operatorContext,0)


        def AND(self):
            return self.getToken(Swift5Parser.AND, 0)

        def BANG(self):
            return self.getToken(Swift5Parser.BANG, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_balanced_token_punctuation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBalanced_token_punctuation" ):
                listener.enterBalanced_token_punctuation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBalanced_token_punctuation" ):
                listener.exitBalanced_token_punctuation(self)




    def balanced_token_punctuation(self):

        localctx = Swift5Parser.Balanced_token_punctuationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 400, self.RULE_balanced_token_punctuation)
        self._la = 0 # Token type
        try:
            self.state = 2022
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,235,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2016
                _la = self._input.LA(1)
                if not(((((_la - 138)) & ~0x3f) == 0 and ((1 << (_la - 138)) & 201638785) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2017
                self.arrow_operator()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2018
                if not this.isPrefixOp(_input):
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "this.isPrefixOp(_input)")
                self.state = 2019
                self.match(Swift5Parser.AND)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2020
                if not this.isPostfixOp(_input):
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "this.isPostfixOp(_input)")
                self.state = 2021
                self.match(Swift5Parser.BANG)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def prefix_expression(self):
            return self.getTypedRuleContext(Swift5Parser.Prefix_expressionContext,0)


        def try_operator(self):
            return self.getTypedRuleContext(Swift5Parser.Try_operatorContext,0)


        def binary_expressions(self):
            return self.getTypedRuleContext(Swift5Parser.Binary_expressionsContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)




    def expression(self):

        localctx = Swift5Parser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 402, self.RULE_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2025
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,236,self._ctx)
            if la_ == 1:
                self.state = 2024
                self.try_operator()


            self.state = 2027
            self.prefix_expression()
            self.state = 2029
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,237,self._ctx)
            if la_ == 1:
                self.state = 2028
                self.binary_expressions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expression_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.ExpressionContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.COMMA)
            else:
                return self.getToken(Swift5Parser.COMMA, i)

        def getRuleIndex(self):
            return Swift5Parser.RULE_expression_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression_list" ):
                listener.enterExpression_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression_list" ):
                listener.exitExpression_list(self)




    def expression_list(self):

        localctx = Swift5Parser.Expression_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 404, self.RULE_expression_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2031
            self.expression()
            self.state = 2036
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==145:
                self.state = 2032
                self.match(Swift5Parser.COMMA)
                self.state = 2033
                self.expression()
                self.state = 2038
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Prefix_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfix_expression(self):
            return self.getTypedRuleContext(Swift5Parser.Postfix_expressionContext,0)


        def prefix_operator(self):
            return self.getTypedRuleContext(Swift5Parser.Prefix_operatorContext,0)


        def in_out_expression(self):
            return self.getTypedRuleContext(Swift5Parser.In_out_expressionContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_prefix_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrefix_expression" ):
                listener.enterPrefix_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrefix_expression" ):
                listener.exitPrefix_expression(self)




    def prefix_expression(self):

        localctx = Swift5Parser.Prefix_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 406, self.RULE_prefix_expression)
        try:
            self.state = 2044
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,240,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2040
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,239,self._ctx)
                if la_ == 1:
                    self.state = 2039
                    self.prefix_operator()


                self.state = 2042
                self.postfix_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2043
                self.in_out_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class In_out_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AND(self):
            return self.getToken(Swift5Parser.AND, 0)

        def identifier(self):
            return self.getTypedRuleContext(Swift5Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_in_out_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIn_out_expression" ):
                listener.enterIn_out_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIn_out_expression" ):
                listener.exitIn_out_expression(self)




    def in_out_expression(self):

        localctx = Swift5Parser.In_out_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 408, self.RULE_in_out_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2046
            self.match(Swift5Parser.AND)
            self.state = 2047
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Try_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRY(self):
            return self.getToken(Swift5Parser.TRY, 0)

        def QUESTION(self):
            return self.getToken(Swift5Parser.QUESTION, 0)

        def BANG(self):
            return self.getToken(Swift5Parser.BANG, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_try_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTry_operator" ):
                listener.enterTry_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTry_operator" ):
                listener.exitTry_operator(self)




    def try_operator(self):

        localctx = Swift5Parser.Try_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 410, self.RULE_try_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2049
            self.match(Swift5Parser.TRY)
            self.state = 2051
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,241,self._ctx)
            if la_ == 1:
                self.state = 2050
                _la = self._input.LA(1)
                if not(_la==151 or _la==152):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Binary_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def binary_operator(self):
            return self.getTypedRuleContext(Swift5Parser.Binary_operatorContext,0)


        def prefix_expression(self):
            return self.getTypedRuleContext(Swift5Parser.Prefix_expressionContext,0)


        def assignment_operator(self):
            return self.getTypedRuleContext(Swift5Parser.Assignment_operatorContext,0)


        def conditional_operator(self):
            return self.getTypedRuleContext(Swift5Parser.Conditional_operatorContext,0)


        def try_operator(self):
            return self.getTypedRuleContext(Swift5Parser.Try_operatorContext,0)


        def type_casting_operator(self):
            return self.getTypedRuleContext(Swift5Parser.Type_casting_operatorContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_binary_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinary_expression" ):
                listener.enterBinary_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinary_expression" ):
                listener.exitBinary_expression(self)




    def binary_expression(self):

        localctx = Swift5Parser.Binary_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 412, self.RULE_binary_expression)
        try:
            self.state = 2066
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,244,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2053
                self.binary_operator()
                self.state = 2054
                self.prefix_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2058
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,242,self._ctx)
                if la_ == 1:
                    self.state = 2056
                    self.assignment_operator()
                    pass

                elif la_ == 2:
                    self.state = 2057
                    self.conditional_operator()
                    pass


                self.state = 2061
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,243,self._ctx)
                if la_ == 1:
                    self.state = 2060
                    self.try_operator()


                self.state = 2063
                self.prefix_expression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2065
                self.type_casting_operator()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Binary_expressionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def binary_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Binary_expressionContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Binary_expressionContext,i)


        def getRuleIndex(self):
            return Swift5Parser.RULE_binary_expressions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinary_expressions" ):
                listener.enterBinary_expressions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinary_expressions" ):
                listener.exitBinary_expressions(self)




    def binary_expressions(self):

        localctx = Swift5Parser.Binary_expressionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 414, self.RULE_binary_expressions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2069 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2068
                    self.binary_expression()

                else:
                    raise NoViableAltException(self)
                self.state = 2071 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,245,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conditional_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUESTION(self):
            return self.getToken(Swift5Parser.QUESTION, 0)

        def expression(self):
            return self.getTypedRuleContext(Swift5Parser.ExpressionContext,0)


        def COLON(self):
            return self.getToken(Swift5Parser.COLON, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_conditional_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditional_operator" ):
                listener.enterConditional_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditional_operator" ):
                listener.exitConditional_operator(self)




    def conditional_operator(self):

        localctx = Swift5Parser.Conditional_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 416, self.RULE_conditional_operator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2073
            self.match(Swift5Parser.QUESTION)
            self.state = 2074
            self.expression()
            self.state = 2075
            self.match(Swift5Parser.COLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_casting_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(Swift5Parser.TypeContext,0)


        def IS(self):
            return self.getToken(Swift5Parser.IS, 0)

        def AS(self):
            return self.getToken(Swift5Parser.AS, 0)

        def QUESTION(self):
            return self.getToken(Swift5Parser.QUESTION, 0)

        def BANG(self):
            return self.getToken(Swift5Parser.BANG, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_type_casting_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_casting_operator" ):
                listener.enterType_casting_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_casting_operator" ):
                listener.exitType_casting_operator(self)




    def type_casting_operator(self):

        localctx = Swift5Parser.Type_casting_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 418, self.RULE_type_casting_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2082
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [80]:
                self.state = 2077
                self.match(Swift5Parser.IS)
                pass
            elif token in [1]:
                self.state = 2078
                self.match(Swift5Parser.AS)
                self.state = 2080
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==151 or _la==152:
                    self.state = 2079
                    _la = self._input.LA(1)
                    if not(_la==151 or _la==152):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass
            else:
                raise NoViableAltException(self)

            self.state = 2084
            self.type_(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Primary_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unqualified_name(self):
            return self.getTypedRuleContext(Swift5Parser.Unqualified_nameContext,0)


        def generic_argument_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Generic_argument_clauseContext,0)


        def array_type(self):
            return self.getTypedRuleContext(Swift5Parser.Array_typeContext,0)


        def dictionary_type(self):
            return self.getTypedRuleContext(Swift5Parser.Dictionary_typeContext,0)


        def literal_expression(self):
            return self.getTypedRuleContext(Swift5Parser.Literal_expressionContext,0)


        def self_expression(self):
            return self.getTypedRuleContext(Swift5Parser.Self_expressionContext,0)


        def superclass_expression(self):
            return self.getTypedRuleContext(Swift5Parser.Superclass_expressionContext,0)


        def closure_expression(self):
            return self.getTypedRuleContext(Swift5Parser.Closure_expressionContext,0)


        def parenthesized_operator(self):
            return self.getTypedRuleContext(Swift5Parser.Parenthesized_operatorContext,0)


        def parenthesized_expression(self):
            return self.getTypedRuleContext(Swift5Parser.Parenthesized_expressionContext,0)


        def tuple_expression(self):
            return self.getTypedRuleContext(Swift5Parser.Tuple_expressionContext,0)


        def implicit_member_expression(self):
            return self.getTypedRuleContext(Swift5Parser.Implicit_member_expressionContext,0)


        def wildcard_expression(self):
            return self.getTypedRuleContext(Swift5Parser.Wildcard_expressionContext,0)


        def key_path_expression(self):
            return self.getTypedRuleContext(Swift5Parser.Key_path_expressionContext,0)


        def selector_expression(self):
            return self.getTypedRuleContext(Swift5Parser.Selector_expressionContext,0)


        def key_path_string_expression(self):
            return self.getTypedRuleContext(Swift5Parser.Key_path_string_expressionContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_primary_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary_expression" ):
                listener.enterPrimary_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary_expression" ):
                listener.exitPrimary_expression(self)




    def primary_expression(self):

        localctx = Swift5Parser.Primary_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 420, self.RULE_primary_expression)
        try:
            self.state = 2104
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,249,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2086
                self.unqualified_name()
                self.state = 2088
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,248,self._ctx)
                if la_ == 1:
                    self.state = 2087
                    self.generic_argument_clause()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2090
                self.array_type()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2091
                self.dictionary_type()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2092
                self.literal_expression()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2093
                self.self_expression()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2094
                self.superclass_expression()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2095
                self.closure_expression()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2096
                self.parenthesized_operator()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2097
                self.parenthesized_expression()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2098
                self.tuple_expression()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2099
                self.implicit_member_expression()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2100
                self.wildcard_expression()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 2101
                self.key_path_expression()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 2102
                self.selector_expression()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 2103
                self.key_path_string_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unqualified_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Swift5Parser.IdentifierContext,0)


        def LPAREN(self):
            return self.getToken(Swift5Parser.LPAREN, 0)

        def argument_names(self):
            return self.getTypedRuleContext(Swift5Parser.Argument_namesContext,0)


        def RPAREN(self):
            return self.getToken(Swift5Parser.RPAREN, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_unqualified_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnqualified_name" ):
                listener.enterUnqualified_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnqualified_name" ):
                listener.exitUnqualified_name(self)




    def unqualified_name(self):

        localctx = Swift5Parser.Unqualified_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 422, self.RULE_unqualified_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2106
            self.identifier()
            self.state = 2111
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,250,self._ctx)
            if la_ == 1:
                self.state = 2107
                self.match(Swift5Parser.LPAREN)
                self.state = 2108
                self.argument_names()
                self.state = 2109
                self.match(Swift5Parser.RPAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Literal_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(Swift5Parser.LiteralContext,0)


        def array_literal(self):
            return self.getTypedRuleContext(Swift5Parser.Array_literalContext,0)


        def dictionary_literal(self):
            return self.getTypedRuleContext(Swift5Parser.Dictionary_literalContext,0)


        def playground_literal(self):
            return self.getTypedRuleContext(Swift5Parser.Playground_literalContext,0)


        def HASH_FILE(self):
            return self.getToken(Swift5Parser.HASH_FILE, 0)

        def HASH_FILE_ID(self):
            return self.getToken(Swift5Parser.HASH_FILE_ID, 0)

        def HASH_FILE_PATH(self):
            return self.getToken(Swift5Parser.HASH_FILE_PATH, 0)

        def HASH_LINE(self):
            return self.getToken(Swift5Parser.HASH_LINE, 0)

        def HASH_COLUMN(self):
            return self.getToken(Swift5Parser.HASH_COLUMN, 0)

        def HASH_FUNCTION(self):
            return self.getToken(Swift5Parser.HASH_FUNCTION, 0)

        def HASH_DSO_HANDLE(self):
            return self.getToken(Swift5Parser.HASH_DSO_HANDLE, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_literal_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral_expression" ):
                listener.enterLiteral_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral_expression" ):
                listener.exitLiteral_expression(self)




    def literal_expression(self):

        localctx = Swift5Parser.Literal_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 424, self.RULE_literal_expression)
        try:
            self.state = 2124
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,251,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2113
                self.literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2114
                self.array_literal()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2115
                self.dictionary_literal()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2116
                self.playground_literal()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2117
                self.match(Swift5Parser.HASH_FILE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2118
                self.match(Swift5Parser.HASH_FILE_ID)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2119
                self.match(Swift5Parser.HASH_FILE_PATH)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2120
                self.match(Swift5Parser.HASH_LINE)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2121
                self.match(Swift5Parser.HASH_COLUMN)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2122
                self.match(Swift5Parser.HASH_FUNCTION)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2123
                self.match(Swift5Parser.HASH_DSO_HANDLE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(Swift5Parser.LBRACK, 0)

        def RBRACK(self):
            return self.getToken(Swift5Parser.RBRACK, 0)

        def array_literal_items(self):
            return self.getTypedRuleContext(Swift5Parser.Array_literal_itemsContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_array_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_literal" ):
                listener.enterArray_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_literal" ):
                listener.exitArray_literal(self)




    def array_literal(self):

        localctx = Swift5Parser.Array_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 426, self.RULE_array_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2126
            self.match(Swift5Parser.LBRACK)
            self.state = 2128
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,252,self._ctx)
            if la_ == 1:
                self.state = 2127
                self.array_literal_items()


            self.state = 2130
            self.match(Swift5Parser.RBRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_literal_itemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def array_literal_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Array_literal_itemContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Array_literal_itemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.COMMA)
            else:
                return self.getToken(Swift5Parser.COMMA, i)

        def getRuleIndex(self):
            return Swift5Parser.RULE_array_literal_items

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_literal_items" ):
                listener.enterArray_literal_items(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_literal_items" ):
                listener.exitArray_literal_items(self)




    def array_literal_items(self):

        localctx = Swift5Parser.Array_literal_itemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 428, self.RULE_array_literal_items)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2132
            self.array_literal_item()
            self.state = 2137
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,253,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2133
                    self.match(Swift5Parser.COMMA)
                    self.state = 2134
                    self.array_literal_item() 
                self.state = 2139
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,253,self._ctx)

            self.state = 2141
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==145:
                self.state = 2140
                self.match(Swift5Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_literal_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(Swift5Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_array_literal_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_literal_item" ):
                listener.enterArray_literal_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_literal_item" ):
                listener.exitArray_literal_item(self)




    def array_literal_item(self):

        localctx = Swift5Parser.Array_literal_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 430, self.RULE_array_literal_item)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2143
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dictionary_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(Swift5Parser.LBRACK, 0)

        def RBRACK(self):
            return self.getToken(Swift5Parser.RBRACK, 0)

        def dictionary_literal_items(self):
            return self.getTypedRuleContext(Swift5Parser.Dictionary_literal_itemsContext,0)


        def COLON(self):
            return self.getToken(Swift5Parser.COLON, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_dictionary_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDictionary_literal" ):
                listener.enterDictionary_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDictionary_literal" ):
                listener.exitDictionary_literal(self)




    def dictionary_literal(self):

        localctx = Swift5Parser.Dictionary_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 432, self.RULE_dictionary_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2145
            self.match(Swift5Parser.LBRACK)
            self.state = 2148
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,255,self._ctx)
            if la_ == 1:
                self.state = 2146
                self.dictionary_literal_items()
                pass

            elif la_ == 2:
                self.state = 2147
                self.match(Swift5Parser.COLON)
                pass


            self.state = 2150
            self.match(Swift5Parser.RBRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dictionary_literal_itemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dictionary_literal_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Dictionary_literal_itemContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Dictionary_literal_itemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.COMMA)
            else:
                return self.getToken(Swift5Parser.COMMA, i)

        def getRuleIndex(self):
            return Swift5Parser.RULE_dictionary_literal_items

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDictionary_literal_items" ):
                listener.enterDictionary_literal_items(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDictionary_literal_items" ):
                listener.exitDictionary_literal_items(self)




    def dictionary_literal_items(self):

        localctx = Swift5Parser.Dictionary_literal_itemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 434, self.RULE_dictionary_literal_items)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2152
            self.dictionary_literal_item()
            self.state = 2157
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,256,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2153
                    self.match(Swift5Parser.COMMA)
                    self.state = 2154
                    self.dictionary_literal_item() 
                self.state = 2159
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,256,self._ctx)

            self.state = 2161
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==145:
                self.state = 2160
                self.match(Swift5Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dictionary_literal_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.ExpressionContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.ExpressionContext,i)


        def COLON(self):
            return self.getToken(Swift5Parser.COLON, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_dictionary_literal_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDictionary_literal_item" ):
                listener.enterDictionary_literal_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDictionary_literal_item" ):
                listener.exitDictionary_literal_item(self)




    def dictionary_literal_item(self):

        localctx = Swift5Parser.Dictionary_literal_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 436, self.RULE_dictionary_literal_item)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2163
            self.expression()
            self.state = 2164
            self.match(Swift5Parser.COLON)
            self.state = 2165
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Playground_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HASH_COLOR_LITERAL(self):
            return self.getToken(Swift5Parser.HASH_COLOR_LITERAL, 0)

        def LPAREN(self):
            return self.getToken(Swift5Parser.LPAREN, 0)

        def RED(self):
            return self.getToken(Swift5Parser.RED, 0)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.COLON)
            else:
                return self.getToken(Swift5Parser.COLON, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.ExpressionContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.COMMA)
            else:
                return self.getToken(Swift5Parser.COMMA, i)

        def GREEN(self):
            return self.getToken(Swift5Parser.GREEN, 0)

        def BLUE(self):
            return self.getToken(Swift5Parser.BLUE, 0)

        def ALPHA(self):
            return self.getToken(Swift5Parser.ALPHA, 0)

        def RPAREN(self):
            return self.getToken(Swift5Parser.RPAREN, 0)

        def HASH_FILE_LITERAL(self):
            return self.getToken(Swift5Parser.HASH_FILE_LITERAL, 0)

        def RESOURCE_NAME(self):
            return self.getToken(Swift5Parser.RESOURCE_NAME, 0)

        def HASH_IMAGE_LITERAL(self):
            return self.getToken(Swift5Parser.HASH_IMAGE_LITERAL, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_playground_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlayground_literal" ):
                listener.enterPlayground_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlayground_literal" ):
                listener.exitPlayground_literal(self)




    def playground_literal(self):

        localctx = Swift5Parser.Playground_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 438, self.RULE_playground_literal)
        try:
            self.state = 2200
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [132]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2167
                self.match(Swift5Parser.HASH_COLOR_LITERAL)
                self.state = 2168
                self.match(Swift5Parser.LPAREN)
                self.state = 2169
                self.match(Swift5Parser.RED)
                self.state = 2170
                self.match(Swift5Parser.COLON)
                self.state = 2171
                self.expression()
                self.state = 2172
                self.match(Swift5Parser.COMMA)
                self.state = 2173
                self.match(Swift5Parser.GREEN)
                self.state = 2174
                self.match(Swift5Parser.COLON)
                self.state = 2175
                self.expression()
                self.state = 2176
                self.match(Swift5Parser.COMMA)
                self.state = 2177
                self.match(Swift5Parser.BLUE)
                self.state = 2178
                self.match(Swift5Parser.COLON)
                self.state = 2179
                self.expression()
                self.state = 2180
                self.match(Swift5Parser.COMMA)
                self.state = 2181
                self.match(Swift5Parser.ALPHA)
                self.state = 2182
                self.match(Swift5Parser.COLON)
                self.state = 2183
                self.expression()
                self.state = 2184
                self.match(Swift5Parser.RPAREN)
                pass
            elif token in [133]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2186
                self.match(Swift5Parser.HASH_FILE_LITERAL)
                self.state = 2187
                self.match(Swift5Parser.LPAREN)
                self.state = 2188
                self.match(Swift5Parser.RESOURCE_NAME)
                self.state = 2189
                self.match(Swift5Parser.COLON)
                self.state = 2190
                self.expression()
                self.state = 2191
                self.match(Swift5Parser.RPAREN)
                pass
            elif token in [134]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2193
                self.match(Swift5Parser.HASH_IMAGE_LITERAL)
                self.state = 2194
                self.match(Swift5Parser.LPAREN)
                self.state = 2195
                self.match(Swift5Parser.RESOURCE_NAME)
                self.state = 2196
                self.match(Swift5Parser.COLON)
                self.state = 2197
                self.expression()
                self.state = 2198
                self.match(Swift5Parser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Self_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return Swift5Parser.RULE_self_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Self_initializer_expressionContext(Self_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Swift5Parser.Self_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SELF(self):
            return self.getToken(Swift5Parser.SELF, 0)
        def DOT(self):
            return self.getToken(Swift5Parser.DOT, 0)
        def INIT(self):
            return self.getToken(Swift5Parser.INIT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelf_initializer_expression" ):
                listener.enterSelf_initializer_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelf_initializer_expression" ):
                listener.exitSelf_initializer_expression(self)


    class Self_pure_expressionContext(Self_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Swift5Parser.Self_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SELF(self):
            return self.getToken(Swift5Parser.SELF, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelf_pure_expression" ):
                listener.enterSelf_pure_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelf_pure_expression" ):
                listener.exitSelf_pure_expression(self)


    class Self_subscript_expressionContext(Self_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Swift5Parser.Self_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SELF(self):
            return self.getToken(Swift5Parser.SELF, 0)
        def LBRACK(self):
            return self.getToken(Swift5Parser.LBRACK, 0)
        def function_call_argument_list(self):
            return self.getTypedRuleContext(Swift5Parser.Function_call_argument_listContext,0)

        def RBRACK(self):
            return self.getToken(Swift5Parser.RBRACK, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelf_subscript_expression" ):
                listener.enterSelf_subscript_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelf_subscript_expression" ):
                listener.exitSelf_subscript_expression(self)


    class Self_method_expressionContext(Self_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Swift5Parser.Self_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SELF(self):
            return self.getToken(Swift5Parser.SELF, 0)
        def DOT(self):
            return self.getToken(Swift5Parser.DOT, 0)
        def identifier(self):
            return self.getTypedRuleContext(Swift5Parser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelf_method_expression" ):
                listener.enterSelf_method_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelf_method_expression" ):
                listener.exitSelf_method_expression(self)



    def self_expression(self):

        localctx = Swift5Parser.Self_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 440, self.RULE_self_expression)
        try:
            self.state = 2214
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,259,self._ctx)
            if la_ == 1:
                localctx = Swift5Parser.Self_pure_expressionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2202
                self.match(Swift5Parser.SELF)
                pass

            elif la_ == 2:
                localctx = Swift5Parser.Self_method_expressionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2203
                self.match(Swift5Parser.SELF)
                self.state = 2204
                self.match(Swift5Parser.DOT)
                self.state = 2205
                self.identifier()
                pass

            elif la_ == 3:
                localctx = Swift5Parser.Self_subscript_expressionContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2206
                self.match(Swift5Parser.SELF)
                self.state = 2207
                self.match(Swift5Parser.LBRACK)
                self.state = 2208
                self.function_call_argument_list()
                self.state = 2209
                self.match(Swift5Parser.RBRACK)
                pass

            elif la_ == 4:
                localctx = Swift5Parser.Self_initializer_expressionContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2211
                self.match(Swift5Parser.SELF)
                self.state = 2212
                self.match(Swift5Parser.DOT)
                self.state = 2213
                self.match(Swift5Parser.INIT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Superclass_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return Swift5Parser.RULE_superclass_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Superclass_subscript_expressionContext(Superclass_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Swift5Parser.Superclass_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SUPER(self):
            return self.getToken(Swift5Parser.SUPER, 0)
        def LBRACK(self):
            return self.getToken(Swift5Parser.LBRACK, 0)
        def function_call_argument_list(self):
            return self.getTypedRuleContext(Swift5Parser.Function_call_argument_listContext,0)

        def RBRACK(self):
            return self.getToken(Swift5Parser.RBRACK, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSuperclass_subscript_expression" ):
                listener.enterSuperclass_subscript_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSuperclass_subscript_expression" ):
                listener.exitSuperclass_subscript_expression(self)


    class Superclass_initializer_expressionContext(Superclass_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Swift5Parser.Superclass_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SUPER(self):
            return self.getToken(Swift5Parser.SUPER, 0)
        def DOT(self):
            return self.getToken(Swift5Parser.DOT, 0)
        def INIT(self):
            return self.getToken(Swift5Parser.INIT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSuperclass_initializer_expression" ):
                listener.enterSuperclass_initializer_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSuperclass_initializer_expression" ):
                listener.exitSuperclass_initializer_expression(self)


    class Superclass_method_expressionContext(Superclass_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Swift5Parser.Superclass_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SUPER(self):
            return self.getToken(Swift5Parser.SUPER, 0)
        def DOT(self):
            return self.getToken(Swift5Parser.DOT, 0)
        def identifier(self):
            return self.getTypedRuleContext(Swift5Parser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSuperclass_method_expression" ):
                listener.enterSuperclass_method_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSuperclass_method_expression" ):
                listener.exitSuperclass_method_expression(self)



    def superclass_expression(self):

        localctx = Swift5Parser.Superclass_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 442, self.RULE_superclass_expression)
        try:
            self.state = 2227
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,260,self._ctx)
            if la_ == 1:
                localctx = Swift5Parser.Superclass_method_expressionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2216
                self.match(Swift5Parser.SUPER)
                self.state = 2217
                self.match(Swift5Parser.DOT)
                self.state = 2218
                self.identifier()
                pass

            elif la_ == 2:
                localctx = Swift5Parser.Superclass_subscript_expressionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2219
                self.match(Swift5Parser.SUPER)
                self.state = 2220
                self.match(Swift5Parser.LBRACK)
                self.state = 2221
                self.function_call_argument_list()
                self.state = 2222
                self.match(Swift5Parser.RBRACK)
                pass

            elif la_ == 3:
                localctx = Swift5Parser.Superclass_initializer_expressionContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2224
                self.match(Swift5Parser.SUPER)
                self.state = 2225
                self.match(Swift5Parser.DOT)
                self.state = 2226
                self.match(Swift5Parser.INIT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Closure_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LCURLY(self):
            return self.getToken(Swift5Parser.LCURLY, 0)

        def RCURLY(self):
            return self.getToken(Swift5Parser.RCURLY, 0)

        def closure_signature(self):
            return self.getTypedRuleContext(Swift5Parser.Closure_signatureContext,0)


        def statements(self):
            return self.getTypedRuleContext(Swift5Parser.StatementsContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_closure_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClosure_expression" ):
                listener.enterClosure_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClosure_expression" ):
                listener.exitClosure_expression(self)




    def closure_expression(self):

        localctx = Swift5Parser.Closure_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 444, self.RULE_closure_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2229
            self.match(Swift5Parser.LCURLY)
            self.state = 2231
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,261,self._ctx)
            if la_ == 1:
                self.state = 2230
                self.closure_signature()


            self.state = 2234
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,262,self._ctx)
            if la_ == 1:
                self.state = 2233
                self.statements()


            self.state = 2236
            self.match(Swift5Parser.RCURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Closure_signatureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def closure_parameter_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Closure_parameter_clauseContext,0)


        def IN(self):
            return self.getToken(Swift5Parser.IN, 0)

        def capture_list(self):
            return self.getTypedRuleContext(Swift5Parser.Capture_listContext,0)


        def THROWS(self):
            return self.getToken(Swift5Parser.THROWS, 0)

        def function_result(self):
            return self.getTypedRuleContext(Swift5Parser.Function_resultContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_closure_signature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClosure_signature" ):
                listener.enterClosure_signature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClosure_signature" ):
                listener.exitClosure_signature(self)




    def closure_signature(self):

        localctx = Swift5Parser.Closure_signatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 446, self.RULE_closure_signature)
        self._la = 0 # Token type
        try:
            self.state = 2253
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,266,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2239
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==141:
                    self.state = 2238
                    self.capture_list()


                self.state = 2241
                self.closure_parameter_clause()
                self.state = 2243
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,264,self._ctx)
                if la_ == 1:
                    self.state = 2242
                    self.match(Swift5Parser.THROWS)


                self.state = 2246
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,265,self._ctx)
                if la_ == 1:
                    self.state = 2245
                    self.function_result()


                self.state = 2248
                self.match(Swift5Parser.IN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2250
                self.capture_list()
                self.state = 2251
                self.match(Swift5Parser.IN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Closure_parameter_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(Swift5Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(Swift5Parser.RPAREN, 0)

        def closure_parameter_list(self):
            return self.getTypedRuleContext(Swift5Parser.Closure_parameter_listContext,0)


        def identifier_list(self):
            return self.getTypedRuleContext(Swift5Parser.Identifier_listContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_closure_parameter_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClosure_parameter_clause" ):
                listener.enterClosure_parameter_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClosure_parameter_clause" ):
                listener.exitClosure_parameter_clause(self)




    def closure_parameter_clause(self):

        localctx = Swift5Parser.Closure_parameter_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 448, self.RULE_closure_parameter_clause)
        self._la = 0 # Token type
        try:
            self.state = 2261
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [140]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2255
                self.match(Swift5Parser.LPAREN)
                self.state = 2257
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -576599273992204954) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 3940649437003519) != 0) or ((((_la - 135)) & ~0x3f) == 0 and ((1 << (_la - 135)) & 1073741831) != 0):
                    self.state = 2256
                    self.closure_parameter_list()


                self.state = 2259
                self.match(Swift5Parser.RPAREN)
                pass
            elif token in [1, 2, 5, 6, 8, 10, 11, 14, 17, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 41, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 85, 86, 87, 88, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 135, 136, 137, 165]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2260
                self.identifier_list()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Closure_parameter_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def closure_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Closure_parameterContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Closure_parameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.COMMA)
            else:
                return self.getToken(Swift5Parser.COMMA, i)

        def getRuleIndex(self):
            return Swift5Parser.RULE_closure_parameter_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClosure_parameter_list" ):
                listener.enterClosure_parameter_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClosure_parameter_list" ):
                listener.exitClosure_parameter_list(self)




    def closure_parameter_list(self):

        localctx = Swift5Parser.Closure_parameter_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 450, self.RULE_closure_parameter_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2263
            self.closure_parameter()
            self.state = 2268
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==145:
                self.state = 2264
                self.match(Swift5Parser.COMMA)
                self.state = 2265
                self.closure_parameter()
                self.state = 2270
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Closure_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.closure_parameter_name = None # IdentifierContext

        def identifier(self):
            return self.getTypedRuleContext(Swift5Parser.IdentifierContext,0)


        def type_annotation(self):
            return self.getTypedRuleContext(Swift5Parser.Type_annotationContext,0)


        def range_operator(self):
            return self.getTypedRuleContext(Swift5Parser.Range_operatorContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_closure_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClosure_parameter" ):
                listener.enterClosure_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClosure_parameter" ):
                listener.exitClosure_parameter(self)




    def closure_parameter(self):

        localctx = Swift5Parser.Closure_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 452, self.RULE_closure_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2271
            localctx.closure_parameter_name = self.identifier()
            self.state = 2276
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==146:
                self.state = 2272
                self.type_annotation()
                self.state = 2274
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,270,self._ctx)
                if la_ == 1:
                    self.state = 2273
                    self.range_operator()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Capture_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(Swift5Parser.LBRACK, 0)

        def capture_list_items(self):
            return self.getTypedRuleContext(Swift5Parser.Capture_list_itemsContext,0)


        def RBRACK(self):
            return self.getToken(Swift5Parser.RBRACK, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_capture_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCapture_list" ):
                listener.enterCapture_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCapture_list" ):
                listener.exitCapture_list(self)




    def capture_list(self):

        localctx = Swift5Parser.Capture_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 454, self.RULE_capture_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2278
            self.match(Swift5Parser.LBRACK)
            self.state = 2279
            self.capture_list_items()
            self.state = 2280
            self.match(Swift5Parser.RBRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Capture_list_itemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def capture_list_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Capture_list_itemContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Capture_list_itemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.COMMA)
            else:
                return self.getToken(Swift5Parser.COMMA, i)

        def getRuleIndex(self):
            return Swift5Parser.RULE_capture_list_items

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCapture_list_items" ):
                listener.enterCapture_list_items(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCapture_list_items" ):
                listener.exitCapture_list_items(self)




    def capture_list_items(self):

        localctx = Swift5Parser.Capture_list_itemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 456, self.RULE_capture_list_items)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2282
            self.capture_list_item()
            self.state = 2287
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==145:
                self.state = 2283
                self.match(Swift5Parser.COMMA)
                self.state = 2284
                self.capture_list_item()
                self.state = 2289
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Capture_list_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Swift5Parser.IdentifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(Swift5Parser.ExpressionContext,0)


        def self_expression(self):
            return self.getTypedRuleContext(Swift5Parser.Self_expressionContext,0)


        def capture_specifier(self):
            return self.getTypedRuleContext(Swift5Parser.Capture_specifierContext,0)


        def EQUAL(self):
            return self.getToken(Swift5Parser.EQUAL, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_capture_list_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCapture_list_item" ):
                listener.enterCapture_list_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCapture_list_item" ):
                listener.exitCapture_list_item(self)




    def capture_list_item(self):

        localctx = Swift5Parser.Capture_list_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 458, self.RULE_capture_list_item)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2291
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,273,self._ctx)
            if la_ == 1:
                self.state = 2290
                self.capture_specifier()


            self.state = 2300
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,275,self._ctx)
            if la_ == 1:
                self.state = 2293
                self.identifier()
                self.state = 2295
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,274,self._ctx)
                if la_ == 1:
                    self.state = 2294
                    self.match(Swift5Parser.EQUAL)


                self.state = 2297
                self.expression()
                pass

            elif la_ == 2:
                self.state = 2299
                self.self_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Capture_specifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WEAK(self):
            return self.getToken(Swift5Parser.WEAK, 0)

        def UNOWNED(self):
            return self.getToken(Swift5Parser.UNOWNED, 0)

        def LPAREN(self):
            return self.getToken(Swift5Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(Swift5Parser.RPAREN, 0)

        def SAFE(self):
            return self.getToken(Swift5Parser.SAFE, 0)

        def UNSAFE(self):
            return self.getToken(Swift5Parser.UNSAFE, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_capture_specifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCapture_specifier" ):
                listener.enterCapture_specifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCapture_specifier" ):
                listener.exitCapture_specifier(self)




    def capture_specifier(self):

        localctx = Swift5Parser.Capture_specifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 460, self.RULE_capture_specifier)
        self._la = 0 # Token type
        try:
            self.state = 2309
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [73]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2302
                self.match(Swift5Parser.WEAK)
                pass
            elif token in [74]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2303
                self.match(Swift5Parser.UNOWNED)
                self.state = 2307
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==140:
                    self.state = 2304
                    self.match(Swift5Parser.LPAREN)
                    self.state = 2305
                    _la = self._input.LA(1)
                    if not(_la==75 or _la==76):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2306
                    self.match(Swift5Parser.RPAREN)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Implicit_member_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.DOT)
            else:
                return self.getToken(Swift5Parser.DOT, i)

        def identifier(self):
            return self.getTypedRuleContext(Swift5Parser.IdentifierContext,0)


        def keyword(self):
            return self.getTypedRuleContext(Swift5Parser.KeywordContext,0)


        def postfix_expression(self):
            return self.getTypedRuleContext(Swift5Parser.Postfix_expressionContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_implicit_member_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImplicit_member_expression" ):
                listener.enterImplicit_member_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImplicit_member_expression" ):
                listener.exitImplicit_member_expression(self)




    def implicit_member_expression(self):

        localctx = Swift5Parser.Implicit_member_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 462, self.RULE_implicit_member_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2311
            self.match(Swift5Parser.DOT)
            self.state = 2314
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,278,self._ctx)
            if la_ == 1:
                self.state = 2312
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 2313
                self.keyword()
                pass


            self.state = 2318
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,279,self._ctx)
            if la_ == 1:
                self.state = 2316
                self.match(Swift5Parser.DOT)
                self.state = 2317
                self.postfix_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parenthesized_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(Swift5Parser.LPAREN, 0)

        def operator(self):
            return self.getTypedRuleContext(Swift5Parser.OperatorContext,0)


        def RPAREN(self):
            return self.getToken(Swift5Parser.RPAREN, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_parenthesized_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesized_operator" ):
                listener.enterParenthesized_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesized_operator" ):
                listener.exitParenthesized_operator(self)




    def parenthesized_operator(self):

        localctx = Swift5Parser.Parenthesized_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 464, self.RULE_parenthesized_operator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2320
            self.match(Swift5Parser.LPAREN)
            self.state = 2321
            self.operator()
            self.state = 2322
            self.match(Swift5Parser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parenthesized_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(Swift5Parser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(Swift5Parser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(Swift5Parser.RPAREN, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_parenthesized_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesized_expression" ):
                listener.enterParenthesized_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesized_expression" ):
                listener.exitParenthesized_expression(self)




    def parenthesized_expression(self):

        localctx = Swift5Parser.Parenthesized_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 466, self.RULE_parenthesized_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2324
            self.match(Swift5Parser.LPAREN)
            self.state = 2325
            self.expression()
            self.state = 2326
            self.match(Swift5Parser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tuple_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(Swift5Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(Swift5Parser.RPAREN, 0)

        def tuple_element(self):
            return self.getTypedRuleContext(Swift5Parser.Tuple_elementContext,0)


        def COMMA(self):
            return self.getToken(Swift5Parser.COMMA, 0)

        def tuple_element_list(self):
            return self.getTypedRuleContext(Swift5Parser.Tuple_element_listContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_tuple_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTuple_expression" ):
                listener.enterTuple_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTuple_expression" ):
                listener.exitTuple_expression(self)




    def tuple_expression(self):

        localctx = Swift5Parser.Tuple_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 468, self.RULE_tuple_expression)
        try:
            self.state = 2336
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,280,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2328
                self.match(Swift5Parser.LPAREN)
                self.state = 2329
                self.match(Swift5Parser.RPAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2330
                self.match(Swift5Parser.LPAREN)
                self.state = 2331
                self.tuple_element()
                self.state = 2332
                self.match(Swift5Parser.COMMA)
                self.state = 2333
                self.tuple_element_list()
                self.state = 2334
                self.match(Swift5Parser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tuple_element_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tuple_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Tuple_elementContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Tuple_elementContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.COMMA)
            else:
                return self.getToken(Swift5Parser.COMMA, i)

        def getRuleIndex(self):
            return Swift5Parser.RULE_tuple_element_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTuple_element_list" ):
                listener.enterTuple_element_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTuple_element_list" ):
                listener.exitTuple_element_list(self)




    def tuple_element_list(self):

        localctx = Swift5Parser.Tuple_element_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 470, self.RULE_tuple_element_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2338
            self.tuple_element()
            self.state = 2343
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==145:
                self.state = 2339
                self.match(Swift5Parser.COMMA)
                self.state = 2340
                self.tuple_element()
                self.state = 2345
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tuple_elementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(Swift5Parser.ExpressionContext,0)


        def identifier(self):
            return self.getTypedRuleContext(Swift5Parser.IdentifierContext,0)


        def COLON(self):
            return self.getToken(Swift5Parser.COLON, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_tuple_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTuple_element" ):
                listener.enterTuple_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTuple_element" ):
                listener.exitTuple_element(self)




    def tuple_element(self):

        localctx = Swift5Parser.Tuple_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 472, self.RULE_tuple_element)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2349
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,282,self._ctx)
            if la_ == 1:
                self.state = 2346
                self.identifier()
                self.state = 2347
                self.match(Swift5Parser.COLON)


            self.state = 2351
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Wildcard_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDERSCORE(self):
            return self.getToken(Swift5Parser.UNDERSCORE, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_wildcard_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWildcard_expression" ):
                listener.enterWildcard_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWildcard_expression" ):
                listener.exitWildcard_expression(self)




    def wildcard_expression(self):

        localctx = Swift5Parser.Wildcard_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 474, self.RULE_wildcard_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2353
            self.match(Swift5Parser.UNDERSCORE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Key_path_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BACKSLASH(self):
            return self.getToken(Swift5Parser.BACKSLASH, 0)

        def DOT(self):
            return self.getToken(Swift5Parser.DOT, 0)

        def key_path_components(self):
            return self.getTypedRuleContext(Swift5Parser.Key_path_componentsContext,0)


        def type_(self):
            return self.getTypedRuleContext(Swift5Parser.TypeContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_key_path_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKey_path_expression" ):
                listener.enterKey_path_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKey_path_expression" ):
                listener.exitKey_path_expression(self)




    def key_path_expression(self):

        localctx = Swift5Parser.Key_path_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 476, self.RULE_key_path_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2355
            self.match(Swift5Parser.BACKSLASH)
            self.state = 2357
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -576599273992204954) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 3940649437527807) != 0) or ((((_la - 135)) & ~0x3f) == 0 and ((1 << (_la - 135)) & 1074004071) != 0):
                self.state = 2356
                self.type_(0)


            self.state = 2359
            self.match(Swift5Parser.DOT)
            self.state = 2360
            self.key_path_components()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Key_path_componentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def key_path_component(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Key_path_componentContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Key_path_componentContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.DOT)
            else:
                return self.getToken(Swift5Parser.DOT, i)

        def getRuleIndex(self):
            return Swift5Parser.RULE_key_path_components

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKey_path_components" ):
                listener.enterKey_path_components(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKey_path_components" ):
                listener.exitKey_path_components(self)




    def key_path_components(self):

        localctx = Swift5Parser.Key_path_componentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 478, self.RULE_key_path_components)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2362
            self.key_path_component()
            self.state = 2367
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,284,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2363
                    self.match(Swift5Parser.DOT)
                    self.state = 2364
                    self.key_path_component() 
                self.state = 2369
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,284,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Key_path_componentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Swift5Parser.IdentifierContext,0)


        def key_path_postfixes(self):
            return self.getTypedRuleContext(Swift5Parser.Key_path_postfixesContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_key_path_component

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKey_path_component" ):
                listener.enterKey_path_component(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKey_path_component" ):
                listener.exitKey_path_component(self)




    def key_path_component(self):

        localctx = Swift5Parser.Key_path_componentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 480, self.RULE_key_path_component)
        try:
            self.state = 2375
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,286,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2370
                self.identifier()
                self.state = 2372
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,285,self._ctx)
                if la_ == 1:
                    self.state = 2371
                    self.key_path_postfixes()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2374
                self.key_path_postfixes()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Key_path_postfixesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def key_path_postfix(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Key_path_postfixContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Key_path_postfixContext,i)


        def getRuleIndex(self):
            return Swift5Parser.RULE_key_path_postfixes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKey_path_postfixes" ):
                listener.enterKey_path_postfixes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKey_path_postfixes" ):
                listener.exitKey_path_postfixes(self)




    def key_path_postfixes(self):

        localctx = Swift5Parser.Key_path_postfixesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 482, self.RULE_key_path_postfixes)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2378 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2377
                    self.key_path_postfix()

                else:
                    raise NoViableAltException(self)
                self.state = 2380 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,287,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Key_path_postfixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUESTION(self):
            return self.getToken(Swift5Parser.QUESTION, 0)

        def BANG(self):
            return self.getToken(Swift5Parser.BANG, 0)

        def SELF(self):
            return self.getToken(Swift5Parser.SELF, 0)

        def LBRACK(self):
            return self.getToken(Swift5Parser.LBRACK, 0)

        def function_call_argument_list(self):
            return self.getTypedRuleContext(Swift5Parser.Function_call_argument_listContext,0)


        def RBRACK(self):
            return self.getToken(Swift5Parser.RBRACK, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_key_path_postfix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKey_path_postfix" ):
                listener.enterKey_path_postfix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKey_path_postfix" ):
                listener.exitKey_path_postfix(self)




    def key_path_postfix(self):

        localctx = Swift5Parser.Key_path_postfixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 484, self.RULE_key_path_postfix)
        try:
            self.state = 2389
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [152]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2382
                self.match(Swift5Parser.QUESTION)
                pass
            elif token in [151]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2383
                self.match(Swift5Parser.BANG)
                pass
            elif token in [95]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2384
                self.match(Swift5Parser.SELF)
                pass
            elif token in [141]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2385
                self.match(Swift5Parser.LBRACK)
                self.state = 2386
                self.function_call_argument_list()
                self.state = 2387
                self.match(Swift5Parser.RBRACK)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Selector_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HASH_SELECTOR(self):
            return self.getToken(Swift5Parser.HASH_SELECTOR, 0)

        def LPAREN(self):
            return self.getToken(Swift5Parser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(Swift5Parser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(Swift5Parser.RPAREN, 0)

        def COLON(self):
            return self.getToken(Swift5Parser.COLON, 0)

        def GETTER(self):
            return self.getToken(Swift5Parser.GETTER, 0)

        def SETTER(self):
            return self.getToken(Swift5Parser.SETTER, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_selector_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelector_expression" ):
                listener.enterSelector_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelector_expression" ):
                listener.exitSelector_expression(self)




    def selector_expression(self):

        localctx = Swift5Parser.Selector_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 486, self.RULE_selector_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2391
            self.match(Swift5Parser.HASH_SELECTOR)
            self.state = 2392
            self.match(Swift5Parser.LPAREN)
            self.state = 2395
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,289,self._ctx)
            if la_ == 1:
                self.state = 2393
                _la = self._input.LA(1)
                if not(_la==135 or _la==136):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2394
                self.match(Swift5Parser.COLON)


            self.state = 2397
            self.expression()
            self.state = 2398
            self.match(Swift5Parser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Key_path_string_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HASH_KEYPATH(self):
            return self.getToken(Swift5Parser.HASH_KEYPATH, 0)

        def LPAREN(self):
            return self.getToken(Swift5Parser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(Swift5Parser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(Swift5Parser.RPAREN, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_key_path_string_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKey_path_string_expression" ):
                listener.enterKey_path_string_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKey_path_string_expression" ):
                listener.exitKey_path_string_expression(self)




    def key_path_string_expression(self):

        localctx = Swift5Parser.Key_path_string_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 488, self.RULE_key_path_string_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2400
            self.match(Swift5Parser.HASH_KEYPATH)
            self.state = 2401
            self.match(Swift5Parser.LPAREN)
            self.state = 2402
            self.expression()
            self.state = 2403
            self.match(Swift5Parser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Postfix_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primary_expression(self):
            return self.getTypedRuleContext(Swift5Parser.Primary_expressionContext,0)


        def function_call_suffix(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Function_call_suffixContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Function_call_suffixContext,i)


        def initializer_suffix(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Initializer_suffixContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Initializer_suffixContext,i)


        def explicit_member_suffix(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Explicit_member_suffixContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Explicit_member_suffixContext,i)


        def postfix_self_suffix(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Postfix_self_suffixContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Postfix_self_suffixContext,i)


        def subscript_suffix(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Subscript_suffixContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Subscript_suffixContext,i)


        def forced_value_suffix(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Forced_value_suffixContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Forced_value_suffixContext,i)


        def optional_chaining_suffix(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Optional_chaining_suffixContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Optional_chaining_suffixContext,i)


        def postfix_operator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Postfix_operatorContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Postfix_operatorContext,i)


        def getRuleIndex(self):
            return Swift5Parser.RULE_postfix_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfix_expression" ):
                listener.enterPostfix_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfix_expression" ):
                listener.exitPostfix_expression(self)




    def postfix_expression(self):

        localctx = Swift5Parser.Postfix_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 490, self.RULE_postfix_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2405
            self.primary_expression()
            self.state = 2415
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,291,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2413
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,290,self._ctx)
                    if la_ == 1:
                        self.state = 2406
                        self.function_call_suffix()
                        pass

                    elif la_ == 2:
                        self.state = 2407
                        self.initializer_suffix()
                        pass

                    elif la_ == 3:
                        self.state = 2408
                        self.explicit_member_suffix()
                        pass

                    elif la_ == 4:
                        self.state = 2409
                        self.postfix_self_suffix()
                        pass

                    elif la_ == 5:
                        self.state = 2410
                        self.subscript_suffix()
                        pass

                    elif la_ == 6:
                        self.state = 2411
                        self.forced_value_suffix()
                        pass

                    elif la_ == 7:
                        self.state = 2412
                        self.optional_chaining_suffix()
                        pass

             
                self.state = 2417
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,291,self._ctx)

            self.state = 2421
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,292,self._ctx)
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1+1:
                    self.state = 2418
                    self.postfix_operator() 
                self.state = 2423
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,292,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_call_suffixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def trailing_closures(self):
            return self.getTypedRuleContext(Swift5Parser.Trailing_closuresContext,0)


        def function_call_argument_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Function_call_argument_clauseContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_function_call_suffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_call_suffix" ):
                listener.enterFunction_call_suffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_call_suffix" ):
                listener.exitFunction_call_suffix(self)




    def function_call_suffix(self):

        localctx = Swift5Parser.Function_call_suffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 492, self.RULE_function_call_suffix)
        self._la = 0 # Token type
        try:
            self.state = 2429
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,294,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2425
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==140:
                    self.state = 2424
                    self.function_call_argument_clause()


                self.state = 2427
                self.trailing_closures()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2428
                self.function_call_argument_clause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Initializer_suffixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(Swift5Parser.DOT, 0)

        def INIT(self):
            return self.getToken(Swift5Parser.INIT, 0)

        def LPAREN(self):
            return self.getToken(Swift5Parser.LPAREN, 0)

        def argument_names(self):
            return self.getTypedRuleContext(Swift5Parser.Argument_namesContext,0)


        def RPAREN(self):
            return self.getToken(Swift5Parser.RPAREN, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_initializer_suffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializer_suffix" ):
                listener.enterInitializer_suffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializer_suffix" ):
                listener.exitInitializer_suffix(self)




    def initializer_suffix(self):

        localctx = Swift5Parser.Initializer_suffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 494, self.RULE_initializer_suffix)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2431
            self.match(Swift5Parser.DOT)
            self.state = 2432
            self.match(Swift5Parser.INIT)
            self.state = 2437
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,295,self._ctx)
            if la_ == 1:
                self.state = 2433
                self.match(Swift5Parser.LPAREN)
                self.state = 2434
                self.argument_names()
                self.state = 2435
                self.match(Swift5Parser.RPAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Explicit_member_suffixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(Swift5Parser.DOT, 0)

        def Decimal_digits(self):
            return self.getToken(Swift5Parser.Decimal_digits, 0)

        def identifier(self):
            return self.getTypedRuleContext(Swift5Parser.IdentifierContext,0)


        def generic_argument_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Generic_argument_clauseContext,0)


        def LPAREN(self):
            return self.getToken(Swift5Parser.LPAREN, 0)

        def argument_names(self):
            return self.getTypedRuleContext(Swift5Parser.Argument_namesContext,0)


        def RPAREN(self):
            return self.getToken(Swift5Parser.RPAREN, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_explicit_member_suffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicit_member_suffix" ):
                listener.enterExplicit_member_suffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicit_member_suffix" ):
                listener.exitExplicit_member_suffix(self)




    def explicit_member_suffix(self):

        localctx = Swift5Parser.Explicit_member_suffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 496, self.RULE_explicit_member_suffix)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2439
            self.match(Swift5Parser.DOT)
            self.state = 2449
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [172]:
                self.state = 2440
                self.match(Swift5Parser.Decimal_digits)
                pass
            elif token in [1, 2, 5, 6, 8, 10, 11, 14, 17, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 41, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 85, 86, 87, 88, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 135, 136, 137, 165]:
                self.state = 2441
                self.identifier()
                self.state = 2447
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,296,self._ctx)
                if la_ == 1:
                    self.state = 2442
                    self.generic_argument_clause()

                elif la_ == 2:
                    self.state = 2443
                    self.match(Swift5Parser.LPAREN)
                    self.state = 2444
                    self.argument_names()
                    self.state = 2445
                    self.match(Swift5Parser.RPAREN)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Postfix_self_suffixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(Swift5Parser.DOT, 0)

        def SELF(self):
            return self.getToken(Swift5Parser.SELF, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_postfix_self_suffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfix_self_suffix" ):
                listener.enterPostfix_self_suffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfix_self_suffix" ):
                listener.exitPostfix_self_suffix(self)




    def postfix_self_suffix(self):

        localctx = Swift5Parser.Postfix_self_suffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 498, self.RULE_postfix_self_suffix)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2451
            self.match(Swift5Parser.DOT)
            self.state = 2452
            self.match(Swift5Parser.SELF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Subscript_suffixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(Swift5Parser.LBRACK, 0)

        def function_call_argument_list(self):
            return self.getTypedRuleContext(Swift5Parser.Function_call_argument_listContext,0)


        def RBRACK(self):
            return self.getToken(Swift5Parser.RBRACK, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_subscript_suffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscript_suffix" ):
                listener.enterSubscript_suffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscript_suffix" ):
                listener.exitSubscript_suffix(self)




    def subscript_suffix(self):

        localctx = Swift5Parser.Subscript_suffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 500, self.RULE_subscript_suffix)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2454
            self.match(Swift5Parser.LBRACK)
            self.state = 2455
            self.function_call_argument_list()
            self.state = 2456
            self.match(Swift5Parser.RBRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Forced_value_suffixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BANG(self):
            return self.getToken(Swift5Parser.BANG, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_forced_value_suffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForced_value_suffix" ):
                listener.enterForced_value_suffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForced_value_suffix" ):
                listener.exitForced_value_suffix(self)




    def forced_value_suffix(self):

        localctx = Swift5Parser.Forced_value_suffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 502, self.RULE_forced_value_suffix)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2458
            if not !this.isBinaryOp(_input):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "!this.isBinaryOp(_input)")
            self.state = 2459
            self.match(Swift5Parser.BANG)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Optional_chaining_suffixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUESTION(self):
            return self.getToken(Swift5Parser.QUESTION, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_optional_chaining_suffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptional_chaining_suffix" ):
                listener.enterOptional_chaining_suffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptional_chaining_suffix" ):
                listener.exitOptional_chaining_suffix(self)




    def optional_chaining_suffix(self):

        localctx = Swift5Parser.Optional_chaining_suffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 504, self.RULE_optional_chaining_suffix)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2461
            if not !this.isBinaryOp(_input):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "!this.isBinaryOp(_input)")
            self.state = 2462
            self.match(Swift5Parser.QUESTION)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_call_argument_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(Swift5Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(Swift5Parser.RPAREN, 0)

        def function_call_argument_list(self):
            return self.getTypedRuleContext(Swift5Parser.Function_call_argument_listContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_function_call_argument_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_call_argument_clause" ):
                listener.enterFunction_call_argument_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_call_argument_clause" ):
                listener.exitFunction_call_argument_clause(self)




    def function_call_argument_clause(self):

        localctx = Swift5Parser.Function_call_argument_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 506, self.RULE_function_call_argument_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2464
            self.match(Swift5Parser.LPAREN)
            self.state = 2466
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,298,self._ctx)
            if la_ == 1:
                self.state = 2465
                self.function_call_argument_list()


            self.state = 2468
            self.match(Swift5Parser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_call_argument_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_call_argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Function_call_argumentContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Function_call_argumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.COMMA)
            else:
                return self.getToken(Swift5Parser.COMMA, i)

        def getRuleIndex(self):
            return Swift5Parser.RULE_function_call_argument_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_call_argument_list" ):
                listener.enterFunction_call_argument_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_call_argument_list" ):
                listener.exitFunction_call_argument_list(self)




    def function_call_argument_list(self):

        localctx = Swift5Parser.Function_call_argument_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 508, self.RULE_function_call_argument_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2470
            self.function_call_argument()
            self.state = 2475
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==145:
                self.state = 2471
                self.match(Swift5Parser.COMMA)
                self.state = 2472
                self.function_call_argument()
                self.state = 2477
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_call_argumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Swift5Parser.IdentifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(Swift5Parser.ExpressionContext,0)


        def operator(self):
            return self.getTypedRuleContext(Swift5Parser.OperatorContext,0)


        def argument_name(self):
            return self.getTypedRuleContext(Swift5Parser.Argument_nameContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_function_call_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_call_argument" ):
                listener.enterFunction_call_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_call_argument" ):
                listener.exitFunction_call_argument(self)




    def function_call_argument(self):

        localctx = Swift5Parser.Function_call_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 510, self.RULE_function_call_argument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2479
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,300,self._ctx)
            if la_ == 1:
                self.state = 2478
                self.argument_name()


            self.state = 2484
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,301,self._ctx)
            if la_ == 1:
                self.state = 2481
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 2482
                self.expression()
                pass

            elif la_ == 3:
                self.state = 2483
                self.operator()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Trailing_closuresContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def closure_expression(self):
            return self.getTypedRuleContext(Swift5Parser.Closure_expressionContext,0)


        def labeled_trailing_closures(self):
            return self.getTypedRuleContext(Swift5Parser.Labeled_trailing_closuresContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_trailing_closures

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrailing_closures" ):
                listener.enterTrailing_closures(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrailing_closures" ):
                listener.exitTrailing_closures(self)




    def trailing_closures(self):

        localctx = Swift5Parser.Trailing_closuresContext(self, self._ctx, self.state)
        self.enterRule(localctx, 512, self.RULE_trailing_closures)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2486
            self.closure_expression()
            self.state = 2488
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,302,self._ctx)
            if la_ == 1:
                self.state = 2487
                self.labeled_trailing_closures()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Labeled_trailing_closuresContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labeled_trailing_closure(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Labeled_trailing_closureContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Labeled_trailing_closureContext,i)


        def getRuleIndex(self):
            return Swift5Parser.RULE_labeled_trailing_closures

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabeled_trailing_closures" ):
                listener.enterLabeled_trailing_closures(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabeled_trailing_closures" ):
                listener.exitLabeled_trailing_closures(self)




    def labeled_trailing_closures(self):

        localctx = Swift5Parser.Labeled_trailing_closuresContext(self, self._ctx, self.state)
        self.enterRule(localctx, 514, self.RULE_labeled_trailing_closures)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2491 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2490
                    self.labeled_trailing_closure()

                else:
                    raise NoViableAltException(self)
                self.state = 2493 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,303,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Labeled_trailing_closureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Swift5Parser.IdentifierContext,0)


        def COLON(self):
            return self.getToken(Swift5Parser.COLON, 0)

        def closure_expression(self):
            return self.getTypedRuleContext(Swift5Parser.Closure_expressionContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_labeled_trailing_closure

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabeled_trailing_closure" ):
                listener.enterLabeled_trailing_closure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabeled_trailing_closure" ):
                listener.exitLabeled_trailing_closure(self)




    def labeled_trailing_closure(self):

        localctx = Swift5Parser.Labeled_trailing_closureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 516, self.RULE_labeled_trailing_closure)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2495
            self.identifier()
            self.state = 2496
            self.match(Swift5Parser.COLON)
            self.state = 2497
            self.closure_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Argument_namesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Argument_nameContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Argument_nameContext,i)


        def getRuleIndex(self):
            return Swift5Parser.RULE_argument_names

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument_names" ):
                listener.enterArgument_names(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument_names" ):
                listener.exitArgument_names(self)




    def argument_names(self):

        localctx = Swift5Parser.Argument_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 518, self.RULE_argument_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2500 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2499
                self.argument_name()
                self.state = 2502 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -576599273992204954) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 3940649437003519) != 0) or ((((_la - 135)) & ~0x3f) == 0 and ((1 << (_la - 135)) & 1073741831) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Argument_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Swift5Parser.IdentifierContext,0)


        def COLON(self):
            return self.getToken(Swift5Parser.COLON, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_argument_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument_name" ):
                listener.enterArgument_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument_name" ):
                listener.exitArgument_name(self)




    def argument_name(self):

        localctx = Swift5Parser.Argument_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 520, self.RULE_argument_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2504
            self.identifier()
            self.state = 2505
            self.match(Swift5Parser.COLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_type(self):
            return self.getTypedRuleContext(Swift5Parser.Function_typeContext,0)


        def array_type(self):
            return self.getTypedRuleContext(Swift5Parser.Array_typeContext,0)


        def dictionary_type(self):
            return self.getTypedRuleContext(Swift5Parser.Dictionary_typeContext,0)


        def protocol_composition_type(self):
            return self.getTypedRuleContext(Swift5Parser.Protocol_composition_typeContext,0)


        def type_identifier(self):
            return self.getTypedRuleContext(Swift5Parser.Type_identifierContext,0)


        def tuple_type(self):
            return self.getTypedRuleContext(Swift5Parser.Tuple_typeContext,0)


        def opaque_type(self):
            return self.getTypedRuleContext(Swift5Parser.Opaque_typeContext,0)


        def any_type(self):
            return self.getTypedRuleContext(Swift5Parser.Any_typeContext,0)


        def self_type(self):
            return self.getTypedRuleContext(Swift5Parser.Self_typeContext,0)


        def LPAREN(self):
            return self.getToken(Swift5Parser.LPAREN, 0)

        def type_(self):
            return self.getTypedRuleContext(Swift5Parser.TypeContext,0)


        def RPAREN(self):
            return self.getToken(Swift5Parser.RPAREN, 0)

        def QUESTION(self):
            return self.getToken(Swift5Parser.QUESTION, 0)

        def BANG(self):
            return self.getToken(Swift5Parser.BANG, 0)

        def DOT(self):
            return self.getToken(Swift5Parser.DOT, 0)

        def TYPE(self):
            return self.getToken(Swift5Parser.TYPE, 0)

        def PROTOCOL(self):
            return self.getToken(Swift5Parser.PROTOCOL, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType" ):
                listener.enterType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType" ):
                listener.exitType(self)



    def type_(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = Swift5Parser.TypeContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 522
        self.enterRecursionRule(localctx, 522, self.RULE_type, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2521
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,305,self._ctx)
            if la_ == 1:
                self.state = 2508
                self.function_type()
                pass

            elif la_ == 2:
                self.state = 2509
                self.array_type()
                pass

            elif la_ == 3:
                self.state = 2510
                self.dictionary_type()
                pass

            elif la_ == 4:
                self.state = 2511
                self.protocol_composition_type()
                pass

            elif la_ == 5:
                self.state = 2512
                self.type_identifier()
                pass

            elif la_ == 6:
                self.state = 2513
                self.tuple_type()
                pass

            elif la_ == 7:
                self.state = 2514
                self.opaque_type()
                pass

            elif la_ == 8:
                self.state = 2515
                self.any_type()
                pass

            elif la_ == 9:
                self.state = 2516
                self.self_type()
                pass

            elif la_ == 10:
                self.state = 2517
                self.match(Swift5Parser.LPAREN)
                self.state = 2518
                self.type_(0)
                self.state = 2519
                self.match(Swift5Parser.RPAREN)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 2536
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,307,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = Swift5Parser.TypeContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_type)
                    self.state = 2523
                    if not self.precpred(self._ctx, 4):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                    self.state = 2532
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,306,self._ctx)
                    if la_ == 1:
                        self.state = 2524
                        if not !this.isBinaryOp(_input):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "!this.isBinaryOp(_input)")
                        self.state = 2525
                        self.match(Swift5Parser.QUESTION)
                        pass

                    elif la_ == 2:
                        self.state = 2526
                        if not !this.isBinaryOp(_input):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "!this.isBinaryOp(_input)")
                        self.state = 2527
                        self.match(Swift5Parser.BANG)
                        pass

                    elif la_ == 3:
                        self.state = 2528
                        self.match(Swift5Parser.DOT)
                        self.state = 2529
                        self.match(Swift5Parser.TYPE)
                        pass

                    elif la_ == 4:
                        self.state = 2530
                        self.match(Swift5Parser.DOT)
                        self.state = 2531
                        self.match(Swift5Parser.PROTOCOL)
                        pass

             
                self.state = 2538
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,307,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Type_annotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(Swift5Parser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(Swift5Parser.TypeContext,0)


        def attributes(self):
            return self.getTypedRuleContext(Swift5Parser.AttributesContext,0)


        def INOUT(self):
            return self.getToken(Swift5Parser.INOUT, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_type_annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_annotation" ):
                listener.enterType_annotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_annotation" ):
                listener.exitType_annotation(self)




    def type_annotation(self):

        localctx = Swift5Parser.Type_annotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 524, self.RULE_type_annotation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2539
            self.match(Swift5Parser.COLON)
            self.state = 2541
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,308,self._ctx)
            if la_ == 1:
                self.state = 2540
                self.attributes()


            self.state = 2544
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==91:
                self.state = 2543
                self.match(Swift5Parser.INOUT)


            self.state = 2546
            self.type_(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_identifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_name(self):
            return self.getTypedRuleContext(Swift5Parser.Type_nameContext,0)


        def generic_argument_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Generic_argument_clauseContext,0)


        def DOT(self):
            return self.getToken(Swift5Parser.DOT, 0)

        def type_identifier(self):
            return self.getTypedRuleContext(Swift5Parser.Type_identifierContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_type_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_identifier" ):
                listener.enterType_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_identifier" ):
                listener.exitType_identifier(self)




    def type_identifier(self):

        localctx = Swift5Parser.Type_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 526, self.RULE_type_identifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2548
            self.type_name()
            self.state = 2550
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,310,self._ctx)
            if la_ == 1:
                self.state = 2549
                self.generic_argument_clause()


            self.state = 2554
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,311,self._ctx)
            if la_ == 1:
                self.state = 2552
                self.match(Swift5Parser.DOT)
                self.state = 2553
                self.type_identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Swift5Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_type_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_name" ):
                listener.enterType_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_name" ):
                listener.exitType_name(self)




    def type_name(self):

        localctx = Swift5Parser.Type_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 528, self.RULE_type_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2556
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tuple_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(Swift5Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(Swift5Parser.RPAREN, 0)

        def tuple_type_element_list(self):
            return self.getTypedRuleContext(Swift5Parser.Tuple_type_element_listContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_tuple_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTuple_type" ):
                listener.enterTuple_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTuple_type" ):
                listener.exitTuple_type(self)




    def tuple_type(self):

        localctx = Swift5Parser.Tuple_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 530, self.RULE_tuple_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2558
            self.match(Swift5Parser.LPAREN)
            self.state = 2560
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -576599273992204954) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 3940649437527807) != 0) or ((((_la - 135)) & ~0x3f) == 0 and ((1 << (_la - 135)) & 1074004071) != 0):
                self.state = 2559
                self.tuple_type_element_list()


            self.state = 2562
            self.match(Swift5Parser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tuple_type_element_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tuple_type_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Tuple_type_elementContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Tuple_type_elementContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.COMMA)
            else:
                return self.getToken(Swift5Parser.COMMA, i)

        def getRuleIndex(self):
            return Swift5Parser.RULE_tuple_type_element_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTuple_type_element_list" ):
                listener.enterTuple_type_element_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTuple_type_element_list" ):
                listener.exitTuple_type_element_list(self)




    def tuple_type_element_list(self):

        localctx = Swift5Parser.Tuple_type_element_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 532, self.RULE_tuple_type_element_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2564
            self.tuple_type_element()
            self.state = 2569
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==145:
                self.state = 2565
                self.match(Swift5Parser.COMMA)
                self.state = 2566
                self.tuple_type_element()
                self.state = 2571
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tuple_type_elementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def element_name(self):
            return self.getTypedRuleContext(Swift5Parser.Element_nameContext,0)


        def type_annotation(self):
            return self.getTypedRuleContext(Swift5Parser.Type_annotationContext,0)


        def type_(self):
            return self.getTypedRuleContext(Swift5Parser.TypeContext,0)


        def EQUAL(self):
            return self.getToken(Swift5Parser.EQUAL, 0)

        def expression(self):
            return self.getTypedRuleContext(Swift5Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_tuple_type_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTuple_type_element" ):
                listener.enterTuple_type_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTuple_type_element" ):
                listener.exitTuple_type_element(self)




    def tuple_type_element(self):

        localctx = Swift5Parser.Tuple_type_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 534, self.RULE_tuple_type_element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2576
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,314,self._ctx)
            if la_ == 1:
                self.state = 2572
                self.element_name()
                self.state = 2573
                self.type_annotation()
                pass

            elif la_ == 2:
                self.state = 2575
                self.type_(0)
                pass


            self.state = 2580
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==156:
                self.state = 2578
                self.match(Swift5Parser.EQUAL)
                self.state = 2579
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Element_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.IdentifierContext,i)


        def getRuleIndex(self):
            return Swift5Parser.RULE_element_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElement_name" ):
                listener.enterElement_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElement_name" ):
                listener.exitElement_name(self)




    def element_name(self):

        localctx = Swift5Parser.Element_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 536, self.RULE_element_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2583 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2582
                self.identifier()
                self.state = 2585 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -576599273992204954) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 3940649437003519) != 0) or ((((_la - 135)) & ~0x3f) == 0 and ((1 << (_la - 135)) & 1073741831) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_type_argument_clause(self):
            return self.getTypedRuleContext(Swift5Parser.Function_type_argument_clauseContext,0)


        def arrow_operator(self):
            return self.getTypedRuleContext(Swift5Parser.Arrow_operatorContext,0)


        def type_(self):
            return self.getTypedRuleContext(Swift5Parser.TypeContext,0)


        def attributes(self):
            return self.getTypedRuleContext(Swift5Parser.AttributesContext,0)


        def THROWS(self):
            return self.getToken(Swift5Parser.THROWS, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_function_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_type" ):
                listener.enterFunction_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_type" ):
                listener.exitFunction_type(self)




    def function_type(self):

        localctx = Swift5Parser.Function_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 538, self.RULE_function_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2588
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==153:
                self.state = 2587
                self.attributes()


            self.state = 2590
            self.function_type_argument_clause()
            self.state = 2592
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,318,self._ctx)
            if la_ == 1:
                self.state = 2591
                self.match(Swift5Parser.THROWS)


            self.state = 2594
            self.arrow_operator()
            self.state = 2595
            self.type_(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_type_argument_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(Swift5Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(Swift5Parser.RPAREN, 0)

        def function_type_argument_list(self):
            return self.getTypedRuleContext(Swift5Parser.Function_type_argument_listContext,0)


        def range_operator(self):
            return self.getTypedRuleContext(Swift5Parser.Range_operatorContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_function_type_argument_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_type_argument_clause" ):
                listener.enterFunction_type_argument_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_type_argument_clause" ):
                listener.exitFunction_type_argument_clause(self)




    def function_type_argument_clause(self):

        localctx = Swift5Parser.Function_type_argument_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 540, self.RULE_function_type_argument_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2597
            self.match(Swift5Parser.LPAREN)
            self.state = 2602
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -576599273992204954) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 3940649571745535) != 0) or ((((_la - 135)) & ~0x3f) == 0 and ((1 << (_la - 135)) & 1074004071) != 0):
                self.state = 2598
                self.function_type_argument_list()
                self.state = 2600
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,319,self._ctx)
                if la_ == 1:
                    self.state = 2599
                    self.range_operator()




            self.state = 2604
            self.match(Swift5Parser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_type_argument_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_type_argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Function_type_argumentContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Function_type_argumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.COMMA)
            else:
                return self.getToken(Swift5Parser.COMMA, i)

        def getRuleIndex(self):
            return Swift5Parser.RULE_function_type_argument_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_type_argument_list" ):
                listener.enterFunction_type_argument_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_type_argument_list" ):
                listener.exitFunction_type_argument_list(self)




    def function_type_argument_list(self):

        localctx = Swift5Parser.Function_type_argument_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 542, self.RULE_function_type_argument_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2606
            self.function_type_argument()
            self.state = 2611
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,321,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2607
                    self.match(Swift5Parser.COMMA)
                    self.state = 2608
                    self.function_type_argument() 
                self.state = 2613
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,321,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_type_argumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(Swift5Parser.TypeContext,0)


        def attributes(self):
            return self.getTypedRuleContext(Swift5Parser.AttributesContext,0)


        def INOUT(self):
            return self.getToken(Swift5Parser.INOUT, 0)

        def argument_label(self):
            return self.getTypedRuleContext(Swift5Parser.Argument_labelContext,0)


        def type_annotation(self):
            return self.getTypedRuleContext(Swift5Parser.Type_annotationContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_function_type_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_type_argument" ):
                listener.enterFunction_type_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_type_argument" ):
                listener.exitFunction_type_argument(self)




    def function_type_argument(self):

        localctx = Swift5Parser.Function_type_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 544, self.RULE_function_type_argument)
        self._la = 0 # Token type
        try:
            self.state = 2624
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,324,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2615
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,322,self._ctx)
                if la_ == 1:
                    self.state = 2614
                    self.attributes()


                self.state = 2618
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==91:
                    self.state = 2617
                    self.match(Swift5Parser.INOUT)


                self.state = 2620
                self.type_(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2621
                self.argument_label()
                self.state = 2622
                self.type_annotation()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Argument_labelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.IdentifierContext,i)


        def getRuleIndex(self):
            return Swift5Parser.RULE_argument_label

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument_label" ):
                listener.enterArgument_label(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument_label" ):
                listener.exitArgument_label(self)




    def argument_label(self):

        localctx = Swift5Parser.Argument_labelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 546, self.RULE_argument_label)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2627 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2626
                self.identifier()
                self.state = 2629 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -576599273992204954) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 3940649437003519) != 0) or ((((_la - 135)) & ~0x3f) == 0 and ((1 << (_la - 135)) & 1073741831) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(Swift5Parser.LBRACK, 0)

        def type_(self):
            return self.getTypedRuleContext(Swift5Parser.TypeContext,0)


        def RBRACK(self):
            return self.getToken(Swift5Parser.RBRACK, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_array_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_type" ):
                listener.enterArray_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_type" ):
                listener.exitArray_type(self)




    def array_type(self):

        localctx = Swift5Parser.Array_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 548, self.RULE_array_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2631
            self.match(Swift5Parser.LBRACK)
            self.state = 2632
            self.type_(0)
            self.state = 2633
            self.match(Swift5Parser.RBRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dictionary_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(Swift5Parser.LBRACK, 0)

        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.TypeContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.TypeContext,i)


        def COLON(self):
            return self.getToken(Swift5Parser.COLON, 0)

        def RBRACK(self):
            return self.getToken(Swift5Parser.RBRACK, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_dictionary_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDictionary_type" ):
                listener.enterDictionary_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDictionary_type" ):
                listener.exitDictionary_type(self)




    def dictionary_type(self):

        localctx = Swift5Parser.Dictionary_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 550, self.RULE_dictionary_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2635
            self.match(Swift5Parser.LBRACK)
            self.state = 2636
            self.type_(0)
            self.state = 2637
            self.match(Swift5Parser.COLON)
            self.state = 2638
            self.type_(0)
            self.state = 2639
            self.match(Swift5Parser.RBRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Protocol_composition_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Type_identifierContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Type_identifierContext,i)


        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.AND)
            else:
                return self.getToken(Swift5Parser.AND, i)

        def trailing_composition_and(self):
            return self.getTypedRuleContext(Swift5Parser.Trailing_composition_andContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_protocol_composition_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProtocol_composition_type" ):
                listener.enterProtocol_composition_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProtocol_composition_type" ):
                listener.exitProtocol_composition_type(self)




    def protocol_composition_type(self):

        localctx = Swift5Parser.Protocol_composition_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 552, self.RULE_protocol_composition_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2641
            self.type_identifier()
            self.state = 2646
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,326,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2642
                    self.match(Swift5Parser.AND)
                    self.state = 2643
                    self.type_identifier() 
                self.state = 2648
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,326,self._ctx)

            self.state = 2650
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,327,self._ctx)
            if la_ == 1:
                self.state = 2649
                self.trailing_composition_and()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Trailing_composition_andContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AND(self):
            return self.getToken(Swift5Parser.AND, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_trailing_composition_and

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrailing_composition_and" ):
                listener.enterTrailing_composition_and(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrailing_composition_and" ):
                listener.exitTrailing_composition_and(self)




    def trailing_composition_and(self):

        localctx = Swift5Parser.Trailing_composition_andContext(self, self._ctx, self.state)
        self.enterRule(localctx, 554, self.RULE_trailing_composition_and)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2652
            if not !this.isBinaryOp(_input):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "!this.isBinaryOp(_input)")
            self.state = 2653
            self.match(Swift5Parser.AND)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Opaque_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SOME(self):
            return self.getToken(Swift5Parser.SOME, 0)

        def type_(self):
            return self.getTypedRuleContext(Swift5Parser.TypeContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_opaque_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpaque_type" ):
                listener.enterOpaque_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpaque_type" ):
                listener.exitOpaque_type(self)




    def opaque_type(self):

        localctx = Swift5Parser.Opaque_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 556, self.RULE_opaque_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2655
            self.match(Swift5Parser.SOME)
            self.state = 2656
            self.type_(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Any_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANY(self):
            return self.getToken(Swift5Parser.ANY, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_any_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAny_type" ):
                listener.enterAny_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAny_type" ):
                listener.exitAny_type(self)




    def any_type(self):

        localctx = Swift5Parser.Any_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 558, self.RULE_any_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2658
            self.match(Swift5Parser.ANY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Self_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELF_BIG(self):
            return self.getToken(Swift5Parser.SELF_BIG, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_self_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelf_type" ):
                listener.enterSelf_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelf_type" ):
                listener.exitSelf_type(self)




    def self_type(self):

        localctx = Swift5Parser.Self_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 560, self.RULE_self_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2660
            self.match(Swift5Parser.SELF_BIG)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_inheritance_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(Swift5Parser.COLON, 0)

        def type_inheritance_list(self):
            return self.getTypedRuleContext(Swift5Parser.Type_inheritance_listContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_type_inheritance_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_inheritance_clause" ):
                listener.enterType_inheritance_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_inheritance_clause" ):
                listener.exitType_inheritance_clause(self)




    def type_inheritance_clause(self):

        localctx = Swift5Parser.Type_inheritance_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 562, self.RULE_type_inheritance_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2662
            self.match(Swift5Parser.COLON)
            self.state = 2663
            self.type_inheritance_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_inheritance_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Type_identifierContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Type_identifierContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.COMMA)
            else:
                return self.getToken(Swift5Parser.COMMA, i)

        def getRuleIndex(self):
            return Swift5Parser.RULE_type_inheritance_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_inheritance_list" ):
                listener.enterType_inheritance_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_inheritance_list" ):
                listener.exitType_inheritance_list(self)




    def type_inheritance_list(self):

        localctx = Swift5Parser.Type_inheritance_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 564, self.RULE_type_inheritance_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2665
            self.type_identifier()
            self.state = 2670
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==145:
                self.state = 2666
                self.match(Swift5Parser.COMMA)
                self.state = 2667
                self.type_identifier()
                self.state = 2672
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LINUX(self):
            return self.getToken(Swift5Parser.LINUX, 0)

        def WINDOWS(self):
            return self.getToken(Swift5Parser.WINDOWS, 0)

        def ALPHA(self):
            return self.getToken(Swift5Parser.ALPHA, 0)

        def ARCH(self):
            return self.getToken(Swift5Parser.ARCH, 0)

        def ARM(self):
            return self.getToken(Swift5Parser.ARM, 0)

        def ARM64(self):
            return self.getToken(Swift5Parser.ARM64, 0)

        def ASSIGNMENT(self):
            return self.getToken(Swift5Parser.ASSIGNMENT, 0)

        def BLUE(self):
            return self.getToken(Swift5Parser.BLUE, 0)

        def CAN_IMPORT(self):
            return self.getToken(Swift5Parser.CAN_IMPORT, 0)

        def COMPILER(self):
            return self.getToken(Swift5Parser.COMPILER, 0)

        def FILE(self):
            return self.getToken(Swift5Parser.FILE, 0)

        def GREEN(self):
            return self.getToken(Swift5Parser.GREEN, 0)

        def HIGHER_THAN(self):
            return self.getToken(Swift5Parser.HIGHER_THAN, 0)

        def I386(self):
            return self.getToken(Swift5Parser.I386, 0)

        def I_OS(self):
            return self.getToken(Swift5Parser.I_OS, 0)

        def OSX(self):
            return self.getToken(Swift5Parser.OSX, 0)

        def I_OS_APPLICATION_EXTENSION(self):
            return self.getToken(Swift5Parser.I_OS_APPLICATION_EXTENSION, 0)

        def LINE(self):
            return self.getToken(Swift5Parser.LINE, 0)

        def LOWER_THAN(self):
            return self.getToken(Swift5Parser.LOWER_THAN, 0)

        def MAC_CATALYST(self):
            return self.getToken(Swift5Parser.MAC_CATALYST, 0)

        def MAC_CATALYST_APPLICATION_EXTENSION(self):
            return self.getToken(Swift5Parser.MAC_CATALYST_APPLICATION_EXTENSION, 0)

        def MAC_OS(self):
            return self.getToken(Swift5Parser.MAC_OS, 0)

        def MAC_OS_APPLICATION_EXTENSION(self):
            return self.getToken(Swift5Parser.MAC_OS_APPLICATION_EXTENSION, 0)

        def OS(self):
            return self.getToken(Swift5Parser.OS, 0)

        def PRECEDENCE_GROUP(self):
            return self.getToken(Swift5Parser.PRECEDENCE_GROUP, 0)

        def RED(self):
            return self.getToken(Swift5Parser.RED, 0)

        def RESOURCE_NAME(self):
            return self.getToken(Swift5Parser.RESOURCE_NAME, 0)

        def SAFE(self):
            return self.getToken(Swift5Parser.SAFE, 0)

        def SIMULATOR(self):
            return self.getToken(Swift5Parser.SIMULATOR, 0)

        def SOME(self):
            return self.getToken(Swift5Parser.SOME, 0)

        def SWIFT(self):
            return self.getToken(Swift5Parser.SWIFT, 0)

        def TARGET_ENVIRONMENT(self):
            return self.getToken(Swift5Parser.TARGET_ENVIRONMENT, 0)

        def TV_OS(self):
            return self.getToken(Swift5Parser.TV_OS, 0)

        def UNSAFE(self):
            return self.getToken(Swift5Parser.UNSAFE, 0)

        def WATCH_OS(self):
            return self.getToken(Swift5Parser.WATCH_OS, 0)

        def X86_64(self):
            return self.getToken(Swift5Parser.X86_64, 0)

        def ASSOCIATIVITY(self):
            return self.getToken(Swift5Parser.ASSOCIATIVITY, 0)

        def CONVENIENCE(self):
            return self.getToken(Swift5Parser.CONVENIENCE, 0)

        def DYNAMIC(self):
            return self.getToken(Swift5Parser.DYNAMIC, 0)

        def DID_SET(self):
            return self.getToken(Swift5Parser.DID_SET, 0)

        def FINAL(self):
            return self.getToken(Swift5Parser.FINAL, 0)

        def GET(self):
            return self.getToken(Swift5Parser.GET, 0)

        def INFIX(self):
            return self.getToken(Swift5Parser.INFIX, 0)

        def INDIRECT(self):
            return self.getToken(Swift5Parser.INDIRECT, 0)

        def LAZY(self):
            return self.getToken(Swift5Parser.LAZY, 0)

        def LEFT(self):
            return self.getToken(Swift5Parser.LEFT, 0)

        def MUTATING(self):
            return self.getToken(Swift5Parser.MUTATING, 0)

        def NONE(self):
            return self.getToken(Swift5Parser.NONE, 0)

        def NONMUTATING(self):
            return self.getToken(Swift5Parser.NONMUTATING, 0)

        def OPTIONAL(self):
            return self.getToken(Swift5Parser.OPTIONAL, 0)

        def OVERRIDE(self):
            return self.getToken(Swift5Parser.OVERRIDE, 0)

        def POSTFIX(self):
            return self.getToken(Swift5Parser.POSTFIX, 0)

        def PRECEDENCE(self):
            return self.getToken(Swift5Parser.PRECEDENCE, 0)

        def PREFIX(self):
            return self.getToken(Swift5Parser.PREFIX, 0)

        def PROTOCOL(self):
            return self.getToken(Swift5Parser.PROTOCOL, 0)

        def REQUIRED(self):
            return self.getToken(Swift5Parser.REQUIRED, 0)

        def RIGHT(self):
            return self.getToken(Swift5Parser.RIGHT, 0)

        def SET(self):
            return self.getToken(Swift5Parser.SET, 0)

        def TYPE(self):
            return self.getToken(Swift5Parser.TYPE, 0)

        def UNOWNED(self):
            return self.getToken(Swift5Parser.UNOWNED, 0)

        def WEAK(self):
            return self.getToken(Swift5Parser.WEAK, 0)

        def WILL_SET(self):
            return self.getToken(Swift5Parser.WILL_SET, 0)

        def IN(self):
            return self.getToken(Swift5Parser.IN, 0)

        def FOR(self):
            return self.getToken(Swift5Parser.FOR, 0)

        def GUARD(self):
            return self.getToken(Swift5Parser.GUARD, 0)

        def WHERE(self):
            return self.getToken(Swift5Parser.WHERE, 0)

        def DEFAULT(self):
            return self.getToken(Swift5Parser.DEFAULT, 0)

        def INTERNAL(self):
            return self.getToken(Swift5Parser.INTERNAL, 0)

        def PRIVATE(self):
            return self.getToken(Swift5Parser.PRIVATE, 0)

        def PUBLIC(self):
            return self.getToken(Swift5Parser.PUBLIC, 0)

        def OPEN(self):
            return self.getToken(Swift5Parser.OPEN, 0)

        def AS(self):
            return self.getToken(Swift5Parser.AS, 0)

        def WHILE(self):
            return self.getToken(Swift5Parser.WHILE, 0)

        def SELF(self):
            return self.getToken(Swift5Parser.SELF, 0)

        def SELF_BIG(self):
            return self.getToken(Swift5Parser.SELF_BIG, 0)

        def CLASS(self):
            return self.getToken(Swift5Parser.CLASS, 0)

        def GETTER(self):
            return self.getToken(Swift5Parser.GETTER, 0)

        def SETTER(self):
            return self.getToken(Swift5Parser.SETTER, 0)

        def OPERATOR(self):
            return self.getToken(Swift5Parser.OPERATOR, 0)

        def DO(self):
            return self.getToken(Swift5Parser.DO, 0)

        def CATCH(self):
            return self.getToken(Swift5Parser.CATCH, 0)

        def Identifier(self):
            return self.getToken(Swift5Parser.Identifier, 0)

        def BACKTICK(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.BACKTICK)
            else:
                return self.getToken(Swift5Parser.BACKTICK, i)

        def keyword(self):
            return self.getTypedRuleContext(Swift5Parser.KeywordContext,0)


        def DOLLAR(self):
            return self.getToken(Swift5Parser.DOLLAR, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)




    def identifier(self):

        localctx = Swift5Parser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 566, self.RULE_identifier)
        self._la = 0 # Token type
        try:
            self.state = 2682
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 5, 6, 8, 10, 11, 14, 17, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 41, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 85, 86, 87, 88, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 135, 136]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2673
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & -576599273992204954) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 3940649437003519) != 0) or _la==135 or _la==136):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [137]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2674
                self.match(Swift5Parser.Identifier)
                pass
            elif token in [165]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2675
                self.match(Swift5Parser.BACKTICK)
                self.state = 2679
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 58, 59, 72, 79, 80, 81, 82, 83, 84, 89, 90, 91, 95, 96, 113, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 132, 133, 134, 150]:
                    self.state = 2676
                    self.keyword()
                    pass
                elif token in [137]:
                    self.state = 2677
                    self.match(Swift5Parser.Identifier)
                    pass
                elif token in [166]:
                    self.state = 2678
                    self.match(Swift5Parser.DOLLAR)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2681
                self.match(Swift5Parser.BACKTICK)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Identifier_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.IdentifierContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.COMMA)
            else:
                return self.getToken(Swift5Parser.COMMA, i)

        def getRuleIndex(self):
            return Swift5Parser.RULE_identifier_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier_list" ):
                listener.enterIdentifier_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier_list" ):
                listener.exitIdentifier_list(self)




    def identifier_list(self):

        localctx = Swift5Parser.Identifier_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 568, self.RULE_identifier_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2684
            self.identifier()
            self.state = 2689
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,331,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2685
                    self.match(Swift5Parser.COMMA)
                    self.state = 2686
                    self.identifier() 
                self.state = 2691
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,331,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSOCIATED_TYPE(self):
            return self.getToken(Swift5Parser.ASSOCIATED_TYPE, 0)

        def CLASS(self):
            return self.getToken(Swift5Parser.CLASS, 0)

        def DEINIT(self):
            return self.getToken(Swift5Parser.DEINIT, 0)

        def ENUM(self):
            return self.getToken(Swift5Parser.ENUM, 0)

        def EXTENSION(self):
            return self.getToken(Swift5Parser.EXTENSION, 0)

        def FILE_PRIVATE(self):
            return self.getToken(Swift5Parser.FILE_PRIVATE, 0)

        def FUNC(self):
            return self.getToken(Swift5Parser.FUNC, 0)

        def IMPORT(self):
            return self.getToken(Swift5Parser.IMPORT, 0)

        def INIT(self):
            return self.getToken(Swift5Parser.INIT, 0)

        def INOUT(self):
            return self.getToken(Swift5Parser.INOUT, 0)

        def INTERNAL(self):
            return self.getToken(Swift5Parser.INTERNAL, 0)

        def LET(self):
            return self.getToken(Swift5Parser.LET, 0)

        def OPEN(self):
            return self.getToken(Swift5Parser.OPEN, 0)

        def OPERATOR(self):
            return self.getToken(Swift5Parser.OPERATOR, 0)

        def PRIVATE(self):
            return self.getToken(Swift5Parser.PRIVATE, 0)

        def PROTOCOL(self):
            return self.getToken(Swift5Parser.PROTOCOL, 0)

        def PUBLIC(self):
            return self.getToken(Swift5Parser.PUBLIC, 0)

        def RETHROWS(self):
            return self.getToken(Swift5Parser.RETHROWS, 0)

        def STATIC(self):
            return self.getToken(Swift5Parser.STATIC, 0)

        def STRUCT(self):
            return self.getToken(Swift5Parser.STRUCT, 0)

        def SUBSCRIPT(self):
            return self.getToken(Swift5Parser.SUBSCRIPT, 0)

        def TYPEALIAS(self):
            return self.getToken(Swift5Parser.TYPEALIAS, 0)

        def VAR(self):
            return self.getToken(Swift5Parser.VAR, 0)

        def BREAK(self):
            return self.getToken(Swift5Parser.BREAK, 0)

        def CASE(self):
            return self.getToken(Swift5Parser.CASE, 0)

        def CONTINUE(self):
            return self.getToken(Swift5Parser.CONTINUE, 0)

        def DEFAULT(self):
            return self.getToken(Swift5Parser.DEFAULT, 0)

        def DEFER(self):
            return self.getToken(Swift5Parser.DEFER, 0)

        def DO(self):
            return self.getToken(Swift5Parser.DO, 0)

        def ELSE(self):
            return self.getToken(Swift5Parser.ELSE, 0)

        def FALLTHROUGH(self):
            return self.getToken(Swift5Parser.FALLTHROUGH, 0)

        def FOR(self):
            return self.getToken(Swift5Parser.FOR, 0)

        def GUARD(self):
            return self.getToken(Swift5Parser.GUARD, 0)

        def IF(self):
            return self.getToken(Swift5Parser.IF, 0)

        def IN(self):
            return self.getToken(Swift5Parser.IN, 0)

        def REPEAT(self):
            return self.getToken(Swift5Parser.REPEAT, 0)

        def RETURN(self):
            return self.getToken(Swift5Parser.RETURN, 0)

        def SWITCH(self):
            return self.getToken(Swift5Parser.SWITCH, 0)

        def WHERE(self):
            return self.getToken(Swift5Parser.WHERE, 0)

        def WHILE(self):
            return self.getToken(Swift5Parser.WHILE, 0)

        def AS(self):
            return self.getToken(Swift5Parser.AS, 0)

        def ANY(self):
            return self.getToken(Swift5Parser.ANY, 0)

        def CATCH(self):
            return self.getToken(Swift5Parser.CATCH, 0)

        def FALSE(self):
            return self.getToken(Swift5Parser.FALSE, 0)

        def IS(self):
            return self.getToken(Swift5Parser.IS, 0)

        def NIL(self):
            return self.getToken(Swift5Parser.NIL, 0)

        def SUPER(self):
            return self.getToken(Swift5Parser.SUPER, 0)

        def SELF(self):
            return self.getToken(Swift5Parser.SELF, 0)

        def SELF_BIG(self):
            return self.getToken(Swift5Parser.SELF_BIG, 0)

        def THROW(self):
            return self.getToken(Swift5Parser.THROW, 0)

        def THROWS(self):
            return self.getToken(Swift5Parser.THROWS, 0)

        def TRUE(self):
            return self.getToken(Swift5Parser.TRUE, 0)

        def TRY(self):
            return self.getToken(Swift5Parser.TRY, 0)

        def UNDERSCORE(self):
            return self.getToken(Swift5Parser.UNDERSCORE, 0)

        def AVAILABLE(self):
            return self.getToken(Swift5Parser.AVAILABLE, 0)

        def HASH_COLOR_LITERAL(self):
            return self.getToken(Swift5Parser.HASH_COLOR_LITERAL, 0)

        def HASH_COLUMN(self):
            return self.getToken(Swift5Parser.HASH_COLUMN, 0)

        def HASH_ELSE(self):
            return self.getToken(Swift5Parser.HASH_ELSE, 0)

        def HASH_ELSEIF(self):
            return self.getToken(Swift5Parser.HASH_ELSEIF, 0)

        def HASH_ENDIF(self):
            return self.getToken(Swift5Parser.HASH_ENDIF, 0)

        def ERROR(self):
            return self.getToken(Swift5Parser.ERROR, 0)

        def HASH_FILE(self):
            return self.getToken(Swift5Parser.HASH_FILE, 0)

        def HASH_FILE_ID(self):
            return self.getToken(Swift5Parser.HASH_FILE_ID, 0)

        def HASH_FILE_LITERAL(self):
            return self.getToken(Swift5Parser.HASH_FILE_LITERAL, 0)

        def HASH_FILE_PATH(self):
            return self.getToken(Swift5Parser.HASH_FILE_PATH, 0)

        def HASH_FUNCTION(self):
            return self.getToken(Swift5Parser.HASH_FUNCTION, 0)

        def HASH_IF(self):
            return self.getToken(Swift5Parser.HASH_IF, 0)

        def HASH_IMAGE_LITERAL(self):
            return self.getToken(Swift5Parser.HASH_IMAGE_LITERAL, 0)

        def HASH_LINE(self):
            return self.getToken(Swift5Parser.HASH_LINE, 0)

        def HASH_SELECTOR(self):
            return self.getToken(Swift5Parser.HASH_SELECTOR, 0)

        def SOURCE_LOCATION(self):
            return self.getToken(Swift5Parser.SOURCE_LOCATION, 0)

        def WARNING(self):
            return self.getToken(Swift5Parser.WARNING, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyword" ):
                listener.enterKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyword" ):
                listener.exitKeyword(self)




    def keyword(self):

        localctx = Swift5Parser.KeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 570, self.RULE_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2692
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 864829650812010490) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 8502780703338798977) != 0) or _la==150):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assignment_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUAL(self):
            return self.getToken(Swift5Parser.EQUAL, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_assignment_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment_operator" ):
                listener.enterAssignment_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment_operator" ):
                listener.exitAssignment_operator(self)




    def assignment_operator(self):

        localctx = Swift5Parser.Assignment_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 572, self.RULE_assignment_operator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2694
            if not this.isBinaryOp(_input):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "this.isBinaryOp(_input)")
            self.state = 2695
            self.match(Swift5Parser.EQUAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Negate_prefix_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUB(self):
            return self.getToken(Swift5Parser.SUB, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_negate_prefix_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNegate_prefix_operator" ):
                listener.enterNegate_prefix_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNegate_prefix_operator" ):
                listener.exitNegate_prefix_operator(self)




    def negate_prefix_operator(self):

        localctx = Swift5Parser.Negate_prefix_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 574, self.RULE_negate_prefix_operator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2697
            if not this.isPrefixOp(_input):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "this.isPrefixOp(_input)")
            self.state = 2698
            self.match(Swift5Parser.SUB)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compilation_condition_ANDContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.AND)
            else:
                return self.getToken(Swift5Parser.AND, i)

        def getRuleIndex(self):
            return Swift5Parser.RULE_compilation_condition_AND

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompilation_condition_AND" ):
                listener.enterCompilation_condition_AND(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompilation_condition_AND" ):
                listener.exitCompilation_condition_AND(self)




    def compilation_condition_AND(self):

        localctx = Swift5Parser.Compilation_condition_ANDContext(self, self._ctx, self.state)
        self.enterRule(localctx, 576, self.RULE_compilation_condition_AND)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2700
            if not this.isOperator(_input,"&&"):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "this.isOperator(_input,\"&&\")")
            self.state = 2701
            self.match(Swift5Parser.AND)
            self.state = 2702
            self.match(Swift5Parser.AND)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compilation_condition_ORContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.OR)
            else:
                return self.getToken(Swift5Parser.OR, i)

        def getRuleIndex(self):
            return Swift5Parser.RULE_compilation_condition_OR

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompilation_condition_OR" ):
                listener.enterCompilation_condition_OR(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompilation_condition_OR" ):
                listener.exitCompilation_condition_OR(self)




    def compilation_condition_OR(self):

        localctx = Swift5Parser.Compilation_condition_ORContext(self, self._ctx, self.state)
        self.enterRule(localctx, 578, self.RULE_compilation_condition_OR)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2704
            if not this.isOperator(_input,"||"):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "this.isOperator(_input,\"||\")")
            self.state = 2705
            self.match(Swift5Parser.OR)
            self.state = 2706
            self.match(Swift5Parser.OR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compilation_condition_GEContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GT(self):
            return self.getToken(Swift5Parser.GT, 0)

        def EQUAL(self):
            return self.getToken(Swift5Parser.EQUAL, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_compilation_condition_GE

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompilation_condition_GE" ):
                listener.enterCompilation_condition_GE(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompilation_condition_GE" ):
                listener.exitCompilation_condition_GE(self)




    def compilation_condition_GE(self):

        localctx = Swift5Parser.Compilation_condition_GEContext(self, self._ctx, self.state)
        self.enterRule(localctx, 580, self.RULE_compilation_condition_GE)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2708
            if not this.isOperator(_input,">="):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "this.isOperator(_input,\">=\")")
            self.state = 2709
            self.match(Swift5Parser.GT)
            self.state = 2710
            self.match(Swift5Parser.EQUAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compilation_condition_LContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(Swift5Parser.LT, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_compilation_condition_L

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompilation_condition_L" ):
                listener.enterCompilation_condition_L(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompilation_condition_L" ):
                listener.exitCompilation_condition_L(self)




    def compilation_condition_L(self):

        localctx = Swift5Parser.Compilation_condition_LContext(self, self._ctx, self.state)
        self.enterRule(localctx, 582, self.RULE_compilation_condition_L)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2712
            if not this.isOperator(_input,"<"):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "this.isOperator(_input,\"<\")")
            self.state = 2713
            self.match(Swift5Parser.LT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arrow_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUB(self):
            return self.getToken(Swift5Parser.SUB, 0)

        def GT(self):
            return self.getToken(Swift5Parser.GT, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_arrow_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrow_operator" ):
                listener.enterArrow_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrow_operator" ):
                listener.exitArrow_operator(self)




    def arrow_operator(self):

        localctx = Swift5Parser.Arrow_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 584, self.RULE_arrow_operator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2715
            if not this.isOperator(_input,"->"):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "this.isOperator(_input,\"->\")")
            self.state = 2716
            self.match(Swift5Parser.SUB)
            self.state = 2717
            self.match(Swift5Parser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Range_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.DOT)
            else:
                return self.getToken(Swift5Parser.DOT, i)

        def getRuleIndex(self):
            return Swift5Parser.RULE_range_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRange_operator" ):
                listener.enterRange_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRange_operator" ):
                listener.exitRange_operator(self)




    def range_operator(self):

        localctx = Swift5Parser.Range_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 586, self.RULE_range_operator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2719
            if not this.isOperator(_input,"..."):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "this.isOperator(_input,\"...\")")
            self.state = 2720
            self.match(Swift5Parser.DOT)
            self.state = 2721
            self.match(Swift5Parser.DOT)
            self.state = 2722
            self.match(Swift5Parser.DOT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Same_type_equalsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.EQUAL)
            else:
                return self.getToken(Swift5Parser.EQUAL, i)

        def getRuleIndex(self):
            return Swift5Parser.RULE_same_type_equals

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSame_type_equals" ):
                listener.enterSame_type_equals(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSame_type_equals" ):
                listener.exitSame_type_equals(self)




    def same_type_equals(self):

        localctx = Swift5Parser.Same_type_equalsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 588, self.RULE_same_type_equals)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2724
            if not this.isOperator(_input,"=="):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "this.isOperator(_input,\"==\")")
            self.state = 2725
            self.match(Swift5Parser.EQUAL)
            self.state = 2726
            self.match(Swift5Parser.EQUAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Binary_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def operator(self):
            return self.getTypedRuleContext(Swift5Parser.OperatorContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_binary_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinary_operator" ):
                listener.enterBinary_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinary_operator" ):
                listener.exitBinary_operator(self)




    def binary_operator(self):

        localctx = Swift5Parser.Binary_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 590, self.RULE_binary_operator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2728
            if not this.isBinaryOp(_input):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "this.isBinaryOp(_input)")
            self.state = 2729
            self.operator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Prefix_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def operator(self):
            return self.getTypedRuleContext(Swift5Parser.OperatorContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_prefix_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrefix_operator" ):
                listener.enterPrefix_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrefix_operator" ):
                listener.exitPrefix_operator(self)




    def prefix_operator(self):

        localctx = Swift5Parser.Prefix_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 592, self.RULE_prefix_operator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2731
            if not this.isPrefixOp(_input):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "this.isPrefixOp(_input)")
            self.state = 2732
            self.operator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Postfix_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def operator(self):
            return self.getTypedRuleContext(Swift5Parser.OperatorContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_postfix_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfix_operator" ):
                listener.enterPostfix_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfix_operator" ):
                listener.exitPostfix_operator(self)




    def postfix_operator(self):

        localctx = Swift5Parser.Postfix_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 594, self.RULE_postfix_operator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2734
            if not this.isPostfixOp(_input):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "this.isPostfixOp(_input)")
            self.state = 2735
            self.operator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def operator_head(self):
            return self.getTypedRuleContext(Swift5Parser.Operator_headContext,0)


        def operator_characters(self):
            return self.getTypedRuleContext(Swift5Parser.Operator_charactersContext,0)


        def dot_operator_head(self):
            return self.getTypedRuleContext(Swift5Parser.Dot_operator_headContext,0)


        def dot_operator_characters(self):
            return self.getTypedRuleContext(Swift5Parser.Dot_operator_charactersContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperator" ):
                listener.enterOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperator" ):
                listener.exitOperator(self)




    def operator(self):

        localctx = Swift5Parser.OperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 596, self.RULE_operator)
        try:
            self.state = 2744
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 168]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2737
                self.operator_head()
                self.state = 2739
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,332,self._ctx)
                if la_ == 1:
                    self.state = 2738
                    self.operator_characters()


                pass
            elif token in [138]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2741
                self.dot_operator_head()
                self.state = 2742
                self.dot_operator_characters()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Operator_headContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DIV(self):
            return self.getToken(Swift5Parser.DIV, 0)

        def EQUAL(self):
            return self.getToken(Swift5Parser.EQUAL, 0)

        def SUB(self):
            return self.getToken(Swift5Parser.SUB, 0)

        def ADD(self):
            return self.getToken(Swift5Parser.ADD, 0)

        def BANG(self):
            return self.getToken(Swift5Parser.BANG, 0)

        def MUL(self):
            return self.getToken(Swift5Parser.MUL, 0)

        def MOD(self):
            return self.getToken(Swift5Parser.MOD, 0)

        def AND(self):
            return self.getToken(Swift5Parser.AND, 0)

        def OR(self):
            return self.getToken(Swift5Parser.OR, 0)

        def LT(self):
            return self.getToken(Swift5Parser.LT, 0)

        def GT(self):
            return self.getToken(Swift5Parser.GT, 0)

        def CARET(self):
            return self.getToken(Swift5Parser.CARET, 0)

        def TILDE(self):
            return self.getToken(Swift5Parser.TILDE, 0)

        def QUESTION(self):
            return self.getToken(Swift5Parser.QUESTION, 0)

        def Operator_head_other(self):
            return self.getToken(Swift5Parser.Operator_head_other, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_operator_head

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperator_head" ):
                listener.enterOperator_head(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperator_head" ):
                listener.exitOperator_head(self)




    def operator_head(self):

        localctx = Swift5Parser.Operator_headContext(self, self._ctx, self.state)
        self.enterRule(localctx, 598, self.RULE_operator_head)
        self._la = 0 # Token type
        try:
            self.state = 2748
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2746
                _la = self._input.LA(1)
                if not(((((_la - 148)) & ~0x3f) == 0 and ((1 << (_la - 148)) & 65499) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [168]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2747
                self.match(Swift5Parser.Operator_head_other)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Operator_characterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def operator_head(self):
            return self.getTypedRuleContext(Swift5Parser.Operator_headContext,0)


        def Operator_following_character(self):
            return self.getToken(Swift5Parser.Operator_following_character, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_operator_character

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperator_character" ):
                listener.enterOperator_character(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperator_character" ):
                listener.exitOperator_character(self)




    def operator_character(self):

        localctx = Swift5Parser.Operator_characterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 600, self.RULE_operator_character)
        try:
            self.state = 2752
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 168]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2750
                self.operator_head()
                pass
            elif token in [169]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2751
                self.match(Swift5Parser.Operator_following_character)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Operator_charactersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def operator_character(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Operator_characterContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Operator_characterContext,i)


        def getRuleIndex(self):
            return Swift5Parser.RULE_operator_characters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperator_characters" ):
                listener.enterOperator_characters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperator_characters" ):
                listener.exitOperator_characters(self)




    def operator_characters(self):

        localctx = Swift5Parser.Operator_charactersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 602, self.RULE_operator_characters)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2756 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2754
                    if not _input.get(_input.index()-1).getType()!=WS:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "_input.get(_input.index()-1).getType()!=WS")
                    self.state = 2755
                    self.operator_character()

                else:
                    raise NoViableAltException(self)
                self.state = 2758 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,336,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dot_operator_headContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(Swift5Parser.DOT, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_dot_operator_head

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDot_operator_head" ):
                listener.enterDot_operator_head(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDot_operator_head" ):
                listener.exitDot_operator_head(self)




    def dot_operator_head(self):

        localctx = Swift5Parser.Dot_operator_headContext(self, self._ctx, self.state)
        self.enterRule(localctx, 604, self.RULE_dot_operator_head)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2760
            self.match(Swift5Parser.DOT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dot_operator_characterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(Swift5Parser.DOT, 0)

        def operator_character(self):
            return self.getTypedRuleContext(Swift5Parser.Operator_characterContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_dot_operator_character

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDot_operator_character" ):
                listener.enterDot_operator_character(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDot_operator_character" ):
                listener.exitDot_operator_character(self)




    def dot_operator_character(self):

        localctx = Swift5Parser.Dot_operator_characterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 606, self.RULE_dot_operator_character)
        try:
            self.state = 2764
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [138]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2762
                self.match(Swift5Parser.DOT)
                pass
            elif token in [148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 168, 169]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2763
                self.operator_character()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dot_operator_charactersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dot_operator_character(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Dot_operator_characterContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Dot_operator_characterContext,i)


        def getRuleIndex(self):
            return Swift5Parser.RULE_dot_operator_characters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDot_operator_characters" ):
                listener.enterDot_operator_characters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDot_operator_characters" ):
                listener.exitDot_operator_characters(self)




    def dot_operator_characters(self):

        localctx = Swift5Parser.Dot_operator_charactersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 608, self.RULE_dot_operator_characters)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2768 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2766
                    if not _input.get(_input.index()-1).getType()!=WS:
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "_input.get(_input.index()-1).getType()!=WS")
                    self.state = 2767
                    self.dot_operator_character()

                else:
                    raise NoViableAltException(self)
                self.state = 2770 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,338,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numeric_literal(self):
            return self.getTypedRuleContext(Swift5Parser.Numeric_literalContext,0)


        def string_literal(self):
            return self.getTypedRuleContext(Swift5Parser.String_literalContext,0)


        def boolean_literal(self):
            return self.getTypedRuleContext(Swift5Parser.Boolean_literalContext,0)


        def nil_literal(self):
            return self.getTypedRuleContext(Swift5Parser.Nil_literalContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)




    def literal(self):

        localctx = Swift5Parser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 610, self.RULE_literal)
        try:
            self.state = 2776
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,339,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2772
                self.numeric_literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2773
                self.string_literal()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2774
                self.boolean_literal()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2775
                self.nil_literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Numeric_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integer_literal(self):
            return self.getTypedRuleContext(Swift5Parser.Integer_literalContext,0)


        def negate_prefix_operator(self):
            return self.getTypedRuleContext(Swift5Parser.Negate_prefix_operatorContext,0)


        def Floating_point_literal(self):
            return self.getToken(Swift5Parser.Floating_point_literal, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_numeric_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumeric_literal" ):
                listener.enterNumeric_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumeric_literal" ):
                listener.exitNumeric_literal(self)




    def numeric_literal(self):

        localctx = Swift5Parser.Numeric_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 612, self.RULE_numeric_literal)
        try:
            self.state = 2786
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,342,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2779
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,340,self._ctx)
                if la_ == 1:
                    self.state = 2778
                    self.negate_prefix_operator()


                self.state = 2781
                self.integer_literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2783
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,341,self._ctx)
                if la_ == 1:
                    self.state = 2782
                    self.negate_prefix_operator()


                self.state = 2785
                self.match(Swift5Parser.Floating_point_literal)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Boolean_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(Swift5Parser.TRUE, 0)

        def FALSE(self):
            return self.getToken(Swift5Parser.FALSE, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_boolean_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoolean_literal" ):
                listener.enterBoolean_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoolean_literal" ):
                listener.exitBoolean_literal(self)




    def boolean_literal(self):

        localctx = Swift5Parser.Boolean_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 614, self.RULE_boolean_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2788
            _la = self._input.LA(1)
            if not(_la==84 or _la==89):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Nil_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NIL(self):
            return self.getToken(Swift5Parser.NIL, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_nil_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNil_literal" ):
                listener.enterNil_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNil_literal" ):
                listener.exitNil_literal(self)




    def nil_literal(self):

        localctx = Swift5Parser.Nil_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 616, self.RULE_nil_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2790
            self.match(Swift5Parser.NIL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Integer_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Decimal_digits(self):
            return self.getToken(Swift5Parser.Decimal_digits, 0)

        def Decimal_literal(self):
            return self.getToken(Swift5Parser.Decimal_literal, 0)

        def Binary_literal(self):
            return self.getToken(Swift5Parser.Binary_literal, 0)

        def Octal_literal(self):
            return self.getToken(Swift5Parser.Octal_literal, 0)

        def Hexadecimal_literal(self):
            return self.getToken(Swift5Parser.Hexadecimal_literal, 0)

        def getRuleIndex(self):
            return Swift5Parser.RULE_integer_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteger_literal" ):
                listener.enterInteger_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteger_literal" ):
                listener.exitInteger_literal(self)




    def integer_literal(self):

        localctx = Swift5Parser.Integer_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 618, self.RULE_integer_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2792
            _la = self._input.LA(1)
            if not(((((_la - 170)) & ~0x3f) == 0 and ((1 << (_la - 170)) & 31) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class String_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def extended_string_literal(self):
            return self.getTypedRuleContext(Swift5Parser.Extended_string_literalContext,0)


        def interpolated_string_literal(self):
            return self.getTypedRuleContext(Swift5Parser.Interpolated_string_literalContext,0)


        def static_string_literal(self):
            return self.getTypedRuleContext(Swift5Parser.Static_string_literalContext,0)


        def getRuleIndex(self):
            return Swift5Parser.RULE_string_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString_literal" ):
                listener.enterString_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString_literal" ):
                listener.exitString_literal(self)




    def string_literal(self):

        localctx = Swift5Parser.String_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 620, self.RULE_string_literal)
        try:
            self.state = 2797
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,343,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2794
                self.extended_string_literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2795
                self.interpolated_string_literal()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2796
                self.static_string_literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Extended_string_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Multi_line_extended_string_open(self):
            return self.getToken(Swift5Parser.Multi_line_extended_string_open, 0)

        def Multi_line_extended_string_close(self):
            return self.getToken(Swift5Parser.Multi_line_extended_string_close, 0)

        def Quoted_multi_line_extended_text(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.Quoted_multi_line_extended_text)
            else:
                return self.getToken(Swift5Parser.Quoted_multi_line_extended_text, i)

        def Single_line_extended_string_open(self):
            return self.getToken(Swift5Parser.Single_line_extended_string_open, 0)

        def Single_line_extended_string_close(self):
            return self.getToken(Swift5Parser.Single_line_extended_string_close, 0)

        def Quoted_single_line_extended_text(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.Quoted_single_line_extended_text)
            else:
                return self.getToken(Swift5Parser.Quoted_single_line_extended_text, i)

        def getRuleIndex(self):
            return Swift5Parser.RULE_extended_string_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtended_string_literal" ):
                listener.enterExtended_string_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtended_string_literal" ):
                listener.exitExtended_string_literal(self)




    def extended_string_literal(self):

        localctx = Swift5Parser.Extended_string_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 622, self.RULE_extended_string_literal)
        self._la = 0 # Token type
        try:
            self.state = 2813
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [180]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2799
                self.match(Swift5Parser.Multi_line_extended_string_open)
                self.state = 2801 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2800
                    self.match(Swift5Parser.Quoted_multi_line_extended_text)
                    self.state = 2803 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==193):
                        break

                self.state = 2805
                self.match(Swift5Parser.Multi_line_extended_string_close)
                pass
            elif token in [181]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2806
                self.match(Swift5Parser.Single_line_extended_string_open)
                self.state = 2808 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2807
                    self.match(Swift5Parser.Quoted_single_line_extended_text)
                    self.state = 2810 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==191):
                        break

                self.state = 2812
                self.match(Swift5Parser.Single_line_extended_string_close)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Static_string_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Single_line_string_open(self):
            return self.getToken(Swift5Parser.Single_line_string_open, 0)

        def Single_line_string_close(self):
            return self.getToken(Swift5Parser.Single_line_string_close, 0)

        def Quoted_single_line_text(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.Quoted_single_line_text)
            else:
                return self.getToken(Swift5Parser.Quoted_single_line_text, i)

        def Multi_line_string_open(self):
            return self.getToken(Swift5Parser.Multi_line_string_open, 0)

        def Multi_line_string_close(self):
            return self.getToken(Swift5Parser.Multi_line_string_close, 0)

        def Quoted_multi_line_text(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.Quoted_multi_line_text)
            else:
                return self.getToken(Swift5Parser.Quoted_multi_line_text, i)

        def getRuleIndex(self):
            return Swift5Parser.RULE_static_string_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatic_string_literal" ):
                listener.enterStatic_string_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatic_string_literal" ):
                listener.exitStatic_string_literal(self)




    def static_string_literal(self):

        localctx = Swift5Parser.Static_string_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 624, self.RULE_static_string_literal)
        self._la = 0 # Token type
        try:
            self.state = 2831
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [183]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2815
                self.match(Swift5Parser.Single_line_string_open)
                self.state = 2819
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==186:
                    self.state = 2816
                    self.match(Swift5Parser.Quoted_single_line_text)
                    self.state = 2821
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2822
                self.match(Swift5Parser.Single_line_string_close)
                pass
            elif token in [182]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2823
                self.match(Swift5Parser.Multi_line_string_open)
                self.state = 2827
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==189:
                    self.state = 2824
                    self.match(Swift5Parser.Quoted_multi_line_text)
                    self.state = 2829
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2830
                self.match(Swift5Parser.Multi_line_string_close)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interpolated_string_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Single_line_string_open(self):
            return self.getToken(Swift5Parser.Single_line_string_open, 0)

        def Single_line_string_close(self):
            return self.getToken(Swift5Parser.Single_line_string_close, 0)

        def Quoted_single_line_text(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.Quoted_single_line_text)
            else:
                return self.getToken(Swift5Parser.Quoted_single_line_text, i)

        def Interpolataion_single_line(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.Interpolataion_single_line)
            else:
                return self.getToken(Swift5Parser.Interpolataion_single_line, i)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.RPAREN)
            else:
                return self.getToken(Swift5Parser.RPAREN, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.ExpressionContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.ExpressionContext,i)


        def tuple_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Tuple_elementContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Tuple_elementContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.COMMA)
            else:
                return self.getToken(Swift5Parser.COMMA, i)

        def tuple_element_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Swift5Parser.Tuple_element_listContext)
            else:
                return self.getTypedRuleContext(Swift5Parser.Tuple_element_listContext,i)


        def Multi_line_string_open(self):
            return self.getToken(Swift5Parser.Multi_line_string_open, 0)

        def Multi_line_string_close(self):
            return self.getToken(Swift5Parser.Multi_line_string_close, 0)

        def Quoted_multi_line_text(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.Quoted_multi_line_text)
            else:
                return self.getToken(Swift5Parser.Quoted_multi_line_text, i)

        def Interpolataion_multi_line(self, i:int=None):
            if i is None:
                return self.getTokens(Swift5Parser.Interpolataion_multi_line)
            else:
                return self.getToken(Swift5Parser.Interpolataion_multi_line, i)

        def getRuleIndex(self):
            return Swift5Parser.RULE_interpolated_string_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterpolated_string_literal" ):
                listener.enterInterpolated_string_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterpolated_string_literal" ):
                listener.exitInterpolated_string_literal(self)




    def interpolated_string_literal(self):

        localctx = Swift5Parser.Interpolated_string_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 626, self.RULE_interpolated_string_literal)
        self._la = 0 # Token type
        try:
            self.state = 2869
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [183]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2833
                self.match(Swift5Parser.Single_line_string_open)
                self.state = 2847
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==184 or _la==186:
                    self.state = 2845
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [186]:
                        self.state = 2834
                        self.match(Swift5Parser.Quoted_single_line_text)
                        pass
                    elif token in [184]:
                        self.state = 2835
                        self.match(Swift5Parser.Interpolataion_single_line)
                        self.state = 2841
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,350,self._ctx)
                        if la_ == 1:
                            self.state = 2836
                            self.expression()
                            pass

                        elif la_ == 2:
                            self.state = 2837
                            self.tuple_element()
                            self.state = 2838
                            self.match(Swift5Parser.COMMA)
                            self.state = 2839
                            self.tuple_element_list()
                            pass


                        self.state = 2843
                        self.match(Swift5Parser.RPAREN)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 2849
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2850
                self.match(Swift5Parser.Single_line_string_close)
                pass
            elif token in [182]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2851
                self.match(Swift5Parser.Multi_line_string_open)
                self.state = 2865
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==187 or _la==189:
                    self.state = 2863
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [189]:
                        self.state = 2852
                        self.match(Swift5Parser.Quoted_multi_line_text)
                        pass
                    elif token in [187]:
                        self.state = 2853
                        self.match(Swift5Parser.Interpolataion_multi_line)
                        self.state = 2859
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,353,self._ctx)
                        if la_ == 1:
                            self.state = 2854
                            self.expression()
                            pass

                        elif la_ == 2:
                            self.state = 2855
                            self.tuple_element()
                            self.state = 2856
                            self.match(Swift5Parser.COMMA)
                            self.state = 2857
                            self.tuple_element_list()
                            pass


                        self.state = 2861
                        self.match(Swift5Parser.RPAREN)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 2867
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2868
                self.match(Swift5Parser.Multi_line_string_close)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[2] = self.statements_sempred
        self._predicates[49] = self.compilation_condition_sempred
        self._predicates[184] = self.pattern_sempred
        self._predicates[200] = self.balanced_token_punctuation_sempred
        self._predicates[251] = self.forced_value_suffix_sempred
        self._predicates[252] = self.optional_chaining_suffix_sempred
        self._predicates[261] = self.type_sempred
        self._predicates[277] = self.trailing_composition_and_sempred
        self._predicates[286] = self.assignment_operator_sempred
        self._predicates[287] = self.negate_prefix_operator_sempred
        self._predicates[288] = self.compilation_condition_AND_sempred
        self._predicates[289] = self.compilation_condition_OR_sempred
        self._predicates[290] = self.compilation_condition_GE_sempred
        self._predicates[291] = self.compilation_condition_L_sempred
        self._predicates[292] = self.arrow_operator_sempred
        self._predicates[293] = self.range_operator_sempred
        self._predicates[294] = self.same_type_equals_sempred
        self._predicates[295] = self.binary_operator_sempred
        self._predicates[296] = self.prefix_operator_sempred
        self._predicates[297] = self.postfix_operator_sempred
        self._predicates[301] = self.operator_characters_sempred
        self._predicates[304] = self.dot_operator_characters_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def statements_sempred(self, localctx:StatementsContext, predIndex:int):
            if predIndex == 0:
                return this.isSeparatedStatement(_input, localctx.indexBefore)
         

    def compilation_condition_sempred(self, localctx:Compilation_conditionContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 1)
         

    def pattern_sempred(self, localctx:PatternContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 2)
         

    def balanced_token_punctuation_sempred(self, localctx:Balanced_token_punctuationContext, predIndex:int):
            if predIndex == 3:
                return this.isPrefixOp(_input)
         

            if predIndex == 4:
                return this.isPostfixOp(_input)
         

    def forced_value_suffix_sempred(self, localctx:Forced_value_suffixContext, predIndex:int):
            if predIndex == 5:
                return !this.isBinaryOp(_input)
         

    def optional_chaining_suffix_sempred(self, localctx:Optional_chaining_suffixContext, predIndex:int):
            if predIndex == 6:
                return !this.isBinaryOp(_input)
         

    def type_sempred(self, localctx:TypeContext, predIndex:int):
            if predIndex == 7:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 8:
                return !this.isBinaryOp(_input)
         

            if predIndex == 9:
                return !this.isBinaryOp(_input)
         

    def trailing_composition_and_sempred(self, localctx:Trailing_composition_andContext, predIndex:int):
            if predIndex == 10:
                return !this.isBinaryOp(_input)
         

    def assignment_operator_sempred(self, localctx:Assignment_operatorContext, predIndex:int):
            if predIndex == 11:
                return this.isBinaryOp(_input)
         

    def negate_prefix_operator_sempred(self, localctx:Negate_prefix_operatorContext, predIndex:int):
            if predIndex == 12:
                return this.isPrefixOp(_input)
         

    def compilation_condition_AND_sempred(self, localctx:Compilation_condition_ANDContext, predIndex:int):
            if predIndex == 13:
                return this.isOperator(_input,"&&")
         

    def compilation_condition_OR_sempred(self, localctx:Compilation_condition_ORContext, predIndex:int):
            if predIndex == 14:
                return this.isOperator(_input,"||")
         

    def compilation_condition_GE_sempred(self, localctx:Compilation_condition_GEContext, predIndex:int):
            if predIndex == 15:
                return this.isOperator(_input,">=")
         

    def compilation_condition_L_sempred(self, localctx:Compilation_condition_LContext, predIndex:int):
            if predIndex == 16:
                return this.isOperator(_input,"<")
         

    def arrow_operator_sempred(self, localctx:Arrow_operatorContext, predIndex:int):
            if predIndex == 17:
                return this.isOperator(_input,"->")
         

    def range_operator_sempred(self, localctx:Range_operatorContext, predIndex:int):
            if predIndex == 18:
                return this.isOperator(_input,"...")
         

    def same_type_equals_sempred(self, localctx:Same_type_equalsContext, predIndex:int):
            if predIndex == 19:
                return this.isOperator(_input,"==")
         

    def binary_operator_sempred(self, localctx:Binary_operatorContext, predIndex:int):
            if predIndex == 20:
                return this.isBinaryOp(_input)
         

    def prefix_operator_sempred(self, localctx:Prefix_operatorContext, predIndex:int):
            if predIndex == 21:
                return this.isPrefixOp(_input)
         

    def postfix_operator_sempred(self, localctx:Postfix_operatorContext, predIndex:int):
            if predIndex == 22:
                return this.isPostfixOp(_input)
         

    def operator_characters_sempred(self, localctx:Operator_charactersContext, predIndex:int):
            if predIndex == 23:
                return _input.get(_input.index()-1).getType()!=WS
         

    def dot_operator_characters_sempred(self, localctx:Dot_operator_charactersContext, predIndex:int):
            if predIndex == 24:
                return _input.get(_input.index()-1).getType()!=WS
         




